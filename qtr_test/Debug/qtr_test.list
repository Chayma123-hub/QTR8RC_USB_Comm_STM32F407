
qtr_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008038  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080081c8  080081c8  000181c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082a0  080082a0  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  080082a0  080082a0  000182a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082a8  080082a8  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082a8  080082a8  000182a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082ac  080082ac  000182ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  080082b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002014c  2**0
                  CONTENTS
 10 .bss          00001dbc  2000014c  2000014c  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001f08  20001f08  0002014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012308  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000030c5  00000000  00000000  000324c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010d0  00000000  00000000  00035590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cc7  00000000  00000000  00036660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000238e2  00000000  00000000  00037327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000143d8  00000000  00000000  0005ac09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ccd98  00000000  00000000  0006efe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004af8  00000000  00000000  0013bd7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00140874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081b0 	.word	0x080081b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	080081b0 	.word	0x080081b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us (uint16_t us)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <delay_us+0x30>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2200      	movs	r2, #0
 800058c:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 800058e:	bf00      	nop
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <delay_us+0x30>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	429a      	cmp	r2, r3
 800059a:	d3f9      	bcc.n	8000590 <delay_us+0x14>
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000168 	.word	0x20000168

080005b0 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80005cc:	887b      	ldrh	r3, [r7, #2]
 80005ce:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	4619      	mov	r1, r3
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f000 fd38 	bl	8001058 <HAL_GPIO_Init>
}
 80005e8:	bf00      	nop
 80005ea:	3720      	adds	r7, #32
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800060c:	887b      	ldrh	r3, [r7, #2]
 800060e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000614:	2301      	movs	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	4619      	mov	r1, r3
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 fd1a 	bl	8001058 <HAL_GPIO_Init>
}
 8000624:	bf00      	nop
 8000626:	3720      	adds	r7, #32
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <QTR8_read_black>:

void QTR8_read_black()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	Set_Pin_Output(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8000630:	2101      	movs	r1, #1
 8000632:	4888      	ldr	r0, [pc, #544]	; (8000854 <QTR8_read_black+0x228>)
 8000634:	f7ff ffbc 	bl	80005b0 <Set_Pin_Output>
	Set_Pin_Output(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8000638:	2102      	movs	r1, #2
 800063a:	4886      	ldr	r0, [pc, #536]	; (8000854 <QTR8_read_black+0x228>)
 800063c:	f7ff ffb8 	bl	80005b0 <Set_Pin_Output>
	Set_Pin_Output(SENSOR3_GPIO_Port, SENSOR3_Pin);
 8000640:	2104      	movs	r1, #4
 8000642:	4884      	ldr	r0, [pc, #528]	; (8000854 <QTR8_read_black+0x228>)
 8000644:	f7ff ffb4 	bl	80005b0 <Set_Pin_Output>
	Set_Pin_Output(SENSOR4_GPIO_Port, SENSOR4_Pin);
 8000648:	2108      	movs	r1, #8
 800064a:	4882      	ldr	r0, [pc, #520]	; (8000854 <QTR8_read_black+0x228>)
 800064c:	f7ff ffb0 	bl	80005b0 <Set_Pin_Output>
	Set_Pin_Output(SENSOR5_GPIO_Port, SENSOR5_Pin);
 8000650:	2110      	movs	r1, #16
 8000652:	4880      	ldr	r0, [pc, #512]	; (8000854 <QTR8_read_black+0x228>)
 8000654:	f7ff ffac 	bl	80005b0 <Set_Pin_Output>
	Set_Pin_Output(SENSOR6_GPIO_Port, SENSOR6_Pin);
 8000658:	2120      	movs	r1, #32
 800065a:	487e      	ldr	r0, [pc, #504]	; (8000854 <QTR8_read_black+0x228>)
 800065c:	f7ff ffa8 	bl	80005b0 <Set_Pin_Output>
	Set_Pin_Output(SENSOR7_GPIO_Port, SENSOR7_Pin);
 8000660:	2140      	movs	r1, #64	; 0x40
 8000662:	487c      	ldr	r0, [pc, #496]	; (8000854 <QTR8_read_black+0x228>)
 8000664:	f7ff ffa4 	bl	80005b0 <Set_Pin_Output>
	Set_Pin_Output(SENSOR8_GPIO_Port, SENSOR8_Pin);
 8000668:	2180      	movs	r1, #128	; 0x80
 800066a:	487a      	ldr	r0, [pc, #488]	; (8000854 <QTR8_read_black+0x228>)
 800066c:	f7ff ffa0 	bl	80005b0 <Set_Pin_Output>

	HAL_GPIO_WritePin (SENSOR1_GPIO_Port, SENSOR1_Pin, 1);
 8000670:	2201      	movs	r2, #1
 8000672:	2101      	movs	r1, #1
 8000674:	4877      	ldr	r0, [pc, #476]	; (8000854 <QTR8_read_black+0x228>)
 8000676:	f000 fea3 	bl	80013c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR2_GPIO_Port, SENSOR2_Pin, 1);
 800067a:	2201      	movs	r2, #1
 800067c:	2102      	movs	r1, #2
 800067e:	4875      	ldr	r0, [pc, #468]	; (8000854 <QTR8_read_black+0x228>)
 8000680:	f000 fe9e 	bl	80013c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR3_GPIO_Port, SENSOR3_Pin, 1);
 8000684:	2201      	movs	r2, #1
 8000686:	2104      	movs	r1, #4
 8000688:	4872      	ldr	r0, [pc, #456]	; (8000854 <QTR8_read_black+0x228>)
 800068a:	f000 fe99 	bl	80013c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR4_GPIO_Port, SENSOR4_Pin, 1);
 800068e:	2201      	movs	r2, #1
 8000690:	2108      	movs	r1, #8
 8000692:	4870      	ldr	r0, [pc, #448]	; (8000854 <QTR8_read_black+0x228>)
 8000694:	f000 fe94 	bl	80013c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR5_GPIO_Port, SENSOR5_Pin, 1);
 8000698:	2201      	movs	r2, #1
 800069a:	2110      	movs	r1, #16
 800069c:	486d      	ldr	r0, [pc, #436]	; (8000854 <QTR8_read_black+0x228>)
 800069e:	f000 fe8f 	bl	80013c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR6_GPIO_Port, SENSOR6_Pin, 1);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2120      	movs	r1, #32
 80006a6:	486b      	ldr	r0, [pc, #428]	; (8000854 <QTR8_read_black+0x228>)
 80006a8:	f000 fe8a 	bl	80013c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR7_GPIO_Port, SENSOR7_Pin, 1);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2140      	movs	r1, #64	; 0x40
 80006b0:	4868      	ldr	r0, [pc, #416]	; (8000854 <QTR8_read_black+0x228>)
 80006b2:	f000 fe85 	bl	80013c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR8_GPIO_Port, SENSOR8_Pin, 1);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	4866      	ldr	r0, [pc, #408]	; (8000854 <QTR8_read_black+0x228>)
 80006bc:	f000 fe80 	bl	80013c0 <HAL_GPIO_WritePin>
	delay_us(10);
 80006c0:	200a      	movs	r0, #10
 80006c2:	f7ff ff5b 	bl	800057c <delay_us>

	Set_Pin_Input(SENSOR1_GPIO_Port, SENSOR1_Pin);
 80006c6:	2101      	movs	r1, #1
 80006c8:	4862      	ldr	r0, [pc, #392]	; (8000854 <QTR8_read_black+0x228>)
 80006ca:	f7ff ff91 	bl	80005f0 <Set_Pin_Input>
	Set_Pin_Input(SENSOR2_GPIO_Port, SENSOR2_Pin);
 80006ce:	2102      	movs	r1, #2
 80006d0:	4860      	ldr	r0, [pc, #384]	; (8000854 <QTR8_read_black+0x228>)
 80006d2:	f7ff ff8d 	bl	80005f0 <Set_Pin_Input>
	Set_Pin_Input(SENSOR3_GPIO_Port, SENSOR3_Pin);
 80006d6:	2104      	movs	r1, #4
 80006d8:	485e      	ldr	r0, [pc, #376]	; (8000854 <QTR8_read_black+0x228>)
 80006da:	f7ff ff89 	bl	80005f0 <Set_Pin_Input>
	Set_Pin_Input(SENSOR4_GPIO_Port, SENSOR4_Pin);
 80006de:	2108      	movs	r1, #8
 80006e0:	485c      	ldr	r0, [pc, #368]	; (8000854 <QTR8_read_black+0x228>)
 80006e2:	f7ff ff85 	bl	80005f0 <Set_Pin_Input>
	Set_Pin_Input(SENSOR5_GPIO_Port, SENSOR5_Pin);
 80006e6:	2110      	movs	r1, #16
 80006e8:	485a      	ldr	r0, [pc, #360]	; (8000854 <QTR8_read_black+0x228>)
 80006ea:	f7ff ff81 	bl	80005f0 <Set_Pin_Input>
	Set_Pin_Input(SENSOR6_GPIO_Port, SENSOR6_Pin);
 80006ee:	2120      	movs	r1, #32
 80006f0:	4858      	ldr	r0, [pc, #352]	; (8000854 <QTR8_read_black+0x228>)
 80006f2:	f7ff ff7d 	bl	80005f0 <Set_Pin_Input>
	Set_Pin_Input(SENSOR7_GPIO_Port, SENSOR7_Pin);
 80006f6:	2140      	movs	r1, #64	; 0x40
 80006f8:	4856      	ldr	r0, [pc, #344]	; (8000854 <QTR8_read_black+0x228>)
 80006fa:	f7ff ff79 	bl	80005f0 <Set_Pin_Input>
	Set_Pin_Input(SENSOR8_GPIO_Port, SENSOR8_Pin);
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	4854      	ldr	r0, [pc, #336]	; (8000854 <QTR8_read_black+0x228>)
 8000702:	f7ff ff75 	bl	80005f0 <Set_Pin_Input>

	delay_us(10000);
 8000706:	f242 7010 	movw	r0, #10000	; 0x2710
 800070a:	f7ff ff37 	bl	800057c <delay_us>



	pos1=0,pos2=0,pos3=0,pos4=0,pos5=0,pos6=0,pos7=0,pos8=0;
 800070e:	4b52      	ldr	r3, [pc, #328]	; (8000858 <QTR8_read_black+0x22c>)
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	4b51      	ldr	r3, [pc, #324]	; (800085c <QTR8_read_black+0x230>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	4b51      	ldr	r3, [pc, #324]	; (8000860 <QTR8_read_black+0x234>)
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	4b50      	ldr	r3, [pc, #320]	; (8000864 <QTR8_read_black+0x238>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	4b50      	ldr	r3, [pc, #320]	; (8000868 <QTR8_read_black+0x23c>)
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	4b4f      	ldr	r3, [pc, #316]	; (800086c <QTR8_read_black+0x240>)
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	4b4f      	ldr	r3, [pc, #316]	; (8000870 <QTR8_read_black+0x244>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	4b4e      	ldr	r3, [pc, #312]	; (8000874 <QTR8_read_black+0x248>)
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin)) {
 800073e:	2101      	movs	r1, #1
 8000740:	4844      	ldr	r0, [pc, #272]	; (8000854 <QTR8_read_black+0x228>)
 8000742:	f000 fe25 	bl	8001390 <HAL_GPIO_ReadPin>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d009      	beq.n	8000760 <QTR8_read_black+0x134>
		sensor_read |= 0x00000001;
 800074c:	4b4a      	ldr	r3, [pc, #296]	; (8000878 <QTR8_read_black+0x24c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	4a48      	ldr	r2, [pc, #288]	; (8000878 <QTR8_read_black+0x24c>)
 8000756:	6013      	str	r3, [r2, #0]
		pos1= 1000;
 8000758:	4b3f      	ldr	r3, [pc, #252]	; (8000858 <QTR8_read_black+0x22c>)
 800075a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800075e:	601a      	str	r2, [r3, #0]

	}

	if (HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin)) {
 8000760:	2102      	movs	r1, #2
 8000762:	483c      	ldr	r0, [pc, #240]	; (8000854 <QTR8_read_black+0x228>)
 8000764:	f000 fe14 	bl	8001390 <HAL_GPIO_ReadPin>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d009      	beq.n	8000782 <QTR8_read_black+0x156>
		sensor_read |= 0x00000010;
 800076e:	4b42      	ldr	r3, [pc, #264]	; (8000878 <QTR8_read_black+0x24c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	4a40      	ldr	r2, [pc, #256]	; (8000878 <QTR8_read_black+0x24c>)
 8000778:	6013      	str	r3, [r2, #0]
		pos2= 2000;
 800077a:	4b38      	ldr	r3, [pc, #224]	; (800085c <QTR8_read_black+0x230>)
 800077c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000780:	601a      	str	r2, [r3, #0]

	}

	if (HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin)) {
 8000782:	2104      	movs	r1, #4
 8000784:	4833      	ldr	r0, [pc, #204]	; (8000854 <QTR8_read_black+0x228>)
 8000786:	f000 fe03 	bl	8001390 <HAL_GPIO_ReadPin>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d009      	beq.n	80007a4 <QTR8_read_black+0x178>
		sensor_read |= 0x00000100;
 8000790:	4b39      	ldr	r3, [pc, #228]	; (8000878 <QTR8_read_black+0x24c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000798:	4a37      	ldr	r2, [pc, #220]	; (8000878 <QTR8_read_black+0x24c>)
 800079a:	6013      	str	r3, [r2, #0]
		pos3= 3000;
 800079c:	4b30      	ldr	r3, [pc, #192]	; (8000860 <QTR8_read_black+0x234>)
 800079e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80007a2:	601a      	str	r2, [r3, #0]

    }

	if (HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin)) {
 80007a4:	2108      	movs	r1, #8
 80007a6:	482b      	ldr	r0, [pc, #172]	; (8000854 <QTR8_read_black+0x228>)
 80007a8:	f000 fdf2 	bl	8001390 <HAL_GPIO_ReadPin>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d009      	beq.n	80007c6 <QTR8_read_black+0x19a>
		sensor_read |= 0x00001000;
 80007b2:	4b31      	ldr	r3, [pc, #196]	; (8000878 <QTR8_read_black+0x24c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007ba:	4a2f      	ldr	r2, [pc, #188]	; (8000878 <QTR8_read_black+0x24c>)
 80007bc:	6013      	str	r3, [r2, #0]
		pos4= 4000;
 80007be:	4b29      	ldr	r3, [pc, #164]	; (8000864 <QTR8_read_black+0x238>)
 80007c0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80007c4:	601a      	str	r2, [r3, #0]

    }

	if (HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin)) {
 80007c6:	2110      	movs	r1, #16
 80007c8:	4822      	ldr	r0, [pc, #136]	; (8000854 <QTR8_read_black+0x228>)
 80007ca:	f000 fde1 	bl	8001390 <HAL_GPIO_ReadPin>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d009      	beq.n	80007e8 <QTR8_read_black+0x1bc>
		sensor_read |= 0x00010000;
 80007d4:	4b28      	ldr	r3, [pc, #160]	; (8000878 <QTR8_read_black+0x24c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007dc:	4a26      	ldr	r2, [pc, #152]	; (8000878 <QTR8_read_black+0x24c>)
 80007de:	6013      	str	r3, [r2, #0]
		pos5= 5000;
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <QTR8_read_black+0x23c>)
 80007e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80007e6:	601a      	str	r2, [r3, #0]

    }

	if (HAL_GPIO_ReadPin(SENSOR6_GPIO_Port, SENSOR6_Pin)) {
 80007e8:	2120      	movs	r1, #32
 80007ea:	481a      	ldr	r0, [pc, #104]	; (8000854 <QTR8_read_black+0x228>)
 80007ec:	f000 fdd0 	bl	8001390 <HAL_GPIO_ReadPin>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d009      	beq.n	800080a <QTR8_read_black+0x1de>
		sensor_read |= 0x00100000;
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <QTR8_read_black+0x24c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80007fe:	4a1e      	ldr	r2, [pc, #120]	; (8000878 <QTR8_read_black+0x24c>)
 8000800:	6013      	str	r3, [r2, #0]
		pos6= 6000;
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <QTR8_read_black+0x240>)
 8000804:	f241 7270 	movw	r2, #6000	; 0x1770
 8000808:	601a      	str	r2, [r3, #0]

    }

	if (HAL_GPIO_ReadPin(SENSOR7_GPIO_Port, SENSOR7_Pin)) {
 800080a:	2140      	movs	r1, #64	; 0x40
 800080c:	4811      	ldr	r0, [pc, #68]	; (8000854 <QTR8_read_black+0x228>)
 800080e:	f000 fdbf 	bl	8001390 <HAL_GPIO_ReadPin>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d009      	beq.n	800082c <QTR8_read_black+0x200>
		sensor_read |= 0x01000000;
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <QTR8_read_black+0x24c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000820:	4a15      	ldr	r2, [pc, #84]	; (8000878 <QTR8_read_black+0x24c>)
 8000822:	6013      	str	r3, [r2, #0]
		pos7= 7000;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <QTR8_read_black+0x244>)
 8000826:	f641 3258 	movw	r2, #7000	; 0x1b58
 800082a:	601a      	str	r2, [r3, #0]

    }

	if (HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin)) {
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	4809      	ldr	r0, [pc, #36]	; (8000854 <QTR8_read_black+0x228>)
 8000830:	f000 fdae 	bl	8001390 <HAL_GPIO_ReadPin>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d009      	beq.n	800084e <QTR8_read_black+0x222>
		sensor_read |= 0x10000000;
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <QTR8_read_black+0x24c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000842:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <QTR8_read_black+0x24c>)
 8000844:	6013      	str	r3, [r2, #0]
		pos8= 8000;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <QTR8_read_black+0x248>)
 8000848:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800084c:	601a      	str	r2, [r3, #0]

    }


}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40020000 	.word	0x40020000
 8000858:	200001b4 	.word	0x200001b4
 800085c:	200001b8 	.word	0x200001b8
 8000860:	200001bc 	.word	0x200001bc
 8000864:	200001c0 	.word	0x200001c0
 8000868:	200001c4 	.word	0x200001c4
 800086c:	200001c8 	.word	0x200001c8
 8000870:	200001cc 	.word	0x200001cc
 8000874:	200001d0 	.word	0x200001d0
 8000878:	200001b0 	.word	0x200001b0

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087e:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 8000882:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000884:	f000 fa40 	bl	8000d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000888:	f000 f852 	bl	8000930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088c:	f000 f906 	bl	8000a9c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000890:	f000 f8b8 	bl	8000a04 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000894:	f006 faba 	bl	8006e0c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000898:	481b      	ldr	r0, [pc, #108]	; (8000908 <main+0x8c>)
 800089a:	f002 fcbb 	bl	8003214 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    QTR8_read_black();
 800089e:	f7ff fec5 	bl	800062c <QTR8_read_black>

	    char buffer[1000];

	    snprintf(buffer, sizeof(buffer), "pos1 :%d  pos2 :%d  pos3 :%d  pos4 :%d  pos5 :%d  pos6 :%d  pos7 :%d  pos8 :%d\n",pos1,pos2,pos3,pos4,pos5,pos6,pos7,pos8);
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <main+0x90>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <main+0x94>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a19      	ldr	r2, [pc, #100]	; (8000914 <main+0x98>)
 80008ae:	6812      	ldr	r2, [r2, #0]
 80008b0:	4919      	ldr	r1, [pc, #100]	; (8000918 <main+0x9c>)
 80008b2:	6809      	ldr	r1, [r1, #0]
 80008b4:	4819      	ldr	r0, [pc, #100]	; (800091c <main+0xa0>)
 80008b6:	6800      	ldr	r0, [r0, #0]
 80008b8:	4c19      	ldr	r4, [pc, #100]	; (8000920 <main+0xa4>)
 80008ba:	6824      	ldr	r4, [r4, #0]
 80008bc:	4d19      	ldr	r5, [pc, #100]	; (8000924 <main+0xa8>)
 80008be:	682d      	ldr	r5, [r5, #0]
 80008c0:	4e19      	ldr	r6, [pc, #100]	; (8000928 <main+0xac>)
 80008c2:	6836      	ldr	r6, [r6, #0]
 80008c4:	f107 0c08 	add.w	ip, r7, #8
 80008c8:	9606      	str	r6, [sp, #24]
 80008ca:	9505      	str	r5, [sp, #20]
 80008cc:	9404      	str	r4, [sp, #16]
 80008ce:	9003      	str	r0, [sp, #12]
 80008d0:	9102      	str	r1, [sp, #8]
 80008d2:	9201      	str	r2, [sp, #4]
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a14      	ldr	r2, [pc, #80]	; (800092c <main+0xb0>)
 80008da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008de:	4660      	mov	r0, ip
 80008e0:	f006 ffae 	bl	8007840 <sniprintf>

	    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fc71 	bl	80001d0 <strlen>
 80008ee:	4603      	mov	r3, r0
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	4611      	mov	r1, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f006 fb45 	bl	8006f88 <CDC_Transmit_FS>

	    HAL_Delay(500);
 80008fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000902:	f000 fa73 	bl	8000dec <HAL_Delay>
  {
 8000906:	e7ca      	b.n	800089e <main+0x22>
 8000908:	20000168 	.word	0x20000168
 800090c:	200001b4 	.word	0x200001b4
 8000910:	200001b8 	.word	0x200001b8
 8000914:	200001bc 	.word	0x200001bc
 8000918:	200001c0 	.word	0x200001c0
 800091c:	200001c4 	.word	0x200001c4
 8000920:	200001c8 	.word	0x200001c8
 8000924:	200001cc 	.word	0x200001cc
 8000928:	200001d0 	.word	0x200001d0
 800092c:	080081c8 	.word	0x080081c8

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b094      	sub	sp, #80	; 0x50
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 0320 	add.w	r3, r7, #32
 800093a:	2230      	movs	r2, #48	; 0x30
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f006 ffb2 	bl	80078a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	4b28      	ldr	r3, [pc, #160]	; (80009fc <SystemClock_Config+0xcc>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	4a27      	ldr	r2, [pc, #156]	; (80009fc <SystemClock_Config+0xcc>)
 800095e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000962:	6413      	str	r3, [r2, #64]	; 0x40
 8000964:	4b25      	ldr	r3, [pc, #148]	; (80009fc <SystemClock_Config+0xcc>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <SystemClock_Config+0xd0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a21      	ldr	r2, [pc, #132]	; (8000a00 <SystemClock_Config+0xd0>)
 800097a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <SystemClock_Config+0xd0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000990:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000996:	2302      	movs	r3, #2
 8000998:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800099e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009a0:	2304      	movs	r3, #4
 80009a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009a4:	23a8      	movs	r3, #168	; 0xa8
 80009a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009ac:	2307      	movs	r3, #7
 80009ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	f107 0320 	add.w	r3, r7, #32
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 ff6d 	bl	8002894 <HAL_RCC_OscConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009c0:	f000 f8ae 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c4:	230f      	movs	r3, #15
 80009c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c8:	2302      	movs	r3, #2
 80009ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2105      	movs	r1, #5
 80009e2:	4618      	mov	r0, r3
 80009e4:	f002 f9ce 	bl	8002d84 <HAL_RCC_ClockConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009ee:	f000 f897 	bl	8000b20 <Error_Handler>
  }
}
 80009f2:	bf00      	nop
 80009f4:	3750      	adds	r7, #80	; 0x50
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40007000 	.word	0x40007000

08000a04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a18:	463b      	mov	r3, r7
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a20:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <MX_TIM2_Init+0x94>)
 8000a22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_TIM2_Init+0x94>)
 8000a2a:	2214      	movs	r2, #20
 8000a2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_TIM2_Init+0x94>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_TIM2_Init+0x94>)
 8000a36:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8000a3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_TIM2_Init+0x94>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_TIM2_Init+0x94>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a48:	4813      	ldr	r0, [pc, #76]	; (8000a98 <MX_TIM2_Init+0x94>)
 8000a4a:	f002 fb93 	bl	8003174 <HAL_TIM_Base_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a54:	f000 f864 	bl	8000b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	4619      	mov	r1, r3
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <MX_TIM2_Init+0x94>)
 8000a66:	f002 fc3d 	bl	80032e4 <HAL_TIM_ConfigClockSource>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a70:	f000 f856 	bl	8000b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a74:	2300      	movs	r3, #0
 8000a76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_TIM2_Init+0x94>)
 8000a82:	f002 fe3d 	bl	8003700 <HAL_TIMEx_MasterConfigSynchronization>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a8c:	f000 f848 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000168 	.word	0x20000168

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_GPIO_Init+0x7c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <MX_GPIO_Init+0x7c>)
 8000abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_GPIO_Init+0x7c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_GPIO_Init+0x7c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <MX_GPIO_Init+0x7c>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_GPIO_Init+0x7c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin|SENSOR4_Pin
 8000aea:	2200      	movs	r2, #0
 8000aec:	21ff      	movs	r1, #255	; 0xff
 8000aee:	480b      	ldr	r0, [pc, #44]	; (8000b1c <MX_GPIO_Init+0x80>)
 8000af0:	f000 fc66 	bl	80013c0 <HAL_GPIO_WritePin>
                          |SENSOR5_Pin|SENSOR6_Pin|SENSOR7_Pin|SENSOR8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SENSOR1_Pin SENSOR2_Pin SENSOR3_Pin SENSOR4_Pin
                           SENSOR5_Pin SENSOR6_Pin SENSOR7_Pin SENSOR8_Pin */
  GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin|SENSOR4_Pin
 8000af4:	23ff      	movs	r3, #255	; 0xff
 8000af6:	60fb      	str	r3, [r7, #12]
                          |SENSOR5_Pin|SENSOR6_Pin|SENSOR7_Pin|SENSOR8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_GPIO_Init+0x80>)
 8000b0c:	f000 faa4 	bl	8001058 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b10:	bf00      	nop
 8000b12:	3720      	adds	r7, #32
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020000 	.word	0x40020000

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b6a:	2007      	movs	r0, #7
 8000b6c:	f000 fa32 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40023800 	.word	0x40023800

08000b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b8c:	d10d      	bne.n	8000baa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_TIM_Base_MspInit+0x3c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_TIM_Base_MspInit+0x3c>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f000 f8d0 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <OTG_FS_IRQHandler+0x10>)
 8000c16:	f000 fd30 	bl	800167a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200016bc 	.word	0x200016bc

08000c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c2c:	4a14      	ldr	r2, [pc, #80]	; (8000c80 <_sbrk+0x5c>)
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <_sbrk+0x60>)
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <_sbrk+0x64>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <_sbrk+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d207      	bcs.n	8000c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c54:	f006 fe30 	bl	80078b8 <__errno>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c62:	e009      	b.n	8000c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <_sbrk+0x64>)
 8000c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20020000 	.word	0x20020000
 8000c84:	00000400 	.word	0x00000400
 8000c88:	200001d4 	.word	0x200001d4
 8000c8c:	20001f08 	.word	0x20001f08

08000c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cb8:	f7ff ffea 	bl	8000c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cbc:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cbe:	490d      	ldr	r1, [pc, #52]	; (8000cf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cd4:	4c0a      	ldr	r4, [pc, #40]	; (8000d00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f006 fdef 	bl	80078c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce6:	f7ff fdc9 	bl	800087c <main>
  bx  lr    
 8000cea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000cf8:	080082b0 	.word	0x080082b0
  ldr r2, =_sbss
 8000cfc:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000d00:	20001f08 	.word	0x20001f08

08000d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC_IRQHandler>
	...

08000d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <HAL_Init+0x40>)
 8000d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_Init+0x40>)
 8000d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <HAL_Init+0x40>)
 8000d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 f94f 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f000 f808 	bl	8000d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3c:	f7ff fef6 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023c00 	.word	0x40023c00

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x54>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_InitTick+0x58>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f967 	bl	800103e <HAL_SYSTICK_Config>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00e      	b.n	8000d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d80a      	bhi.n	8000d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d80:	2200      	movs	r2, #0
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d88:	f000 f92f 	bl	8000fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d8c:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <HAL_InitTick+0x5c>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e000      	b.n	8000d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000004 	.word	0x20000004

08000dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x20>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x24>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <HAL_IncTick+0x24>)
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	200001d8 	.word	0x200001d8

08000dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <HAL_GetTick+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	200001d8 	.word	0x200001d8

08000dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df4:	f7ff ffee 	bl	8000dd4 <HAL_GetTick>
 8000df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e04:	d005      	beq.n	8000e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_Delay+0x44>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4413      	add	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e12:	bf00      	nop
 8000e14:	f7ff ffde 	bl	8000dd4 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d8f7      	bhi.n	8000e14 <HAL_Delay+0x28>
  {
  }
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000008 	.word	0x20000008

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4907      	ldr	r1, [pc, #28]	; (8000ed0 <__NVIC_EnableIRQ+0x38>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e100 	.word	0xe000e100

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fb4:	f7ff ff8e 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff29 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff3e 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff8e 	bl	8000f28 <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5d 	bl	8000ed4 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff31 	bl	8000e98 <__NVIC_EnableIRQ>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffa2 	bl	8000f90 <SysTick_Config>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
 8001072:	e16b      	b.n	800134c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001074:	2201      	movs	r2, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	429a      	cmp	r2, r3
 800108e:	f040 815a 	bne.w	8001346 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b01      	cmp	r3, #1
 800109c:	d005      	beq.n	80010aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d130      	bne.n	800110c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e0:	2201      	movs	r2, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	f003 0201 	and.w	r2, r3, #1
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b03      	cmp	r3, #3
 8001116:	d017      	beq.n	8001148 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d123      	bne.n	800119c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	08da      	lsrs	r2, r3, #3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3208      	adds	r2, #8
 800115c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	220f      	movs	r2, #15
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	08da      	lsrs	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3208      	adds	r2, #8
 8001196:	69b9      	ldr	r1, [r7, #24]
 8001198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0203 	and.w	r2, r3, #3
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 80b4 	beq.w	8001346 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b60      	ldr	r3, [pc, #384]	; (8001364 <HAL_GPIO_Init+0x30c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	4a5f      	ldr	r2, [pc, #380]	; (8001364 <HAL_GPIO_Init+0x30c>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b5d      	ldr	r3, [pc, #372]	; (8001364 <HAL_GPIO_Init+0x30c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011fa:	4a5b      	ldr	r2, [pc, #364]	; (8001368 <HAL_GPIO_Init+0x310>)
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3302      	adds	r3, #2
 8001202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	220f      	movs	r2, #15
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a52      	ldr	r2, [pc, #328]	; (800136c <HAL_GPIO_Init+0x314>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d02b      	beq.n	800127e <HAL_GPIO_Init+0x226>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a51      	ldr	r2, [pc, #324]	; (8001370 <HAL_GPIO_Init+0x318>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d025      	beq.n	800127a <HAL_GPIO_Init+0x222>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a50      	ldr	r2, [pc, #320]	; (8001374 <HAL_GPIO_Init+0x31c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d01f      	beq.n	8001276 <HAL_GPIO_Init+0x21e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4f      	ldr	r2, [pc, #316]	; (8001378 <HAL_GPIO_Init+0x320>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d019      	beq.n	8001272 <HAL_GPIO_Init+0x21a>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4e      	ldr	r2, [pc, #312]	; (800137c <HAL_GPIO_Init+0x324>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d013      	beq.n	800126e <HAL_GPIO_Init+0x216>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4d      	ldr	r2, [pc, #308]	; (8001380 <HAL_GPIO_Init+0x328>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d00d      	beq.n	800126a <HAL_GPIO_Init+0x212>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4c      	ldr	r2, [pc, #304]	; (8001384 <HAL_GPIO_Init+0x32c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d007      	beq.n	8001266 <HAL_GPIO_Init+0x20e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4b      	ldr	r2, [pc, #300]	; (8001388 <HAL_GPIO_Init+0x330>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d101      	bne.n	8001262 <HAL_GPIO_Init+0x20a>
 800125e:	2307      	movs	r3, #7
 8001260:	e00e      	b.n	8001280 <HAL_GPIO_Init+0x228>
 8001262:	2308      	movs	r3, #8
 8001264:	e00c      	b.n	8001280 <HAL_GPIO_Init+0x228>
 8001266:	2306      	movs	r3, #6
 8001268:	e00a      	b.n	8001280 <HAL_GPIO_Init+0x228>
 800126a:	2305      	movs	r3, #5
 800126c:	e008      	b.n	8001280 <HAL_GPIO_Init+0x228>
 800126e:	2304      	movs	r3, #4
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x228>
 8001272:	2303      	movs	r3, #3
 8001274:	e004      	b.n	8001280 <HAL_GPIO_Init+0x228>
 8001276:	2302      	movs	r3, #2
 8001278:	e002      	b.n	8001280 <HAL_GPIO_Init+0x228>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <HAL_GPIO_Init+0x228>
 800127e:	2300      	movs	r3, #0
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	f002 0203 	and.w	r2, r2, #3
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	4093      	lsls	r3, r2
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001290:	4935      	ldr	r1, [pc, #212]	; (8001368 <HAL_GPIO_Init+0x310>)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129e:	4b3b      	ldr	r3, [pc, #236]	; (800138c <HAL_GPIO_Init+0x334>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c2:	4a32      	ldr	r2, [pc, #200]	; (800138c <HAL_GPIO_Init+0x334>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c8:	4b30      	ldr	r3, [pc, #192]	; (800138c <HAL_GPIO_Init+0x334>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012ec:	4a27      	ldr	r2, [pc, #156]	; (800138c <HAL_GPIO_Init+0x334>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <HAL_GPIO_Init+0x334>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001316:	4a1d      	ldr	r2, [pc, #116]	; (800138c <HAL_GPIO_Init+0x334>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <HAL_GPIO_Init+0x334>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001340:	4a12      	ldr	r2, [pc, #72]	; (800138c <HAL_GPIO_Init+0x334>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b0f      	cmp	r3, #15
 8001350:	f67f ae90 	bls.w	8001074 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3724      	adds	r7, #36	; 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40013800 	.word	0x40013800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020400 	.word	0x40020400
 8001374:	40020800 	.word	0x40020800
 8001378:	40020c00 	.word	0x40020c00
 800137c:	40021000 	.word	0x40021000
 8001380:	40021400 	.word	0x40021400
 8001384:	40021800 	.word	0x40021800
 8001388:	40021c00 	.word	0x40021c00
 800138c:	40013c00 	.word	0x40013c00

08001390 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	887b      	ldrh	r3, [r7, #2]
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e001      	b.n	80013b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
 80013cc:	4613      	mov	r3, r2
 80013ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d0:	787b      	ldrb	r3, [r7, #1]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013dc:	e003      	b.n	80013e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013de:	887b      	ldrh	r3, [r7, #2]
 80013e0:	041a      	lsls	r2, r3, #16
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	619a      	str	r2, [r3, #24]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af02      	add	r7, sp, #8
 80013f8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e101      	b.n	8001608 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d106      	bne.n	8001424 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f005 fefa 	bl	8007218 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2203      	movs	r2, #3
 8001428:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001432:	d102      	bne.n	800143a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f002 faf1 	bl	8003a26 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	7c1a      	ldrb	r2, [r3, #16]
 800144c:	f88d 2000 	strb.w	r2, [sp]
 8001450:	3304      	adds	r3, #4
 8001452:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001454:	f002 f9d0 	bl	80037f8 <USB_CoreInit>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2202      	movs	r2, #2
 8001462:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e0ce      	b.n	8001608 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f002 fae9 	bl	8003a48 <USB_SetCurrentMode>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d005      	beq.n	8001488 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2202      	movs	r2, #2
 8001480:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0bf      	b.n	8001608 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	e04a      	b.n	8001524 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	440b      	add	r3, r1
 800149c:	3315      	adds	r3, #21
 800149e:	2201      	movs	r2, #1
 80014a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	3314      	adds	r3, #20
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	b298      	uxth	r0, r3
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4413      	add	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	332e      	adds	r3, #46	; 0x2e
 80014ca:	4602      	mov	r2, r0
 80014cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	4413      	add	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	3318      	adds	r3, #24
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	331c      	adds	r3, #28
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	4413      	add	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	3320      	adds	r3, #32
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	3324      	adds	r3, #36	; 0x24
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	3301      	adds	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	791b      	ldrb	r3, [r3, #4]
 8001528:	7bfa      	ldrb	r2, [r7, #15]
 800152a:	429a      	cmp	r2, r3
 800152c:	d3af      	bcc.n	800148e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152e:	2300      	movs	r3, #0
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	e044      	b.n	80015be <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001534:	7bfa      	ldrb	r2, [r7, #15]
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4413      	add	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800155c:	7bfa      	ldrb	r2, [r7, #15]
 800155e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	4413      	add	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001576:	7bfa      	ldrb	r2, [r7, #15]
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	4413      	add	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	3301      	adds	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	791b      	ldrb	r3, [r3, #4]
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d3b5      	bcc.n	8001534 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7c1a      	ldrb	r2, [r3, #16]
 80015d0:	f88d 2000 	strb.w	r2, [sp]
 80015d4:	3304      	adds	r3, #4
 80015d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015d8:	f002 fa82 	bl	8003ae0 <USB_DevInit>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d005      	beq.n	80015ee <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2202      	movs	r2, #2
 80015e6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00c      	b.n	8001608 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f003 fac6 	bl	8004b92 <USB_DevDisconnect>

  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_PCD_Start+0x1c>
 8001628:	2302      	movs	r3, #2
 800162a:	e022      	b.n	8001672 <HAL_PCD_Start+0x62>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800163c:	2b00      	cmp	r3, #0
 800163e:	d009      	beq.n	8001654 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001644:	2b01      	cmp	r3, #1
 8001646:	d105      	bne.n	8001654 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f002 f9d3 	bl	8003a04 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f003 fa74 	bl	8004b50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800167a:	b590      	push	{r4, r7, lr}
 800167c:	b08d      	sub	sp, #52	; 0x34
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f003 fb32 	bl	8004cfa <USB_GetMode>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	f040 848c 	bne.w	8001fb6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 fa96 	bl	8004bd4 <USB_ReadInterrupts>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 8482 	beq.w	8001fb4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 fa83 	bl	8004bd4 <USB_ReadInterrupts>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d107      	bne.n	80016e8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	695a      	ldr	r2, [r3, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f002 0202 	and.w	r2, r2, #2
 80016e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f003 fa71 	bl	8004bd4 <USB_ReadInterrupts>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f003 0310 	and.w	r3, r3, #16
 80016f8:	2b10      	cmp	r3, #16
 80016fa:	d161      	bne.n	80017c0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699a      	ldr	r2, [r3, #24]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0210 	bic.w	r2, r2, #16
 800170a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800170c:	6a3b      	ldr	r3, [r7, #32]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	f003 020f 	and.w	r2, r3, #15
 8001718:	4613      	mov	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	4413      	add	r3, r2
 8001728:	3304      	adds	r3, #4
 800172a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	0c5b      	lsrs	r3, r3, #17
 8001730:	f003 030f 	and.w	r3, r3, #15
 8001734:	2b02      	cmp	r3, #2
 8001736:	d124      	bne.n	8001782 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800173e:	4013      	ands	r3, r2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d035      	beq.n	80017b0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	091b      	lsrs	r3, r3, #4
 800174c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800174e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001752:	b29b      	uxth	r3, r3
 8001754:	461a      	mov	r2, r3
 8001756:	6a38      	ldr	r0, [r7, #32]
 8001758:	f003 f8a8 	bl	80048ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	091b      	lsrs	r3, r3, #4
 8001764:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001768:	441a      	add	r2, r3
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	695a      	ldr	r2, [r3, #20]
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	091b      	lsrs	r3, r3, #4
 8001776:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800177a:	441a      	add	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	615a      	str	r2, [r3, #20]
 8001780:	e016      	b.n	80017b0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	0c5b      	lsrs	r3, r3, #17
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	2b06      	cmp	r3, #6
 800178c:	d110      	bne.n	80017b0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001794:	2208      	movs	r2, #8
 8001796:	4619      	mov	r1, r3
 8001798:	6a38      	ldr	r0, [r7, #32]
 800179a:	f003 f887 	bl	80048ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	695a      	ldr	r2, [r3, #20]
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017aa:	441a      	add	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	699a      	ldr	r2, [r3, #24]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0210 	orr.w	r2, r2, #16
 80017be:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f003 fa05 	bl	8004bd4 <USB_ReadInterrupts>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017d4:	f040 80a7 	bne.w	8001926 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f003 fa0a 	bl	8004bfa <USB_ReadDevAllOutEpInterrupt>
 80017e6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80017e8:	e099      	b.n	800191e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80017ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 808e 	beq.w	8001912 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f003 fa2e 	bl	8004c62 <USB_ReadDevOutEPInterrupt>
 8001806:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00c      	beq.n	800182c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	015a      	lsls	r2, r3, #5
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	4413      	add	r3, r2
 800181a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800181e:	461a      	mov	r2, r3
 8001820:	2301      	movs	r3, #1
 8001822:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001824:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fea2 	bl	8002570 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00c      	beq.n	8001850 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	015a      	lsls	r2, r3, #5
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	4413      	add	r3, r2
 800183e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001842:	461a      	mov	r2, r3
 8001844:	2308      	movs	r3, #8
 8001846:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 ff78 	bl	8002740 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	2b00      	cmp	r3, #0
 8001858:	d008      	beq.n	800186c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	015a      	lsls	r2, r3, #5
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	4413      	add	r3, r2
 8001862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001866:	461a      	mov	r2, r3
 8001868:	2310      	movs	r3, #16
 800186a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d030      	beq.n	80018d8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187e:	2b80      	cmp	r3, #128	; 0x80
 8001880:	d109      	bne.n	8001896 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001890:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001894:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001898:	4613      	mov	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4413      	add	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	3304      	adds	r3, #4
 80018aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	78db      	ldrb	r3, [r3, #3]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d108      	bne.n	80018c6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	2200      	movs	r2, #0
 80018b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	4619      	mov	r1, r3
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f005 fdaf 	bl	8007424 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	015a      	lsls	r2, r3, #5
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	4413      	add	r3, r2
 80018ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018d2:	461a      	mov	r2, r3
 80018d4:	2302      	movs	r3, #2
 80018d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	f003 0320 	and.w	r3, r3, #32
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d008      	beq.n	80018f4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	015a      	lsls	r2, r3, #5
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	4413      	add	r3, r2
 80018ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ee:	461a      	mov	r2, r3
 80018f0:	2320      	movs	r3, #32
 80018f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d009      	beq.n	8001912 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	015a      	lsls	r2, r3, #5
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	4413      	add	r3, r2
 8001906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800190a:	461a      	mov	r2, r3
 800190c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001910:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	3301      	adds	r3, #1
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191a:	085b      	lsrs	r3, r3, #1
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800191e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001920:	2b00      	cmp	r3, #0
 8001922:	f47f af62 	bne.w	80017ea <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f003 f952 	bl	8004bd4 <USB_ReadInterrupts>
 8001930:	4603      	mov	r3, r0
 8001932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001936:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800193a:	f040 80db 	bne.w	8001af4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f003 f973 	bl	8004c2e <USB_ReadDevAllInEpInterrupt>
 8001948:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800194e:	e0cd      	b.n	8001aec <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 80c2 	beq.w	8001ae0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	4611      	mov	r1, r2
 8001966:	4618      	mov	r0, r3
 8001968:	f003 f999 	bl	8004c9e <USB_ReadDevInEPInterrupt>
 800196c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d057      	beq.n	8001a28 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	2201      	movs	r2, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800198c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	43db      	mvns	r3, r3
 8001992:	69f9      	ldr	r1, [r7, #28]
 8001994:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001998:	4013      	ands	r3, r2
 800199a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	015a      	lsls	r2, r3, #5
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	4413      	add	r3, r2
 80019a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019a8:	461a      	mov	r2, r3
 80019aa:	2301      	movs	r3, #1
 80019ac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	799b      	ldrb	r3, [r3, #6]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d132      	bne.n	8001a1c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ba:	4613      	mov	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	3320      	adds	r3, #32
 80019c6:	6819      	ldr	r1, [r3, #0]
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019cc:	4613      	mov	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4413      	add	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4403      	add	r3, r0
 80019d6:	331c      	adds	r3, #28
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4419      	add	r1, r3
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e0:	4613      	mov	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4413      	add	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4403      	add	r3, r0
 80019ea:	3320      	adds	r3, #32
 80019ec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d113      	bne.n	8001a1c <HAL_PCD_IRQHandler+0x3a2>
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f8:	4613      	mov	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	3324      	adds	r3, #36	; 0x24
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d108      	bne.n	8001a1c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001a14:	461a      	mov	r2, r3
 8001a16:	2101      	movs	r1, #1
 8001a18:	f003 f9a0 	bl	8004d5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	4619      	mov	r1, r3
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f005 fc79 	bl	800731a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d008      	beq.n	8001a44 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	015a      	lsls	r2, r3, #5
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	4413      	add	r3, r2
 8001a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a3e:	461a      	mov	r2, r3
 8001a40:	2308      	movs	r3, #8
 8001a42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d008      	beq.n	8001a60 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	015a      	lsls	r2, r3, #5
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2310      	movs	r3, #16
 8001a5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d008      	beq.n	8001a7c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	015a      	lsls	r2, r3, #5
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	4413      	add	r3, r2
 8001a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a76:	461a      	mov	r2, r3
 8001a78:	2340      	movs	r3, #64	; 0x40
 8001a7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d023      	beq.n	8001ace <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001a86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a88:	6a38      	ldr	r0, [r7, #32]
 8001a8a:	f002 f98d 	bl	8003da8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a90:	4613      	mov	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	3310      	adds	r3, #16
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	78db      	ldrb	r3, [r3, #3]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d108      	bne.n	8001abc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2200      	movs	r2, #0
 8001aae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f005 fcc6 	bl	8007448 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	015a      	lsls	r2, r3, #5
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ac8:	461a      	mov	r2, r3
 8001aca:	2302      	movs	r3, #2
 8001acc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ad8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 fcbb 	bl	8002456 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae8:	085b      	lsrs	r3, r3, #1
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f47f af2e 	bne.w	8001950 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f003 f86b 	bl	8004bd4 <USB_ReadInterrupts>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b08:	d122      	bne.n	8001b50 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d108      	bne.n	8001b3a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b30:	2100      	movs	r1, #0
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 fea2 	bl	800287c <HAL_PCDEx_LPM_Callback>
 8001b38:	e002      	b.n	8001b40 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f005 fc64 	bl	8007408 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f003 f83d 	bl	8004bd4 <USB_ReadInterrupts>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b64:	d112      	bne.n	8001b8c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d102      	bne.n	8001b7c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f005 fc20 	bl	80073bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	695a      	ldr	r2, [r3, #20]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b8a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f003 f81f 	bl	8004bd4 <USB_ReadInterrupts>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba0:	f040 80b7 	bne.w	8001d12 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2110      	movs	r1, #16
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f002 f8f2 	bl	8003da8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc8:	e046      	b.n	8001c58 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bcc:	015a      	lsls	r2, r3, #5
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001bdc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be0:	015a      	lsls	r2, r3, #5
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	4413      	add	r3, r2
 8001be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bee:	0151      	lsls	r1, r2, #5
 8001bf0:	69fa      	ldr	r2, [r7, #28]
 8001bf2:	440a      	add	r2, r1
 8001bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001bf8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bfc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c10:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c14:	015a      	lsls	r2, r3, #5
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c22:	0151      	lsls	r1, r2, #5
 8001c24:	69fa      	ldr	r2, [r7, #28]
 8001c26:	440a      	add	r2, r1
 8001c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c34:	015a      	lsls	r2, r3, #5
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c42:	0151      	lsls	r1, r2, #5
 8001c44:	69fa      	ldr	r2, [r7, #28]
 8001c46:	440a      	add	r2, r1
 8001c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c50:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c54:	3301      	adds	r3, #1
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	791b      	ldrb	r3, [r3, #4]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d3b2      	bcc.n	8001bca <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	69fa      	ldr	r2, [r7, #28]
 8001c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c72:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c76:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	7bdb      	ldrb	r3, [r3, #15]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d016      	beq.n	8001cae <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c90:	f043 030b 	orr.w	r3, r3, #11
 8001c94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ca6:	f043 030b 	orr.w	r3, r3, #11
 8001caa:	6453      	str	r3, [r2, #68]	; 0x44
 8001cac:	e015      	b.n	8001cda <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cc0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001cc4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cd4:	f043 030b 	orr.w	r3, r3, #11
 8001cd8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ce8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001cec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	f003 f82d 	bl	8004d5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	695a      	ldr	r2, [r3, #20]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f002 ff5c 	bl	8004bd4 <USB_ReadInterrupts>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d26:	d123      	bne.n	8001d70 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f002 fff2 	bl	8004d16 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 f8af 	bl	8003e9a <USB_GetDevSpeed>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681c      	ldr	r4, [r3, #0]
 8001d48:	f001 fa08 	bl	800315c <HAL_RCC_GetHCLKFreq>
 8001d4c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d52:	461a      	mov	r2, r3
 8001d54:	4620      	mov	r0, r4
 8001d56:	f001 fdb3 	bl	80038c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f005 fb05 	bl	800736a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f002 ff2d 	bl	8004bd4 <USB_ReadInterrupts>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d10a      	bne.n	8001d9a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f005 fae2 	bl	800734e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	695a      	ldr	r2, [r3, #20]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f002 0208 	and.w	r2, r2, #8
 8001d98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f002 ff18 	bl	8004bd4 <USB_ReadInterrupts>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001daa:	2b80      	cmp	r3, #128	; 0x80
 8001dac:	d123      	bne.n	8001df6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dba:	2301      	movs	r3, #1
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dbe:	e014      	b.n	8001dea <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d105      	bne.n	8001de4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fb08 	bl	80023f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	3301      	adds	r3, #1
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	791b      	ldrb	r3, [r3, #4]
 8001dee:	461a      	mov	r2, r3
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d3e4      	bcc.n	8001dc0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f002 feea 	bl	8004bd4 <USB_ReadInterrupts>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e0a:	d13c      	bne.n	8001e86 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e10:	e02b      	b.n	8001e6a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	015a      	lsls	r2, r3, #5
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	3318      	adds	r3, #24
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d115      	bne.n	8001e64 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001e38:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	da12      	bge.n	8001e64 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e42:	4613      	mov	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4413      	add	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	3317      	adds	r3, #23
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 fac8 	bl	80023f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	3301      	adds	r3, #1
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	791b      	ldrb	r3, [r3, #4]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d3cd      	bcc.n	8001e12 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001e84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f002 fea2 	bl	8004bd4 <USB_ReadInterrupts>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e9a:	d156      	bne.n	8001f4a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea0:	e045      	b.n	8001f2e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	015a      	lsls	r2, r3, #5
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4413      	add	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d12e      	bne.n	8001f28 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001eca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	da2b      	bge.n	8001f28 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001edc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d121      	bne.n	8001f28 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10a      	bne.n	8001f28 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f24:	6053      	str	r3, [r2, #4]
            break;
 8001f26:	e008      	b.n	8001f3a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	791b      	ldrb	r3, [r3, #4]
 8001f32:	461a      	mov	r2, r3
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d3b3      	bcc.n	8001ea2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001f48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 fe40 	bl	8004bd4 <USB_ReadInterrupts>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5e:	d10a      	bne.n	8001f76 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f005 fa83 	bl	800746c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695a      	ldr	r2, [r3, #20]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001f74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f002 fe2a 	bl	8004bd4 <USB_ReadInterrupts>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d115      	bne.n	8001fb6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f005 fa73 	bl	8007488 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6859      	ldr	r1, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	e000      	b.n	8001fb6 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001fb4:	bf00      	nop
    }
  }
}
 8001fb6:	3734      	adds	r7, #52	; 0x34
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd90      	pop	{r4, r7, pc}

08001fbc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_PCD_SetAddress+0x1a>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e012      	b.n	8001ffc <HAL_PCD_SetAddress+0x40>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	78fa      	ldrb	r2, [r7, #3]
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f002 fd89 	bl	8004b04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	4608      	mov	r0, r1
 800200e:	4611      	mov	r1, r2
 8002010:	461a      	mov	r2, r3
 8002012:	4603      	mov	r3, r0
 8002014:	70fb      	strb	r3, [r7, #3]
 8002016:	460b      	mov	r3, r1
 8002018:	803b      	strh	r3, [r7, #0]
 800201a:	4613      	mov	r3, r2
 800201c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da0f      	bge.n	800204a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	f003 020f 	and.w	r2, r3, #15
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	3310      	adds	r3, #16
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	3304      	adds	r3, #4
 8002040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2201      	movs	r2, #1
 8002046:	705a      	strb	r2, [r3, #1]
 8002048:	e00f      	b.n	800206a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	f003 020f 	and.w	r2, r3, #15
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	3304      	adds	r3, #4
 8002062:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	b2da      	uxtb	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002076:	883a      	ldrh	r2, [r7, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	78ba      	ldrb	r2, [r7, #2]
 8002080:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	785b      	ldrb	r3, [r3, #1]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d004      	beq.n	8002094 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002094:	78bb      	ldrb	r3, [r7, #2]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d102      	bne.n	80020a0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_PCD_EP_Open+0xaa>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e00e      	b.n	80020cc <HAL_PCD_EP_Open+0xc8>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68f9      	ldr	r1, [r7, #12]
 80020bc:	4618      	mov	r0, r3
 80020be:	f001 ff11 	bl	8003ee4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80020ca:	7afb      	ldrb	r3, [r7, #11]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	da0f      	bge.n	8002108 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	f003 020f 	and.w	r2, r3, #15
 80020ee:	4613      	mov	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	3310      	adds	r3, #16
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	4413      	add	r3, r2
 80020fc:	3304      	adds	r3, #4
 80020fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2201      	movs	r2, #1
 8002104:	705a      	strb	r2, [r3, #1]
 8002106:	e00f      	b.n	8002128 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	f003 020f 	and.w	r2, r3, #15
 800210e:	4613      	mov	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	3304      	adds	r3, #4
 8002120:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	b2da      	uxtb	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_PCD_EP_Close+0x6e>
 800213e:	2302      	movs	r3, #2
 8002140:	e00e      	b.n	8002160 <HAL_PCD_EP_Close+0x8c>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68f9      	ldr	r1, [r7, #12]
 8002150:	4618      	mov	r0, r3
 8002152:	f001 ff4f 	bl	8003ff4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	460b      	mov	r3, r1
 8002176:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002178:	7afb      	ldrb	r3, [r7, #11]
 800217a:	f003 020f 	and.w	r2, r3, #15
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4413      	add	r3, r2
 800218e:	3304      	adds	r3, #4
 8002190:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	2200      	movs	r2, #0
 80021a2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2200      	movs	r2, #0
 80021a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021aa:	7afb      	ldrb	r3, [r7, #11]
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	799b      	ldrb	r3, [r3, #6]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d102      	bne.n	80021c4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	799b      	ldrb	r3, [r3, #6]
 80021cc:	461a      	mov	r2, r3
 80021ce:	6979      	ldr	r1, [r7, #20]
 80021d0:	f001 ffec 	bl	80041ac <USB_EPStartXfer>

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	460b      	mov	r3, r1
 80021e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	f003 020f 	and.w	r2, r3, #15
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002200:	681b      	ldr	r3, [r3, #0]
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b086      	sub	sp, #24
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	603b      	str	r3, [r7, #0]
 800221a:	460b      	mov	r3, r1
 800221c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800221e:	7afb      	ldrb	r3, [r7, #11]
 8002220:	f003 020f 	and.w	r2, r3, #15
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	3310      	adds	r3, #16
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4413      	add	r3, r2
 8002232:	3304      	adds	r3, #4
 8002234:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2200      	movs	r2, #0
 8002246:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2201      	movs	r2, #1
 800224c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800224e:	7afb      	ldrb	r3, [r7, #11]
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	b2da      	uxtb	r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	799b      	ldrb	r3, [r3, #6]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d102      	bne.n	8002268 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	799b      	ldrb	r3, [r3, #6]
 8002270:	461a      	mov	r2, r3
 8002272:	6979      	ldr	r1, [r7, #20]
 8002274:	f001 ff9a 	bl	80041ac <USB_EPStartXfer>

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	460b      	mov	r3, r1
 800228c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800228e:	78fb      	ldrb	r3, [r7, #3]
 8002290:	f003 030f 	and.w	r3, r3, #15
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	7912      	ldrb	r2, [r2, #4]
 8002298:	4293      	cmp	r3, r2
 800229a:	d901      	bls.n	80022a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e04f      	b.n	8002340 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	da0f      	bge.n	80022c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	f003 020f 	and.w	r2, r3, #15
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	3310      	adds	r3, #16
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	4413      	add	r3, r2
 80022bc:	3304      	adds	r3, #4
 80022be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2201      	movs	r2, #1
 80022c4:	705a      	strb	r2, [r3, #1]
 80022c6:	e00d      	b.n	80022e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	4413      	add	r3, r2
 80022da:	3304      	adds	r3, #4
 80022dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2201      	movs	r2, #1
 80022e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_PCD_EP_SetStall+0x82>
 8002300:	2302      	movs	r3, #2
 8002302:	e01d      	b.n	8002340 <HAL_PCD_EP_SetStall+0xbe>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68f9      	ldr	r1, [r7, #12]
 8002312:	4618      	mov	r0, r3
 8002314:	f002 fb22 	bl	800495c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	7999      	ldrb	r1, [r3, #6]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002330:	461a      	mov	r2, r3
 8002332:	f002 fd13 	bl	8004d5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	7912      	ldrb	r2, [r2, #4]
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e042      	b.n	80023ec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002366:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800236a:	2b00      	cmp	r3, #0
 800236c:	da0f      	bge.n	800238e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800236e:	78fb      	ldrb	r3, [r7, #3]
 8002370:	f003 020f 	and.w	r2, r3, #15
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	3310      	adds	r3, #16
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	4413      	add	r3, r2
 8002382:	3304      	adds	r3, #4
 8002384:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	705a      	strb	r2, [r3, #1]
 800238c:	e00f      	b.n	80023ae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	f003 020f 	and.w	r2, r3, #15
 8002394:	4613      	mov	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4413      	add	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	4413      	add	r3, r2
 80023a4:	3304      	adds	r3, #4
 80023a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_PCD_EP_ClrStall+0x86>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e00e      	b.n	80023ec <HAL_PCD_EP_ClrStall+0xa4>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68f9      	ldr	r1, [r7, #12]
 80023dc:	4618      	mov	r0, r3
 80023de:	f002 fb2b 	bl	8004a38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002400:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002404:	2b00      	cmp	r3, #0
 8002406:	da0c      	bge.n	8002422 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	f003 020f 	and.w	r2, r3, #15
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	3310      	adds	r3, #16
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	4413      	add	r3, r2
 800241c:	3304      	adds	r3, #4
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e00c      	b.n	800243c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	f003 020f 	and.w	r2, r3, #15
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	4413      	add	r3, r2
 8002438:	3304      	adds	r3, #4
 800243a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68f9      	ldr	r1, [r7, #12]
 8002442:	4618      	mov	r0, r3
 8002444:	f002 f94a 	bl	80046dc <USB_EPStopXfer>
 8002448:	4603      	mov	r3, r0
 800244a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800244c:	7afb      	ldrb	r3, [r7, #11]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b08a      	sub	sp, #40	; 0x28
 800245a:	af02      	add	r7, sp, #8
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	4613      	mov	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	3310      	adds	r3, #16
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	3304      	adds	r3, #4
 800247c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	429a      	cmp	r2, r3
 8002488:	d901      	bls.n	800248e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e06b      	b.n	8002566 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d902      	bls.n	80024aa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3303      	adds	r3, #3
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024b2:	e02a      	b.n	800250a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	69fa      	ldr	r2, [r7, #28]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d902      	bls.n	80024d0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	3303      	adds	r3, #3
 80024d4:	089b      	lsrs	r3, r3, #2
 80024d6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	68d9      	ldr	r1, [r3, #12]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	4603      	mov	r3, r0
 80024ec:	6978      	ldr	r0, [r7, #20]
 80024ee:	f002 f99f 	bl	8004830 <USB_WritePacket>

    ep->xfer_buff  += len;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	441a      	add	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	441a      	add	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4413      	add	r3, r2
 8002512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	429a      	cmp	r2, r3
 800251e:	d809      	bhi.n	8002534 <PCD_WriteEmptyTxFifo+0xde>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002528:	429a      	cmp	r2, r3
 800252a:	d203      	bcs.n	8002534 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1bf      	bne.n	80024b4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	429a      	cmp	r2, r3
 800253e:	d811      	bhi.n	8002564 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	2201      	movs	r2, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	43db      	mvns	r3, r3
 800255a:	6939      	ldr	r1, [r7, #16]
 800255c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002560:	4013      	ands	r3, r2
 8002562:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3720      	adds	r7, #32
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	333c      	adds	r3, #60	; 0x3c
 8002588:	3304      	adds	r3, #4
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	4413      	add	r3, r2
 8002596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	799b      	ldrb	r3, [r3, #6]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d17b      	bne.n	800269e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d015      	beq.n	80025dc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	4a61      	ldr	r2, [pc, #388]	; (8002738 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	f240 80b9 	bls.w	800272c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80b3 	beq.w	800272c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d2:	461a      	mov	r2, r3
 80025d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025d8:	6093      	str	r3, [r2, #8]
 80025da:	e0a7      	b.n	800272c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f2:	461a      	mov	r2, r3
 80025f4:	2320      	movs	r3, #32
 80025f6:	6093      	str	r3, [r2, #8]
 80025f8:	e098      	b.n	800272c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002600:	2b00      	cmp	r3, #0
 8002602:	f040 8093 	bne.w	800272c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	4a4b      	ldr	r2, [pc, #300]	; (8002738 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d90f      	bls.n	800262e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	4413      	add	r3, r2
 8002620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002624:	461a      	mov	r2, r3
 8002626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800262a:	6093      	str	r3, [r2, #8]
 800262c:	e07e      	b.n	800272c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	4613      	mov	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4413      	add	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	4413      	add	r3, r2
 8002640:	3304      	adds	r3, #4
 8002642:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a1a      	ldr	r2, [r3, #32]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	0159      	lsls	r1, r3, #5
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	440b      	add	r3, r1
 8002650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265a:	1ad2      	subs	r2, r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d114      	bne.n	8002690 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002678:	461a      	mov	r2, r3
 800267a:	2101      	movs	r1, #1
 800267c:	f002 fb6e 	bl	8004d5c <USB_EP0_OutStart>
 8002680:	e006      	b.n	8002690 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	441a      	add	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	4619      	mov	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f004 fe24 	bl	80072e4 <HAL_PCD_DataOutStageCallback>
 800269c:	e046      	b.n	800272c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	4a26      	ldr	r2, [pc, #152]	; (800273c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d124      	bne.n	80026f0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026bc:	461a      	mov	r2, r3
 80026be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026c2:	6093      	str	r3, [r2, #8]
 80026c4:	e032      	b.n	800272c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f003 0320 	and.w	r3, r3, #32
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026dc:	461a      	mov	r2, r3
 80026de:	2320      	movs	r3, #32
 80026e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	4619      	mov	r1, r3
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f004 fdfb 	bl	80072e4 <HAL_PCD_DataOutStageCallback>
 80026ee:	e01d      	b.n	800272c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d114      	bne.n	8002720 <PCD_EP_OutXfrComplete_int+0x1b0>
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	440b      	add	r3, r1
 8002704:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d108      	bne.n	8002720 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002718:	461a      	mov	r2, r3
 800271a:	2100      	movs	r1, #0
 800271c:	f002 fb1e 	bl	8004d5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	4619      	mov	r1, r3
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f004 fddc 	bl	80072e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3720      	adds	r7, #32
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	4f54300a 	.word	0x4f54300a
 800273c:	4f54310a 	.word	0x4f54310a

08002740 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	333c      	adds	r3, #60	; 0x3c
 8002758:	3304      	adds	r3, #4
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4a15      	ldr	r2, [pc, #84]	; (80027c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d90e      	bls.n	8002794 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800277c:	2b00      	cmp	r3, #0
 800277e:	d009      	beq.n	8002794 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4413      	add	r3, r2
 8002788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800278c:	461a      	mov	r2, r3
 800278e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002792:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f004 fd93 	bl	80072c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d90c      	bls.n	80027bc <PCD_EP_OutSetupPacket_int+0x7c>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	799b      	ldrb	r3, [r3, #6]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d108      	bne.n	80027bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80027b4:	461a      	mov	r2, r3
 80027b6:	2101      	movs	r1, #1
 80027b8:	f002 fad0 	bl	8004d5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	4f54300a 	.word	0x4f54300a

080027cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	70fb      	strb	r3, [r7, #3]
 80027d8:	4613      	mov	r3, r2
 80027da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d107      	bne.n	80027fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80027ea:	883b      	ldrh	r3, [r7, #0]
 80027ec:	0419      	lsls	r1, r3, #16
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28
 80027f8:	e028      	b.n	800284c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	0c1b      	lsrs	r3, r3, #16
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	4413      	add	r3, r2
 8002806:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002808:	2300      	movs	r3, #0
 800280a:	73fb      	strb	r3, [r7, #15]
 800280c:	e00d      	b.n	800282a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	3340      	adds	r3, #64	; 0x40
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	0c1b      	lsrs	r3, r3, #16
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	4413      	add	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	3301      	adds	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
 800282a:	7bfa      	ldrb	r2, [r7, #15]
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	3b01      	subs	r3, #1
 8002830:	429a      	cmp	r2, r3
 8002832:	d3ec      	bcc.n	800280e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002834:	883b      	ldrh	r3, [r7, #0]
 8002836:	0418      	lsls	r0, r3, #16
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6819      	ldr	r1, [r3, #0]
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	3b01      	subs	r3, #1
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	4302      	orrs	r2, r0
 8002844:	3340      	adds	r3, #64	; 0x40
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	460b      	mov	r3, r1
 8002864:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	887a      	ldrh	r2, [r7, #2]
 800286c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e267      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d075      	beq.n	800299e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028b2:	4b88      	ldr	r3, [pc, #544]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d00c      	beq.n	80028d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028be:	4b85      	ldr	r3, [pc, #532]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d112      	bne.n	80028f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ca:	4b82      	ldr	r3, [pc, #520]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028d6:	d10b      	bne.n	80028f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d8:	4b7e      	ldr	r3, [pc, #504]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d05b      	beq.n	800299c <HAL_RCC_OscConfig+0x108>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d157      	bne.n	800299c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e242      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f8:	d106      	bne.n	8002908 <HAL_RCC_OscConfig+0x74>
 80028fa:	4b76      	ldr	r3, [pc, #472]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a75      	ldr	r2, [pc, #468]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	e01d      	b.n	8002944 <HAL_RCC_OscConfig+0xb0>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0x98>
 8002912:	4b70      	ldr	r3, [pc, #448]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a6f      	ldr	r2, [pc, #444]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b6d      	ldr	r3, [pc, #436]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a6c      	ldr	r2, [pc, #432]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e00b      	b.n	8002944 <HAL_RCC_OscConfig+0xb0>
 800292c:	4b69      	ldr	r3, [pc, #420]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a68      	ldr	r2, [pc, #416]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4b66      	ldr	r3, [pc, #408]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a65      	ldr	r2, [pc, #404]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 800293e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d013      	beq.n	8002974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7fe fa42 	bl	8000dd4 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002954:	f7fe fa3e 	bl	8000dd4 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	; 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e207      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	4b5b      	ldr	r3, [pc, #364]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0xc0>
 8002972:	e014      	b.n	800299e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7fe fa2e 	bl	8000dd4 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800297c:	f7fe fa2a 	bl	8000dd4 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e1f3      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298e:	4b51      	ldr	r3, [pc, #324]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0xe8>
 800299a:	e000      	b.n	800299e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d063      	beq.n	8002a72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029aa:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00b      	beq.n	80029ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029b6:	4b47      	ldr	r3, [pc, #284]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d11c      	bne.n	80029fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c2:	4b44      	ldr	r3, [pc, #272]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d116      	bne.n	80029fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ce:	4b41      	ldr	r3, [pc, #260]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <HAL_RCC_OscConfig+0x152>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d001      	beq.n	80029e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e1c7      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e6:	4b3b      	ldr	r3, [pc, #236]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4937      	ldr	r1, [pc, #220]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fa:	e03a      	b.n	8002a72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d020      	beq.n	8002a46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a04:	4b34      	ldr	r3, [pc, #208]	; (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0a:	f7fe f9e3 	bl	8000dd4 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a12:	f7fe f9df 	bl	8000dd4 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e1a8      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a24:	4b2b      	ldr	r3, [pc, #172]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a30:	4b28      	ldr	r3, [pc, #160]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4925      	ldr	r1, [pc, #148]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	600b      	str	r3, [r1, #0]
 8002a44:	e015      	b.n	8002a72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a46:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7fe f9c2 	bl	8000dd4 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a54:	f7fe f9be 	bl	8000dd4 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e187      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a66:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d036      	beq.n	8002aec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d016      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a86:	4b15      	ldr	r3, [pc, #84]	; (8002adc <HAL_RCC_OscConfig+0x248>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7fe f9a2 	bl	8000dd4 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a94:	f7fe f99e 	bl	8000dd4 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e167      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0x200>
 8002ab2:	e01b      	b.n	8002aec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_RCC_OscConfig+0x248>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aba:	f7fe f98b 	bl	8000dd4 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac0:	e00e      	b.n	8002ae0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac2:	f7fe f987 	bl	8000dd4 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d907      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e150      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	42470000 	.word	0x42470000
 8002adc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae0:	4b88      	ldr	r3, [pc, #544]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1ea      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 8097 	beq.w	8002c28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afa:	2300      	movs	r3, #0
 8002afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002afe:	4b81      	ldr	r3, [pc, #516]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10f      	bne.n	8002b2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	4b7d      	ldr	r3, [pc, #500]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	4a7c      	ldr	r2, [pc, #496]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b18:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1a:	4b7a      	ldr	r3, [pc, #488]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b26:	2301      	movs	r3, #1
 8002b28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2a:	4b77      	ldr	r3, [pc, #476]	; (8002d08 <HAL_RCC_OscConfig+0x474>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d118      	bne.n	8002b68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b36:	4b74      	ldr	r3, [pc, #464]	; (8002d08 <HAL_RCC_OscConfig+0x474>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a73      	ldr	r2, [pc, #460]	; (8002d08 <HAL_RCC_OscConfig+0x474>)
 8002b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b42:	f7fe f947 	bl	8000dd4 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4a:	f7fe f943 	bl	8000dd4 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e10c      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	4b6a      	ldr	r3, [pc, #424]	; (8002d08 <HAL_RCC_OscConfig+0x474>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d106      	bne.n	8002b7e <HAL_RCC_OscConfig+0x2ea>
 8002b70:	4b64      	ldr	r3, [pc, #400]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b74:	4a63      	ldr	r2, [pc, #396]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7c:	e01c      	b.n	8002bb8 <HAL_RCC_OscConfig+0x324>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b05      	cmp	r3, #5
 8002b84:	d10c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x30c>
 8002b86:	4b5f      	ldr	r3, [pc, #380]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	4a5e      	ldr	r2, [pc, #376]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	f043 0304 	orr.w	r3, r3, #4
 8002b90:	6713      	str	r3, [r2, #112]	; 0x70
 8002b92:	4b5c      	ldr	r3, [pc, #368]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	4a5b      	ldr	r2, [pc, #364]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9e:	e00b      	b.n	8002bb8 <HAL_RCC_OscConfig+0x324>
 8002ba0:	4b58      	ldr	r3, [pc, #352]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	4a57      	ldr	r2, [pc, #348]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	6713      	str	r3, [r2, #112]	; 0x70
 8002bac:	4b55      	ldr	r3, [pc, #340]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb0:	4a54      	ldr	r2, [pc, #336]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002bb2:	f023 0304 	bic.w	r3, r3, #4
 8002bb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d015      	beq.n	8002bec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc0:	f7fe f908 	bl	8000dd4 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7fe f904 	bl	8000dd4 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0cb      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bde:	4b49      	ldr	r3, [pc, #292]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0ee      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x334>
 8002bea:	e014      	b.n	8002c16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bec:	f7fe f8f2 	bl	8000dd4 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf2:	e00a      	b.n	8002c0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf4:	f7fe f8ee 	bl	8000dd4 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e0b5      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0a:	4b3e      	ldr	r3, [pc, #248]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1ee      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c16:	7dfb      	ldrb	r3, [r7, #23]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d105      	bne.n	8002c28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c1c:	4b39      	ldr	r3, [pc, #228]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	4a38      	ldr	r2, [pc, #224]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80a1 	beq.w	8002d74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c32:	4b34      	ldr	r3, [pc, #208]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d05c      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d141      	bne.n	8002cca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c46:	4b31      	ldr	r3, [pc, #196]	; (8002d0c <HAL_RCC_OscConfig+0x478>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fe f8c2 	bl	8000dd4 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c54:	f7fe f8be 	bl	8000dd4 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e087      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c66:	4b27      	ldr	r3, [pc, #156]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69da      	ldr	r2, [r3, #28]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	019b      	lsls	r3, r3, #6
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	085b      	lsrs	r3, r3, #1
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	041b      	lsls	r3, r3, #16
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	061b      	lsls	r3, r3, #24
 8002c96:	491b      	ldr	r1, [pc, #108]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <HAL_RCC_OscConfig+0x478>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca2:	f7fe f897 	bl	8000dd4 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002caa:	f7fe f893 	bl	8000dd4 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e05c      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cbc:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x416>
 8002cc8:	e054      	b.n	8002d74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cca:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <HAL_RCC_OscConfig+0x478>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7fe f880 	bl	8000dd4 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd8:	f7fe f87c 	bl	8000dd4 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e045      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x444>
 8002cf6:	e03d      	b.n	8002d74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d107      	bne.n	8002d10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e038      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40007000 	.word	0x40007000
 8002d0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_RCC_OscConfig+0x4ec>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d028      	beq.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d121      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d11a      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d40:	4013      	ands	r3, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d111      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	085b      	lsrs	r3, r3, #1
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800

08002d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0cc      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d98:	4b68      	ldr	r3, [pc, #416]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d90c      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b65      	ldr	r3, [pc, #404]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	4b63      	ldr	r3, [pc, #396]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0b8      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d020      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd8:	4b59      	ldr	r3, [pc, #356]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4a58      	ldr	r2, [pc, #352]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002de2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df0:	4b53      	ldr	r3, [pc, #332]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	4a52      	ldr	r2, [pc, #328]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dfc:	4b50      	ldr	r3, [pc, #320]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	494d      	ldr	r1, [pc, #308]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d044      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d107      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e22:	4b47      	ldr	r3, [pc, #284]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d119      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e07f      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d003      	beq.n	8002e42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e42:	4b3f      	ldr	r3, [pc, #252]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e06f      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e52:	4b3b      	ldr	r3, [pc, #236]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e067      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e62:	4b37      	ldr	r3, [pc, #220]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f023 0203 	bic.w	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4934      	ldr	r1, [pc, #208]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e74:	f7fd ffae 	bl	8000dd4 <HAL_GetTick>
 8002e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	e00a      	b.n	8002e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e7c:	f7fd ffaa 	bl	8000dd4 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e04f      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e92:	4b2b      	ldr	r3, [pc, #172]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 020c 	and.w	r2, r3, #12
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d1eb      	bne.n	8002e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea4:	4b25      	ldr	r3, [pc, #148]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d20c      	bcs.n	8002ecc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb2:	4b22      	ldr	r3, [pc, #136]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b20      	ldr	r3, [pc, #128]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e032      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed8:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4916      	ldr	r1, [pc, #88]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ef6:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	490e      	ldr	r1, [pc, #56]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f0a:	f000 f821 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	490a      	ldr	r1, [pc, #40]	; (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002f1c:	5ccb      	ldrb	r3, [r1, r3]
 8002f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f22:	4a09      	ldr	r2, [pc, #36]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fd ff0e 	bl	8000d4c <HAL_InitTick>

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023c00 	.word	0x40023c00
 8002f40:	40023800 	.word	0x40023800
 8002f44:	0800825c 	.word	0x0800825c
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	20000004 	.word	0x20000004

08002f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f54:	b094      	sub	sp, #80	; 0x50
 8002f56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f60:	2300      	movs	r3, #0
 8002f62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f68:	4b79      	ldr	r3, [pc, #484]	; (8003150 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 030c 	and.w	r3, r3, #12
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d00d      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x40>
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	f200 80e1 	bhi.w	800313c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_RCC_GetSysClockFreq+0x34>
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d003      	beq.n	8002f8a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f82:	e0db      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f84:	4b73      	ldr	r3, [pc, #460]	; (8003154 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f88:	e0db      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f8a:	4b73      	ldr	r3, [pc, #460]	; (8003158 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f8e:	e0d8      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f90:	4b6f      	ldr	r3, [pc, #444]	; (8003150 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f9a:	4b6d      	ldr	r3, [pc, #436]	; (8003150 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d063      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa6:	4b6a      	ldr	r3, [pc, #424]	; (8003150 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	099b      	lsrs	r3, r3, #6
 8002fac:	2200      	movs	r2, #0
 8002fae:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8002fba:	2300      	movs	r3, #0
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8002fbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fc2:	4622      	mov	r2, r4
 8002fc4:	462b      	mov	r3, r5
 8002fc6:	f04f 0000 	mov.w	r0, #0
 8002fca:	f04f 0100 	mov.w	r1, #0
 8002fce:	0159      	lsls	r1, r3, #5
 8002fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd4:	0150      	lsls	r0, r2, #5
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4621      	mov	r1, r4
 8002fdc:	1a51      	subs	r1, r2, r1
 8002fde:	6139      	str	r1, [r7, #16]
 8002fe0:	4629      	mov	r1, r5
 8002fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ff4:	4659      	mov	r1, fp
 8002ff6:	018b      	lsls	r3, r1, #6
 8002ff8:	4651      	mov	r1, sl
 8002ffa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ffe:	4651      	mov	r1, sl
 8003000:	018a      	lsls	r2, r1, #6
 8003002:	4651      	mov	r1, sl
 8003004:	ebb2 0801 	subs.w	r8, r2, r1
 8003008:	4659      	mov	r1, fp
 800300a:	eb63 0901 	sbc.w	r9, r3, r1
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800301a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800301e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003022:	4690      	mov	r8, r2
 8003024:	4699      	mov	r9, r3
 8003026:	4623      	mov	r3, r4
 8003028:	eb18 0303 	adds.w	r3, r8, r3
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	462b      	mov	r3, r5
 8003030:	eb49 0303 	adc.w	r3, r9, r3
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003042:	4629      	mov	r1, r5
 8003044:	024b      	lsls	r3, r1, #9
 8003046:	4621      	mov	r1, r4
 8003048:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800304c:	4621      	mov	r1, r4
 800304e:	024a      	lsls	r2, r1, #9
 8003050:	4610      	mov	r0, r2
 8003052:	4619      	mov	r1, r3
 8003054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003056:	2200      	movs	r2, #0
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
 800305a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800305c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003060:	f7fd f90e 	bl	8000280 <__aeabi_uldivmod>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4613      	mov	r3, r2
 800306a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800306c:	e058      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800306e:	4b38      	ldr	r3, [pc, #224]	; (8003150 <HAL_RCC_GetSysClockFreq+0x200>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	099b      	lsrs	r3, r3, #6
 8003074:	2200      	movs	r2, #0
 8003076:	4618      	mov	r0, r3
 8003078:	4611      	mov	r1, r2
 800307a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800307e:	623b      	str	r3, [r7, #32]
 8003080:	2300      	movs	r3, #0
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
 8003084:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003088:	4642      	mov	r2, r8
 800308a:	464b      	mov	r3, r9
 800308c:	f04f 0000 	mov.w	r0, #0
 8003090:	f04f 0100 	mov.w	r1, #0
 8003094:	0159      	lsls	r1, r3, #5
 8003096:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800309a:	0150      	lsls	r0, r2, #5
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4641      	mov	r1, r8
 80030a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80030a6:	4649      	mov	r1, r9
 80030a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030c0:	ebb2 040a 	subs.w	r4, r2, sl
 80030c4:	eb63 050b 	sbc.w	r5, r3, fp
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	00eb      	lsls	r3, r5, #3
 80030d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030d6:	00e2      	lsls	r2, r4, #3
 80030d8:	4614      	mov	r4, r2
 80030da:	461d      	mov	r5, r3
 80030dc:	4643      	mov	r3, r8
 80030de:	18e3      	adds	r3, r4, r3
 80030e0:	603b      	str	r3, [r7, #0]
 80030e2:	464b      	mov	r3, r9
 80030e4:	eb45 0303 	adc.w	r3, r5, r3
 80030e8:	607b      	str	r3, [r7, #4]
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030f6:	4629      	mov	r1, r5
 80030f8:	028b      	lsls	r3, r1, #10
 80030fa:	4621      	mov	r1, r4
 80030fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003100:	4621      	mov	r1, r4
 8003102:	028a      	lsls	r2, r1, #10
 8003104:	4610      	mov	r0, r2
 8003106:	4619      	mov	r1, r3
 8003108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800310a:	2200      	movs	r2, #0
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	61fa      	str	r2, [r7, #28]
 8003110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003114:	f7fd f8b4 	bl	8000280 <__aeabi_uldivmod>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4613      	mov	r3, r2
 800311e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <HAL_RCC_GetSysClockFreq+0x200>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	0c1b      	lsrs	r3, r3, #16
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	3301      	adds	r3, #1
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003130:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
 8003138:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800313a:	e002      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <HAL_RCC_GetSysClockFreq+0x204>)
 800313e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003144:	4618      	mov	r0, r3
 8003146:	3750      	adds	r7, #80	; 0x50
 8003148:	46bd      	mov	sp, r7
 800314a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800314e:	bf00      	nop
 8003150:	40023800 	.word	0x40023800
 8003154:	00f42400 	.word	0x00f42400
 8003158:	007a1200 	.word	0x007a1200

0800315c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003160:	4b03      	ldr	r3, [pc, #12]	; (8003170 <HAL_RCC_GetHCLKFreq+0x14>)
 8003162:	681b      	ldr	r3, [r3, #0]
}
 8003164:	4618      	mov	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000000 	.word	0x20000000

08003174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e041      	b.n	800320a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fd fcee 	bl	8000b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3304      	adds	r3, #4
 80031b0:	4619      	mov	r1, r3
 80031b2:	4610      	mov	r0, r2
 80031b4:	f000 f95e 	bl	8003474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	d001      	beq.n	800322c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e046      	b.n	80032ba <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a23      	ldr	r2, [pc, #140]	; (80032c8 <HAL_TIM_Base_Start+0xb4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d022      	beq.n	8003284 <HAL_TIM_Base_Start+0x70>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003246:	d01d      	beq.n	8003284 <HAL_TIM_Base_Start+0x70>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a1f      	ldr	r2, [pc, #124]	; (80032cc <HAL_TIM_Base_Start+0xb8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d018      	beq.n	8003284 <HAL_TIM_Base_Start+0x70>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1e      	ldr	r2, [pc, #120]	; (80032d0 <HAL_TIM_Base_Start+0xbc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d013      	beq.n	8003284 <HAL_TIM_Base_Start+0x70>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1c      	ldr	r2, [pc, #112]	; (80032d4 <HAL_TIM_Base_Start+0xc0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00e      	beq.n	8003284 <HAL_TIM_Base_Start+0x70>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1b      	ldr	r2, [pc, #108]	; (80032d8 <HAL_TIM_Base_Start+0xc4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d009      	beq.n	8003284 <HAL_TIM_Base_Start+0x70>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a19      	ldr	r2, [pc, #100]	; (80032dc <HAL_TIM_Base_Start+0xc8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d004      	beq.n	8003284 <HAL_TIM_Base_Start+0x70>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a18      	ldr	r2, [pc, #96]	; (80032e0 <HAL_TIM_Base_Start+0xcc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d111      	bne.n	80032a8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b06      	cmp	r3, #6
 8003294:	d010      	beq.n	80032b8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a6:	e007      	b.n	80032b8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40010000 	.word	0x40010000
 80032cc:	40000400 	.word	0x40000400
 80032d0:	40000800 	.word	0x40000800
 80032d4:	40000c00 	.word	0x40000c00
 80032d8:	40010400 	.word	0x40010400
 80032dc:	40014000 	.word	0x40014000
 80032e0:	40001800 	.word	0x40001800

080032e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_TIM_ConfigClockSource+0x1c>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e0b4      	b.n	800346a <HAL_TIM_ConfigClockSource+0x186>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800331e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003326:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003338:	d03e      	beq.n	80033b8 <HAL_TIM_ConfigClockSource+0xd4>
 800333a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800333e:	f200 8087 	bhi.w	8003450 <HAL_TIM_ConfigClockSource+0x16c>
 8003342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003346:	f000 8086 	beq.w	8003456 <HAL_TIM_ConfigClockSource+0x172>
 800334a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334e:	d87f      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x16c>
 8003350:	2b70      	cmp	r3, #112	; 0x70
 8003352:	d01a      	beq.n	800338a <HAL_TIM_ConfigClockSource+0xa6>
 8003354:	2b70      	cmp	r3, #112	; 0x70
 8003356:	d87b      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x16c>
 8003358:	2b60      	cmp	r3, #96	; 0x60
 800335a:	d050      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0x11a>
 800335c:	2b60      	cmp	r3, #96	; 0x60
 800335e:	d877      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x16c>
 8003360:	2b50      	cmp	r3, #80	; 0x50
 8003362:	d03c      	beq.n	80033de <HAL_TIM_ConfigClockSource+0xfa>
 8003364:	2b50      	cmp	r3, #80	; 0x50
 8003366:	d873      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x16c>
 8003368:	2b40      	cmp	r3, #64	; 0x40
 800336a:	d058      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x13a>
 800336c:	2b40      	cmp	r3, #64	; 0x40
 800336e:	d86f      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x16c>
 8003370:	2b30      	cmp	r3, #48	; 0x30
 8003372:	d064      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x15a>
 8003374:	2b30      	cmp	r3, #48	; 0x30
 8003376:	d86b      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x16c>
 8003378:	2b20      	cmp	r3, #32
 800337a:	d060      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x15a>
 800337c:	2b20      	cmp	r3, #32
 800337e:	d867      	bhi.n	8003450 <HAL_TIM_ConfigClockSource+0x16c>
 8003380:	2b00      	cmp	r3, #0
 8003382:	d05c      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x15a>
 8003384:	2b10      	cmp	r3, #16
 8003386:	d05a      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x15a>
 8003388:	e062      	b.n	8003450 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800339a:	f000 f991 	bl	80036c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	609a      	str	r2, [r3, #8]
      break;
 80033b6:	e04f      	b.n	8003458 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033c8:	f000 f97a 	bl	80036c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033da:	609a      	str	r2, [r3, #8]
      break;
 80033dc:	e03c      	b.n	8003458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ea:	461a      	mov	r2, r3
 80033ec:	f000 f8ee 	bl	80035cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2150      	movs	r1, #80	; 0x50
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 f947 	bl	800368a <TIM_ITRx_SetConfig>
      break;
 80033fc:	e02c      	b.n	8003458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800340a:	461a      	mov	r2, r3
 800340c:	f000 f90d 	bl	800362a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2160      	movs	r1, #96	; 0x60
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f937 	bl	800368a <TIM_ITRx_SetConfig>
      break;
 800341c:	e01c      	b.n	8003458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800342a:	461a      	mov	r2, r3
 800342c:	f000 f8ce 	bl	80035cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2140      	movs	r1, #64	; 0x40
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f927 	bl	800368a <TIM_ITRx_SetConfig>
      break;
 800343c:	e00c      	b.n	8003458 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4619      	mov	r1, r3
 8003448:	4610      	mov	r0, r2
 800344a:	f000 f91e 	bl	800368a <TIM_ITRx_SetConfig>
      break;
 800344e:	e003      	b.n	8003458 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
      break;
 8003454:	e000      	b.n	8003458 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003456:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003468:	7bfb      	ldrb	r3, [r7, #15]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a46      	ldr	r2, [pc, #280]	; (80035a0 <TIM_Base_SetConfig+0x12c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d013      	beq.n	80034b4 <TIM_Base_SetConfig+0x40>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003492:	d00f      	beq.n	80034b4 <TIM_Base_SetConfig+0x40>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a43      	ldr	r2, [pc, #268]	; (80035a4 <TIM_Base_SetConfig+0x130>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d00b      	beq.n	80034b4 <TIM_Base_SetConfig+0x40>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a42      	ldr	r2, [pc, #264]	; (80035a8 <TIM_Base_SetConfig+0x134>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d007      	beq.n	80034b4 <TIM_Base_SetConfig+0x40>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a41      	ldr	r2, [pc, #260]	; (80035ac <TIM_Base_SetConfig+0x138>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d003      	beq.n	80034b4 <TIM_Base_SetConfig+0x40>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a40      	ldr	r2, [pc, #256]	; (80035b0 <TIM_Base_SetConfig+0x13c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d108      	bne.n	80034c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a35      	ldr	r2, [pc, #212]	; (80035a0 <TIM_Base_SetConfig+0x12c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d02b      	beq.n	8003526 <TIM_Base_SetConfig+0xb2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d4:	d027      	beq.n	8003526 <TIM_Base_SetConfig+0xb2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a32      	ldr	r2, [pc, #200]	; (80035a4 <TIM_Base_SetConfig+0x130>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d023      	beq.n	8003526 <TIM_Base_SetConfig+0xb2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a31      	ldr	r2, [pc, #196]	; (80035a8 <TIM_Base_SetConfig+0x134>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d01f      	beq.n	8003526 <TIM_Base_SetConfig+0xb2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a30      	ldr	r2, [pc, #192]	; (80035ac <TIM_Base_SetConfig+0x138>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d01b      	beq.n	8003526 <TIM_Base_SetConfig+0xb2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a2f      	ldr	r2, [pc, #188]	; (80035b0 <TIM_Base_SetConfig+0x13c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d017      	beq.n	8003526 <TIM_Base_SetConfig+0xb2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a2e      	ldr	r2, [pc, #184]	; (80035b4 <TIM_Base_SetConfig+0x140>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d013      	beq.n	8003526 <TIM_Base_SetConfig+0xb2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a2d      	ldr	r2, [pc, #180]	; (80035b8 <TIM_Base_SetConfig+0x144>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00f      	beq.n	8003526 <TIM_Base_SetConfig+0xb2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a2c      	ldr	r2, [pc, #176]	; (80035bc <TIM_Base_SetConfig+0x148>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00b      	beq.n	8003526 <TIM_Base_SetConfig+0xb2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a2b      	ldr	r2, [pc, #172]	; (80035c0 <TIM_Base_SetConfig+0x14c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d007      	beq.n	8003526 <TIM_Base_SetConfig+0xb2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a2a      	ldr	r2, [pc, #168]	; (80035c4 <TIM_Base_SetConfig+0x150>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d003      	beq.n	8003526 <TIM_Base_SetConfig+0xb2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a29      	ldr	r2, [pc, #164]	; (80035c8 <TIM_Base_SetConfig+0x154>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d108      	bne.n	8003538 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800352c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a10      	ldr	r2, [pc, #64]	; (80035a0 <TIM_Base_SetConfig+0x12c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d003      	beq.n	800356c <TIM_Base_SetConfig+0xf8>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a12      	ldr	r2, [pc, #72]	; (80035b0 <TIM_Base_SetConfig+0x13c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d103      	bne.n	8003574 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	691a      	ldr	r2, [r3, #16]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b01      	cmp	r3, #1
 8003584:	d105      	bne.n	8003592 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f023 0201 	bic.w	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	611a      	str	r2, [r3, #16]
  }
}
 8003592:	bf00      	nop
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40010000 	.word	0x40010000
 80035a4:	40000400 	.word	0x40000400
 80035a8:	40000800 	.word	0x40000800
 80035ac:	40000c00 	.word	0x40000c00
 80035b0:	40010400 	.word	0x40010400
 80035b4:	40014000 	.word	0x40014000
 80035b8:	40014400 	.word	0x40014400
 80035bc:	40014800 	.word	0x40014800
 80035c0:	40001800 	.word	0x40001800
 80035c4:	40001c00 	.word	0x40001c00
 80035c8:	40002000 	.word	0x40002000

080035cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	f023 0201 	bic.w	r2, r3, #1
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f023 030a 	bic.w	r3, r3, #10
 8003608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4313      	orrs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	621a      	str	r2, [r3, #32]
}
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800362a:	b480      	push	{r7}
 800362c:	b087      	sub	sp, #28
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	f023 0210 	bic.w	r2, r3, #16
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003654:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	031b      	lsls	r3, r3, #12
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003666:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	621a      	str	r2, [r3, #32]
}
 800367e:	bf00      	nop
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f043 0307 	orr.w	r3, r3, #7
 80036ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	609a      	str	r2, [r3, #8]
}
 80036b4:	bf00      	nop
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	021a      	lsls	r2, r3, #8
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	609a      	str	r2, [r3, #8]
}
 80036f4:	bf00      	nop
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003714:	2302      	movs	r3, #2
 8003716:	e05a      	b.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a21      	ldr	r2, [pc, #132]	; (80037dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d022      	beq.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003764:	d01d      	beq.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d018      	beq.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1b      	ldr	r2, [pc, #108]	; (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d013      	beq.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1a      	ldr	r2, [pc, #104]	; (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00e      	beq.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a18      	ldr	r2, [pc, #96]	; (80037ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d009      	beq.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a17      	ldr	r2, [pc, #92]	; (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d004      	beq.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a15      	ldr	r2, [pc, #84]	; (80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d10c      	bne.n	80037bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40010000 	.word	0x40010000
 80037e0:	40000400 	.word	0x40000400
 80037e4:	40000800 	.word	0x40000800
 80037e8:	40000c00 	.word	0x40000c00
 80037ec:	40010400 	.word	0x40010400
 80037f0:	40014000 	.word	0x40014000
 80037f4:	40001800 	.word	0x40001800

080037f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037f8:	b084      	sub	sp, #16
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	f107 001c 	add.w	r0, r7, #28
 8003806:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800380a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800380e:	2b01      	cmp	r3, #1
 8003810:	d123      	bne.n	800385a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003816:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800383a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800383e:	2b01      	cmp	r3, #1
 8003840:	d105      	bne.n	800384e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f001 fae2 	bl	8004e18 <USB_CoreReset>
 8003854:	4603      	mov	r3, r0
 8003856:	73fb      	strb	r3, [r7, #15]
 8003858:	e01b      	b.n	8003892 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f001 fad6 	bl	8004e18 <USB_CoreReset>
 800386c:	4603      	mov	r3, r0
 800386e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003870:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003874:	2b00      	cmp	r3, #0
 8003876:	d106      	bne.n	8003886 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	639a      	str	r2, [r3, #56]	; 0x38
 8003884:	e005      	b.n	8003892 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003892:	7fbb      	ldrb	r3, [r7, #30]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d10b      	bne.n	80038b0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f043 0206 	orr.w	r2, r3, #6
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f043 0220 	orr.w	r2, r3, #32
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038bc:	b004      	add	sp, #16
 80038be:	4770      	bx	lr

080038c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	4613      	mov	r3, r2
 80038cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d165      	bne.n	80039a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4a41      	ldr	r2, [pc, #260]	; (80039dc <USB_SetTurnaroundTime+0x11c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d906      	bls.n	80038ea <USB_SetTurnaroundTime+0x2a>
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	4a40      	ldr	r2, [pc, #256]	; (80039e0 <USB_SetTurnaroundTime+0x120>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d202      	bcs.n	80038ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80038e4:	230f      	movs	r3, #15
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	e062      	b.n	80039b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4a3c      	ldr	r2, [pc, #240]	; (80039e0 <USB_SetTurnaroundTime+0x120>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d306      	bcc.n	8003900 <USB_SetTurnaroundTime+0x40>
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	4a3b      	ldr	r2, [pc, #236]	; (80039e4 <USB_SetTurnaroundTime+0x124>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d202      	bcs.n	8003900 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80038fa:	230e      	movs	r3, #14
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	e057      	b.n	80039b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4a38      	ldr	r2, [pc, #224]	; (80039e4 <USB_SetTurnaroundTime+0x124>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d306      	bcc.n	8003916 <USB_SetTurnaroundTime+0x56>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4a37      	ldr	r2, [pc, #220]	; (80039e8 <USB_SetTurnaroundTime+0x128>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d202      	bcs.n	8003916 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003910:	230d      	movs	r3, #13
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	e04c      	b.n	80039b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	4a33      	ldr	r2, [pc, #204]	; (80039e8 <USB_SetTurnaroundTime+0x128>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d306      	bcc.n	800392c <USB_SetTurnaroundTime+0x6c>
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	4a32      	ldr	r2, [pc, #200]	; (80039ec <USB_SetTurnaroundTime+0x12c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d802      	bhi.n	800392c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003926:	230c      	movs	r3, #12
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	e041      	b.n	80039b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4a2f      	ldr	r2, [pc, #188]	; (80039ec <USB_SetTurnaroundTime+0x12c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d906      	bls.n	8003942 <USB_SetTurnaroundTime+0x82>
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4a2e      	ldr	r2, [pc, #184]	; (80039f0 <USB_SetTurnaroundTime+0x130>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d802      	bhi.n	8003942 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800393c:	230b      	movs	r3, #11
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	e036      	b.n	80039b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	4a2a      	ldr	r2, [pc, #168]	; (80039f0 <USB_SetTurnaroundTime+0x130>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d906      	bls.n	8003958 <USB_SetTurnaroundTime+0x98>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	4a29      	ldr	r2, [pc, #164]	; (80039f4 <USB_SetTurnaroundTime+0x134>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d802      	bhi.n	8003958 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003952:	230a      	movs	r3, #10
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	e02b      	b.n	80039b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4a26      	ldr	r2, [pc, #152]	; (80039f4 <USB_SetTurnaroundTime+0x134>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d906      	bls.n	800396e <USB_SetTurnaroundTime+0xae>
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4a25      	ldr	r2, [pc, #148]	; (80039f8 <USB_SetTurnaroundTime+0x138>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d202      	bcs.n	800396e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003968:	2309      	movs	r3, #9
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	e020      	b.n	80039b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	4a21      	ldr	r2, [pc, #132]	; (80039f8 <USB_SetTurnaroundTime+0x138>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d306      	bcc.n	8003984 <USB_SetTurnaroundTime+0xc4>
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	4a20      	ldr	r2, [pc, #128]	; (80039fc <USB_SetTurnaroundTime+0x13c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d802      	bhi.n	8003984 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800397e:	2308      	movs	r3, #8
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	e015      	b.n	80039b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4a1d      	ldr	r2, [pc, #116]	; (80039fc <USB_SetTurnaroundTime+0x13c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d906      	bls.n	800399a <USB_SetTurnaroundTime+0xda>
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4a1c      	ldr	r2, [pc, #112]	; (8003a00 <USB_SetTurnaroundTime+0x140>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d202      	bcs.n	800399a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003994:	2307      	movs	r3, #7
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	e00a      	b.n	80039b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800399a:	2306      	movs	r3, #6
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	e007      	b.n	80039b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d102      	bne.n	80039ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80039a6:	2309      	movs	r3, #9
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	e001      	b.n	80039b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80039ac:	2309      	movs	r3, #9
 80039ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	029b      	lsls	r3, r3, #10
 80039c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80039c8:	431a      	orrs	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	00d8acbf 	.word	0x00d8acbf
 80039e0:	00e4e1c0 	.word	0x00e4e1c0
 80039e4:	00f42400 	.word	0x00f42400
 80039e8:	01067380 	.word	0x01067380
 80039ec:	011a499f 	.word	0x011a499f
 80039f0:	01312cff 	.word	0x01312cff
 80039f4:	014ca43f 	.word	0x014ca43f
 80039f8:	016e3600 	.word	0x016e3600
 80039fc:	01a6ab1f 	.word	0x01a6ab1f
 8003a00:	01e84800 	.word	0x01e84800

08003a04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f043 0201 	orr.w	r2, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f023 0201 	bic.w	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d115      	bne.n	8003a96 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003a76:	200a      	movs	r0, #10
 8003a78:	f7fd f9b8 	bl	8000dec <HAL_Delay>
      ms += 10U;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	330a      	adds	r3, #10
 8003a80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f001 f939 	bl	8004cfa <USB_GetMode>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d01e      	beq.n	8003acc <USB_SetCurrentMode+0x84>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2bc7      	cmp	r3, #199	; 0xc7
 8003a92:	d9f0      	bls.n	8003a76 <USB_SetCurrentMode+0x2e>
 8003a94:	e01a      	b.n	8003acc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a96:	78fb      	ldrb	r3, [r7, #3]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d115      	bne.n	8003ac8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003aa8:	200a      	movs	r0, #10
 8003aaa:	f7fd f99f 	bl	8000dec <HAL_Delay>
      ms += 10U;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	330a      	adds	r3, #10
 8003ab2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f001 f920 	bl	8004cfa <USB_GetMode>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <USB_SetCurrentMode+0x84>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2bc7      	cmp	r3, #199	; 0xc7
 8003ac4:	d9f0      	bls.n	8003aa8 <USB_SetCurrentMode+0x60>
 8003ac6:	e001      	b.n	8003acc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e005      	b.n	8003ad8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2bc8      	cmp	r3, #200	; 0xc8
 8003ad0:	d101      	bne.n	8003ad6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b086      	sub	sp, #24
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
 8003aea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003aee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003afa:	2300      	movs	r3, #0
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	e009      	b.n	8003b14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	3340      	adds	r3, #64	; 0x40
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	3301      	adds	r3, #1
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	2b0e      	cmp	r3, #14
 8003b18:	d9f2      	bls.n	8003b00 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b1a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d11c      	bne.n	8003b5c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b30:	f043 0302 	orr.w	r3, r3, #2
 8003b34:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b46:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b52:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	639a      	str	r2, [r3, #56]	; 0x38
 8003b5a:	e00b      	b.n	8003b74 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b60:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b80:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d10d      	bne.n	8003ba4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d104      	bne.n	8003b9a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b90:	2100      	movs	r1, #0
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f968 	bl	8003e68 <USB_SetDevSpeed>
 8003b98:	e008      	b.n	8003bac <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f963 	bl	8003e68 <USB_SetDevSpeed>
 8003ba2:	e003      	b.n	8003bac <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ba4:	2103      	movs	r1, #3
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f95e 	bl	8003e68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003bac:	2110      	movs	r1, #16
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f8fa 	bl	8003da8 <USB_FlushTxFifo>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f924 	bl	8003e0c <USB_FlushRxFifo>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be0:	461a      	mov	r2, r3
 8003be2:	2300      	movs	r3, #0
 8003be4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bec:	461a      	mov	r2, r3
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	e043      	b.n	8003c80 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c0e:	d118      	bne.n	8003c42 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c22:	461a      	mov	r2, r3
 8003c24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	e013      	b.n	8003c54 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	e008      	b.n	8003c54 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4e:	461a      	mov	r2, r3
 8003c50:	2300      	movs	r3, #0
 8003c52:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c60:	461a      	mov	r2, r3
 8003c62:	2300      	movs	r3, #0
 8003c64:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c72:	461a      	mov	r2, r3
 8003c74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c84:	461a      	mov	r2, r3
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d3b5      	bcc.n	8003bf8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	e043      	b.n	8003d1a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ca8:	d118      	bne.n	8003cdc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	e013      	b.n	8003cee <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	e008      	b.n	8003cee <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce8:	461a      	mov	r2, r3
 8003cea:	2300      	movs	r3, #0
 8003cec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	3301      	adds	r3, #1
 8003d18:	613b      	str	r3, [r7, #16]
 8003d1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003d1e:	461a      	mov	r2, r3
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d3b5      	bcc.n	8003c92 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d38:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d46:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003d48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d105      	bne.n	8003d5c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	f043 0210 	orr.w	r2, r3, #16
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699a      	ldr	r2, [r3, #24]
 8003d60:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <USB_DevInit+0x2c4>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d68:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	f043 0208 	orr.w	r2, r3, #8
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d7c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d107      	bne.n	8003d94 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d8c:	f043 0304 	orr.w	r3, r3, #4
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003da0:	b004      	add	sp, #16
 8003da2:	4770      	bx	lr
 8003da4:	803c3800 	.word	0x803c3800

08003da8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3301      	adds	r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003dc2:	d901      	bls.n	8003dc8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e01b      	b.n	8003e00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	daf2      	bge.n	8003db6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	019b      	lsls	r3, r3, #6
 8003dd8:	f043 0220 	orr.w	r2, r3, #32
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3301      	adds	r3, #1
 8003de4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003dec:	d901      	bls.n	8003df2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e006      	b.n	8003e00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b20      	cmp	r3, #32
 8003dfc:	d0f0      	beq.n	8003de0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003e24:	d901      	bls.n	8003e2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e018      	b.n	8003e5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	daf2      	bge.n	8003e18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2210      	movs	r2, #16
 8003e3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003e48:	d901      	bls.n	8003e4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e006      	b.n	8003e5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d0f0      	beq.n	8003e3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	68f9      	ldr	r1, [r7, #12]
 8003e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b087      	sub	sp, #28
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 0306 	and.w	r3, r3, #6
 8003eb2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d102      	bne.n	8003ec0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	75fb      	strb	r3, [r7, #23]
 8003ebe:	e00a      	b.n	8003ed6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d002      	beq.n	8003ecc <USB_GetDevSpeed+0x32>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b06      	cmp	r3, #6
 8003eca:	d102      	bne.n	8003ed2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003ecc:	2302      	movs	r3, #2
 8003ece:	75fb      	strb	r3, [r7, #23]
 8003ed0:	e001      	b.n	8003ed6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003ed2:	230f      	movs	r3, #15
 8003ed4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	371c      	adds	r7, #28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	785b      	ldrb	r3, [r3, #1]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d13a      	bne.n	8003f76 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f06:	69da      	ldr	r2, [r3, #28]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	2101      	movs	r1, #1
 8003f12:	fa01 f303 	lsl.w	r3, r1, r3
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	68f9      	ldr	r1, [r7, #12]
 8003f1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d155      	bne.n	8003fe4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	791b      	ldrb	r3, [r3, #4]
 8003f52:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f54:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	059b      	lsls	r3, r3, #22
 8003f5a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	0151      	lsls	r1, r2, #5
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	440a      	add	r2, r1
 8003f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	e036      	b.n	8003fe4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7c:	69da      	ldr	r2, [r3, #28]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	2101      	movs	r1, #1
 8003f88:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	68f9      	ldr	r1, [r7, #12]
 8003f90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f94:	4313      	orrs	r3, r2
 8003f96:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d11a      	bne.n	8003fe4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	791b      	ldrb	r3, [r3, #4]
 8003fc8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	0151      	lsls	r1, r2, #5
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	440a      	add	r2, r1
 8003fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	785b      	ldrb	r3, [r3, #1]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d161      	bne.n	80040d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004022:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004026:	d11f      	bne.n	8004068 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	440a      	add	r2, r1
 800403e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004042:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004046:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	440a      	add	r2, r1
 800405e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004062:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004066:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	2101      	movs	r1, #1
 800407a:	fa01 f303 	lsl.w	r3, r1, r3
 800407e:	b29b      	uxth	r3, r3
 8004080:	43db      	mvns	r3, r3
 8004082:	68f9      	ldr	r1, [r7, #12]
 8004084:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004088:	4013      	ands	r3, r2
 800408a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004092:	69da      	ldr	r2, [r3, #28]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	f003 030f 	and.w	r3, r3, #15
 800409c:	2101      	movs	r1, #1
 800409e:	fa01 f303 	lsl.w	r3, r1, r3
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	43db      	mvns	r3, r3
 80040a6:	68f9      	ldr	r1, [r7, #12]
 80040a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040ac:	4013      	ands	r3, r2
 80040ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	0159      	lsls	r1, r3, #5
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	440b      	add	r3, r1
 80040c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ca:	4619      	mov	r1, r3
 80040cc:	4b35      	ldr	r3, [pc, #212]	; (80041a4 <USB_DeactivateEndpoint+0x1b0>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]
 80040d2:	e060      	b.n	8004196 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040ea:	d11f      	bne.n	800412c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	0151      	lsls	r1, r2, #5
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	440a      	add	r2, r1
 8004102:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004106:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800410a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	0151      	lsls	r1, r2, #5
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	440a      	add	r2, r1
 8004122:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004126:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800412a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	2101      	movs	r1, #1
 800413e:	fa01 f303 	lsl.w	r3, r1, r3
 8004142:	041b      	lsls	r3, r3, #16
 8004144:	43db      	mvns	r3, r3
 8004146:	68f9      	ldr	r1, [r7, #12]
 8004148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800414c:	4013      	ands	r3, r2
 800414e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004156:	69da      	ldr	r2, [r3, #28]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	f003 030f 	and.w	r3, r3, #15
 8004160:	2101      	movs	r1, #1
 8004162:	fa01 f303 	lsl.w	r3, r1, r3
 8004166:	041b      	lsls	r3, r3, #16
 8004168:	43db      	mvns	r3, r3
 800416a:	68f9      	ldr	r1, [r7, #12]
 800416c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004170:	4013      	ands	r3, r2
 8004172:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	0159      	lsls	r1, r3, #5
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	440b      	add	r3, r1
 800418a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418e:	4619      	mov	r1, r3
 8004190:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <USB_DeactivateEndpoint+0x1b4>)
 8004192:	4013      	ands	r3, r2
 8004194:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	ec337800 	.word	0xec337800
 80041a8:	eff37800 	.word	0xeff37800

080041ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08a      	sub	sp, #40	; 0x28
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	4613      	mov	r3, r2
 80041b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	785b      	ldrb	r3, [r3, #1]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	f040 817a 	bne.w	80044c2 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d132      	bne.n	800423c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	0151      	lsls	r1, r2, #5
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	440a      	add	r2, r1
 80041ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	4413      	add	r3, r2
 8004202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	0151      	lsls	r1, r2, #5
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	440a      	add	r2, r1
 8004210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004214:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004218:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	0151      	lsls	r1, r2, #5
 800422c:	69fa      	ldr	r2, [r7, #28]
 800422e:	440a      	add	r2, r1
 8004230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004234:	0cdb      	lsrs	r3, r3, #19
 8004236:	04db      	lsls	r3, r3, #19
 8004238:	6113      	str	r3, [r2, #16]
 800423a:	e092      	b.n	8004362 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	0151      	lsls	r1, r2, #5
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	440a      	add	r2, r1
 8004252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004256:	0cdb      	lsrs	r3, r3, #19
 8004258:	04db      	lsls	r3, r3, #19
 800425a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	0151      	lsls	r1, r2, #5
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	440a      	add	r2, r1
 8004272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004276:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800427a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800427e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d11a      	bne.n	80042bc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	429a      	cmp	r2, r3
 8004290:	d903      	bls.n	800429a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	0151      	lsls	r1, r2, #5
 80042ac:	69fa      	ldr	r2, [r7, #28]
 80042ae:	440a      	add	r2, r1
 80042b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042b8:	6113      	str	r3, [r2, #16]
 80042ba:	e01b      	b.n	80042f4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	6919      	ldr	r1, [r3, #16]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	440b      	add	r3, r1
 80042d4:	1e59      	subs	r1, r3, #1
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	fbb1 f3f3 	udiv	r3, r1, r3
 80042de:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80042e0:	4ba2      	ldr	r3, [pc, #648]	; (800456c <USB_EPStartXfer+0x3c0>)
 80042e2:	400b      	ands	r3, r1
 80042e4:	69b9      	ldr	r1, [r7, #24]
 80042e6:	0148      	lsls	r0, r1, #5
 80042e8:	69f9      	ldr	r1, [r7, #28]
 80042ea:	4401      	add	r1, r0
 80042ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042f0:	4313      	orrs	r3, r2
 80042f2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800430a:	69b9      	ldr	r1, [r7, #24]
 800430c:	0148      	lsls	r0, r1, #5
 800430e:	69f9      	ldr	r1, [r7, #28]
 8004310:	4401      	add	r1, r0
 8004312:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004316:	4313      	orrs	r3, r2
 8004318:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	791b      	ldrb	r3, [r3, #4]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d11f      	bne.n	8004362 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	4413      	add	r3, r2
 800432a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	0151      	lsls	r1, r2, #5
 8004334:	69fa      	ldr	r2, [r7, #28]
 8004336:	440a      	add	r2, r1
 8004338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800433c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004340:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	0151      	lsls	r1, r2, #5
 8004354:	69fa      	ldr	r2, [r7, #28]
 8004356:	440a      	add	r2, r1
 8004358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800435c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004360:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d14b      	bne.n	8004400 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d009      	beq.n	8004384 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800437c:	461a      	mov	r2, r3
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	791b      	ldrb	r3, [r3, #4]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d128      	bne.n	80043de <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004398:	2b00      	cmp	r3, #0
 800439a:	d110      	bne.n	80043be <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	0151      	lsls	r1, r2, #5
 80043ae:	69fa      	ldr	r2, [r7, #28]
 80043b0:	440a      	add	r2, r1
 80043b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	e00f      	b.n	80043de <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	0151      	lsls	r1, r2, #5
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	440a      	add	r2, r1
 80043d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	0151      	lsls	r1, r2, #5
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	440a      	add	r2, r1
 80043f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	e165      	b.n	80046cc <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	0151      	lsls	r1, r2, #5
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	440a      	add	r2, r1
 8004416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800441a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800441e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	791b      	ldrb	r3, [r3, #4]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d015      	beq.n	8004454 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 814d 	beq.w	80046cc <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	2101      	movs	r1, #1
 8004444:	fa01 f303 	lsl.w	r3, r1, r3
 8004448:	69f9      	ldr	r1, [r7, #28]
 800444a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800444e:	4313      	orrs	r3, r2
 8004450:	634b      	str	r3, [r1, #52]	; 0x34
 8004452:	e13b      	b.n	80046cc <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004460:	2b00      	cmp	r3, #0
 8004462:	d110      	bne.n	8004486 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	0151      	lsls	r1, r2, #5
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	440a      	add	r2, r1
 800447a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800447e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	e00f      	b.n	80044a6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	4413      	add	r3, r2
 800448e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	0151      	lsls	r1, r2, #5
 8004498:	69fa      	ldr	r2, [r7, #28]
 800449a:	440a      	add	r2, r1
 800449c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	68d9      	ldr	r1, [r3, #12]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	b298      	uxth	r0, r3
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	4603      	mov	r3, r0
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 f9b8 	bl	8004830 <USB_WritePacket>
 80044c0:	e104      	b.n	80046cc <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	0151      	lsls	r1, r2, #5
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	440a      	add	r2, r1
 80044d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044dc:	0cdb      	lsrs	r3, r3, #19
 80044de:	04db      	lsls	r3, r3, #19
 80044e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	0151      	lsls	r1, r2, #5
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	440a      	add	r2, r1
 80044f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004500:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004504:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d131      	bne.n	8004570 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004530:	691a      	ldr	r2, [r3, #16]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800453a:	69b9      	ldr	r1, [r7, #24]
 800453c:	0148      	lsls	r0, r1, #5
 800453e:	69f9      	ldr	r1, [r7, #28]
 8004540:	4401      	add	r1, r0
 8004542:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004546:	4313      	orrs	r3, r2
 8004548:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	0151      	lsls	r1, r2, #5
 800455c:	69fa      	ldr	r2, [r7, #28]
 800455e:	440a      	add	r2, r1
 8004560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004564:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004568:	6113      	str	r3, [r2, #16]
 800456a:	e061      	b.n	8004630 <USB_EPStartXfer+0x484>
 800456c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d123      	bne.n	80045c0 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800458e:	69b9      	ldr	r1, [r7, #24]
 8004590:	0148      	lsls	r0, r1, #5
 8004592:	69f9      	ldr	r1, [r7, #28]
 8004594:	4401      	add	r1, r0
 8004596:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800459a:	4313      	orrs	r3, r2
 800459c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	0151      	lsls	r1, r2, #5
 80045b0:	69fa      	ldr	r2, [r7, #28]
 80045b2:	440a      	add	r2, r1
 80045b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045bc:	6113      	str	r3, [r2, #16]
 80045be:	e037      	b.n	8004630 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4413      	add	r3, r2
 80045ca:	1e5a      	subs	r2, r3, #1
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	8afa      	ldrh	r2, [r7, #22]
 80045dc:	fb03 f202 	mul.w	r2, r3, r2
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	8afb      	ldrh	r3, [r7, #22]
 80045f4:	04d9      	lsls	r1, r3, #19
 80045f6:	4b38      	ldr	r3, [pc, #224]	; (80046d8 <USB_EPStartXfer+0x52c>)
 80045f8:	400b      	ands	r3, r1
 80045fa:	69b9      	ldr	r1, [r7, #24]
 80045fc:	0148      	lsls	r0, r1, #5
 80045fe:	69f9      	ldr	r1, [r7, #28]
 8004600:	4401      	add	r1, r0
 8004602:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004606:	4313      	orrs	r3, r2
 8004608:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004620:	69b9      	ldr	r1, [r7, #24]
 8004622:	0148      	lsls	r0, r1, #5
 8004624:	69f9      	ldr	r1, [r7, #28]
 8004626:	4401      	add	r1, r0
 8004628:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800462c:	4313      	orrs	r3, r2
 800462e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004630:	79fb      	ldrb	r3, [r7, #7]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d10d      	bne.n	8004652 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d009      	beq.n	8004652 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	68d9      	ldr	r1, [r3, #12]
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464e:	460a      	mov	r2, r1
 8004650:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	791b      	ldrb	r3, [r3, #4]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d128      	bne.n	80046ac <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004666:	2b00      	cmp	r3, #0
 8004668:	d110      	bne.n	800468c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	0151      	lsls	r1, r2, #5
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	440a      	add	r2, r1
 8004680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004684:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	e00f      	b.n	80046ac <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	0151      	lsls	r1, r2, #5
 800469e:	69fa      	ldr	r2, [r7, #28]
 80046a0:	440a      	add	r2, r1
 80046a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	0151      	lsls	r1, r2, #5
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	440a      	add	r2, r1
 80046c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3720      	adds	r7, #32
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	1ff80000 	.word	0x1ff80000

080046dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	785b      	ldrb	r3, [r3, #1]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d14a      	bne.n	8004790 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800470e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004712:	f040 8086 	bne.w	8004822 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	7812      	ldrb	r2, [r2, #0]
 800472a:	0151      	lsls	r1, r2, #5
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	440a      	add	r2, r1
 8004730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004734:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004738:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	7812      	ldrb	r2, [r2, #0]
 800474e:	0151      	lsls	r1, r2, #5
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	440a      	add	r2, r1
 8004754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004758:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800475c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3301      	adds	r3, #1
 8004762:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f242 7210 	movw	r2, #10000	; 0x2710
 800476a:	4293      	cmp	r3, r2
 800476c:	d902      	bls.n	8004774 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	75fb      	strb	r3, [r7, #23]
          break;
 8004772:	e056      	b.n	8004822 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004788:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800478c:	d0e7      	beq.n	800475e <USB_EPStopXfer+0x82>
 800478e:	e048      	b.n	8004822 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047a8:	d13b      	bne.n	8004822 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	7812      	ldrb	r2, [r2, #0]
 80047be:	0151      	lsls	r1, r2, #5
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	440a      	add	r2, r1
 80047c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	7812      	ldrb	r2, [r2, #0]
 80047e2:	0151      	lsls	r1, r2, #5
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	440a      	add	r2, r1
 80047e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3301      	adds	r3, #1
 80047f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80047fe:	4293      	cmp	r3, r2
 8004800:	d902      	bls.n	8004808 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	75fb      	strb	r3, [r7, #23]
          break;
 8004806:	e00c      	b.n	8004822 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800481c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004820:	d0e7      	beq.n	80047f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004822:	7dfb      	ldrb	r3, [r7, #23]
}
 8004824:	4618      	mov	r0, r3
 8004826:	371c      	adds	r7, #28
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004830:	b480      	push	{r7}
 8004832:	b089      	sub	sp, #36	; 0x24
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	4611      	mov	r1, r2
 800483c:	461a      	mov	r2, r3
 800483e:	460b      	mov	r3, r1
 8004840:	71fb      	strb	r3, [r7, #7]
 8004842:	4613      	mov	r3, r2
 8004844:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800484e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004852:	2b00      	cmp	r3, #0
 8004854:	d123      	bne.n	800489e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004856:	88bb      	ldrh	r3, [r7, #4]
 8004858:	3303      	adds	r3, #3
 800485a:	089b      	lsrs	r3, r3, #2
 800485c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800485e:	2300      	movs	r3, #0
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	e018      	b.n	8004896 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004864:	79fb      	ldrb	r3, [r7, #7]
 8004866:	031a      	lsls	r2, r3, #12
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	4413      	add	r3, r2
 800486c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004870:	461a      	mov	r2, r3
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	3301      	adds	r3, #1
 800487c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	3301      	adds	r3, #1
 8004882:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	3301      	adds	r3, #1
 8004888:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	3301      	adds	r3, #1
 800488e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	3301      	adds	r3, #1
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	429a      	cmp	r2, r3
 800489c:	d3e2      	bcc.n	8004864 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3724      	adds	r7, #36	; 0x24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b08b      	sub	sp, #44	; 0x2c
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	4613      	mov	r3, r2
 80048b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80048c2:	88fb      	ldrh	r3, [r7, #6]
 80048c4:	089b      	lsrs	r3, r3, #2
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80048ca:	88fb      	ldrh	r3, [r7, #6]
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80048d2:	2300      	movs	r3, #0
 80048d4:	623b      	str	r3, [r7, #32]
 80048d6:	e014      	b.n	8004902 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	3301      	adds	r3, #1
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	3301      	adds	r3, #1
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	3301      	adds	r3, #1
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	3301      	adds	r3, #1
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	3301      	adds	r3, #1
 8004900:	623b      	str	r3, [r7, #32]
 8004902:	6a3a      	ldr	r2, [r7, #32]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	429a      	cmp	r2, r3
 8004908:	d3e6      	bcc.n	80048d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800490a:	8bfb      	ldrh	r3, [r7, #30]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d01e      	beq.n	800494e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491a:	461a      	mov	r2, r3
 800491c:	f107 0310 	add.w	r3, r7, #16
 8004920:	6812      	ldr	r2, [r2, #0]
 8004922:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	b2db      	uxtb	r3, r3
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
 8004930:	b2da      	uxtb	r2, r3
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	701a      	strb	r2, [r3, #0]
      i++;
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	3301      	adds	r3, #1
 800493a:	623b      	str	r3, [r7, #32]
      pDest++;
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	3301      	adds	r3, #1
 8004940:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004942:	8bfb      	ldrh	r3, [r7, #30]
 8004944:	3b01      	subs	r3, #1
 8004946:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004948:	8bfb      	ldrh	r3, [r7, #30]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1ea      	bne.n	8004924 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004950:	4618      	mov	r0, r3
 8004952:	372c      	adds	r7, #44	; 0x2c
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	785b      	ldrb	r3, [r3, #1]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d12c      	bne.n	80049d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	db12      	blt.n	80049b0 <USB_EPSetStall+0x54>
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00f      	beq.n	80049b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	0151      	lsls	r1, r2, #5
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	440a      	add	r2, r1
 80049a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	0151      	lsls	r1, r2, #5
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	440a      	add	r2, r1
 80049c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	e02b      	b.n	8004a2a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	db12      	blt.n	8004a0a <USB_EPSetStall+0xae>
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00f      	beq.n	8004a0a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	0151      	lsls	r1, r2, #5
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	440a      	add	r2, r1
 8004a00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a08:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	0151      	lsls	r1, r2, #5
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	440a      	add	r2, r1
 8004a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d128      	bne.n	8004aa6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	0151      	lsls	r1, r2, #5
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	440a      	add	r2, r1
 8004a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	791b      	ldrb	r3, [r3, #4]
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d003      	beq.n	8004a84 <USB_EPClearStall+0x4c>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	791b      	ldrb	r3, [r3, #4]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d138      	bne.n	8004af6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	0151      	lsls	r1, r2, #5
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	440a      	add	r2, r1
 8004a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	e027      	b.n	8004af6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	0151      	lsls	r1, r2, #5
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	440a      	add	r2, r1
 8004abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ac4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	791b      	ldrb	r3, [r3, #4]
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d003      	beq.n	8004ad6 <USB_EPClearStall+0x9e>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	791b      	ldrb	r3, [r3, #4]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d10f      	bne.n	8004af6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	0151      	lsls	r1, r2, #5
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	440a      	add	r2, r1
 8004aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b26:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004b38:	68f9      	ldr	r1, [r7, #12]
 8004b3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b6a:	f023 0303 	bic.w	r3, r3, #3
 8004b6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b7e:	f023 0302 	bic.w	r3, r3, #2
 8004b82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b085      	sub	sp, #20
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004bac:	f023 0303 	bic.w	r3, r3, #3
 8004bb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bc0:	f043 0302 	orr.w	r3, r3, #2
 8004bc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4013      	ands	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004bec:	68fb      	ldr	r3, [r7, #12]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b085      	sub	sp, #20
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	0c1b      	lsrs	r3, r3, #16
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b085      	sub	sp, #20
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	b29b      	uxth	r3, r3
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b085      	sub	sp, #20
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004c72:	78fb      	ldrb	r3, [r7, #3]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c90:	68bb      	ldr	r3, [r7, #8]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b087      	sub	sp, #28
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004cc2:	78fb      	ldrb	r3, [r7, #3]
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	fa22 f303 	lsr.w	r3, r2, r3
 8004cce:	01db      	lsls	r3, r3, #7
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004cd8:	78fb      	ldrb	r3, [r7, #3]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004cec:	68bb      	ldr	r3, [r7, #8]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	371c      	adds	r7, #28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f003 0301 	and.w	r3, r3, #1
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b085      	sub	sp, #20
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d34:	f023 0307 	bic.w	r3, r3, #7
 8004d38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	460b      	mov	r3, r1
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	333c      	adds	r3, #60	; 0x3c
 8004d72:	3304      	adds	r3, #4
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	4a26      	ldr	r2, [pc, #152]	; (8004e14 <USB_EP0_OutStart+0xb8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d90a      	bls.n	8004d96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d90:	d101      	bne.n	8004d96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e037      	b.n	8004e06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	2300      	movs	r3, #0
 8004da0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004db0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004db4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc4:	f043 0318 	orr.w	r3, r3, #24
 8004dc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004ddc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004dde:	7afb      	ldrb	r3, [r7, #11]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d10f      	bne.n	8004e04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dea:	461a      	mov	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dfe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004e02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	4f54300a 	.word	0x4f54300a

08004e18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	3301      	adds	r3, #1
 8004e28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e30:	d901      	bls.n	8004e36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e01b      	b.n	8004e6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	daf2      	bge.n	8004e24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f043 0201 	orr.w	r2, r3, #1
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	3301      	adds	r3, #1
 8004e52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e5a:	d901      	bls.n	8004e60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e006      	b.n	8004e6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d0f0      	beq.n	8004e4e <USB_CoreReset+0x36>

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
	...

08004e7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e88:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e8c:	f002 fc94 	bl	80077b8 <USBD_static_malloc>
 8004e90:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d109      	bne.n	8004eac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	32b0      	adds	r2, #176	; 0xb0
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e0d4      	b.n	8005056 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004eac:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f002 fcf8 	bl	80078a8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	32b0      	adds	r2, #176	; 0xb0
 8004ec2:	68f9      	ldr	r1, [r7, #12]
 8004ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	32b0      	adds	r2, #176	; 0xb0
 8004ed2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	7c1b      	ldrb	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d138      	bne.n	8004f56 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ee4:	4b5e      	ldr	r3, [pc, #376]	; (8005060 <USBD_CDC_Init+0x1e4>)
 8004ee6:	7819      	ldrb	r1, [r3, #0]
 8004ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eec:	2202      	movs	r2, #2
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f002 fb3f 	bl	8007572 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004ef4:	4b5a      	ldr	r3, [pc, #360]	; (8005060 <USBD_CDC_Init+0x1e4>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	f003 020f 	and.w	r2, r3, #15
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	440b      	add	r3, r1
 8004f08:	3324      	adds	r3, #36	; 0x24
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004f0e:	4b55      	ldr	r3, [pc, #340]	; (8005064 <USBD_CDC_Init+0x1e8>)
 8004f10:	7819      	ldrb	r1, [r3, #0]
 8004f12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f16:	2202      	movs	r2, #2
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f002 fb2a 	bl	8007572 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004f1e:	4b51      	ldr	r3, [pc, #324]	; (8005064 <USBD_CDC_Init+0x1e8>)
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	f003 020f 	and.w	r2, r3, #15
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f36:	2201      	movs	r2, #1
 8004f38:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004f3a:	4b4b      	ldr	r3, [pc, #300]	; (8005068 <USBD_CDC_Init+0x1ec>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	f003 020f 	and.w	r2, r3, #15
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	3326      	adds	r3, #38	; 0x26
 8004f50:	2210      	movs	r2, #16
 8004f52:	801a      	strh	r2, [r3, #0]
 8004f54:	e035      	b.n	8004fc2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004f56:	4b42      	ldr	r3, [pc, #264]	; (8005060 <USBD_CDC_Init+0x1e4>)
 8004f58:	7819      	ldrb	r1, [r3, #0]
 8004f5a:	2340      	movs	r3, #64	; 0x40
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f002 fb07 	bl	8007572 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004f64:	4b3e      	ldr	r3, [pc, #248]	; (8005060 <USBD_CDC_Init+0x1e4>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	f003 020f 	and.w	r2, r3, #15
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	440b      	add	r3, r1
 8004f78:	3324      	adds	r3, #36	; 0x24
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004f7e:	4b39      	ldr	r3, [pc, #228]	; (8005064 <USBD_CDC_Init+0x1e8>)
 8004f80:	7819      	ldrb	r1, [r3, #0]
 8004f82:	2340      	movs	r3, #64	; 0x40
 8004f84:	2202      	movs	r2, #2
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f002 faf3 	bl	8007572 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004f8c:	4b35      	ldr	r3, [pc, #212]	; (8005064 <USBD_CDC_Init+0x1e8>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	f003 020f 	and.w	r2, r3, #15
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004fa8:	4b2f      	ldr	r3, [pc, #188]	; (8005068 <USBD_CDC_Init+0x1ec>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	f003 020f 	and.w	r2, r3, #15
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	3326      	adds	r3, #38	; 0x26
 8004fbe:	2210      	movs	r2, #16
 8004fc0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004fc2:	4b29      	ldr	r3, [pc, #164]	; (8005068 <USBD_CDC_Init+0x1ec>)
 8004fc4:	7819      	ldrb	r1, [r3, #0]
 8004fc6:	2308      	movs	r3, #8
 8004fc8:	2203      	movs	r2, #3
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f002 fad1 	bl	8007572 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004fd0:	4b25      	ldr	r3, [pc, #148]	; (8005068 <USBD_CDC_Init+0x1ec>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	f003 020f 	and.w	r2, r3, #15
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	3324      	adds	r3, #36	; 0x24
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	33b0      	adds	r3, #176	; 0xb0
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005020:	2302      	movs	r3, #2
 8005022:	e018      	b.n	8005056 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	7c1b      	ldrb	r3, [r3, #16]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10a      	bne.n	8005042 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800502c:	4b0d      	ldr	r3, [pc, #52]	; (8005064 <USBD_CDC_Init+0x1e8>)
 800502e:	7819      	ldrb	r1, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f002 fb88 	bl	8007750 <USBD_LL_PrepareReceive>
 8005040:	e008      	b.n	8005054 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005042:	4b08      	ldr	r3, [pc, #32]	; (8005064 <USBD_CDC_Init+0x1e8>)
 8005044:	7819      	ldrb	r1, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800504c:	2340      	movs	r3, #64	; 0x40
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f002 fb7e 	bl	8007750 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000093 	.word	0x20000093
 8005064:	20000094 	.word	0x20000094
 8005068:	20000095 	.word	0x20000095

0800506c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005078:	4b3a      	ldr	r3, [pc, #232]	; (8005164 <USBD_CDC_DeInit+0xf8>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	4619      	mov	r1, r3
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f002 fa9d 	bl	80075be <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005084:	4b37      	ldr	r3, [pc, #220]	; (8005164 <USBD_CDC_DeInit+0xf8>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	f003 020f 	and.w	r2, r3, #15
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	440b      	add	r3, r1
 8005098:	3324      	adds	r3, #36	; 0x24
 800509a:	2200      	movs	r2, #0
 800509c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800509e:	4b32      	ldr	r3, [pc, #200]	; (8005168 <USBD_CDC_DeInit+0xfc>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	4619      	mov	r1, r3
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f002 fa8a 	bl	80075be <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80050aa:	4b2f      	ldr	r3, [pc, #188]	; (8005168 <USBD_CDC_DeInit+0xfc>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	f003 020f 	and.w	r2, r3, #15
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80050c2:	2200      	movs	r2, #0
 80050c4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80050c6:	4b29      	ldr	r3, [pc, #164]	; (800516c <USBD_CDC_DeInit+0x100>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	4619      	mov	r1, r3
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f002 fa76 	bl	80075be <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80050d2:	4b26      	ldr	r3, [pc, #152]	; (800516c <USBD_CDC_DeInit+0x100>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	f003 020f 	and.w	r2, r3, #15
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	3324      	adds	r3, #36	; 0x24
 80050e8:	2200      	movs	r2, #0
 80050ea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80050ec:	4b1f      	ldr	r3, [pc, #124]	; (800516c <USBD_CDC_DeInit+0x100>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	f003 020f 	and.w	r2, r3, #15
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	3326      	adds	r3, #38	; 0x26
 8005102:	2200      	movs	r2, #0
 8005104:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	32b0      	adds	r2, #176	; 0xb0
 8005110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01f      	beq.n	8005158 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	33b0      	adds	r3, #176	; 0xb0
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	32b0      	adds	r2, #176	; 0xb0
 8005136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800513a:	4618      	mov	r0, r3
 800513c:	f002 fb4a 	bl	80077d4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	32b0      	adds	r2, #176	; 0xb0
 800514a:	2100      	movs	r1, #0
 800514c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20000093 	.word	0x20000093
 8005168:	20000094 	.word	0x20000094
 800516c:	20000095 	.word	0x20000095

08005170 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	32b0      	adds	r2, #176	; 0xb0
 8005184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005188:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800519c:	2303      	movs	r3, #3
 800519e:	e0bf      	b.n	8005320 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d050      	beq.n	800524e <USBD_CDC_Setup+0xde>
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	f040 80af 	bne.w	8005310 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	88db      	ldrh	r3, [r3, #6]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d03a      	beq.n	8005230 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	b25b      	sxtb	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	da1b      	bge.n	80051fc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	33b0      	adds	r3, #176	; 0xb0
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80051da:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	88d2      	ldrh	r2, [r2, #6]
 80051e0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	88db      	ldrh	r3, [r3, #6]
 80051e6:	2b07      	cmp	r3, #7
 80051e8:	bf28      	it	cs
 80051ea:	2307      	movcs	r3, #7
 80051ec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	89fa      	ldrh	r2, [r7, #14]
 80051f2:	4619      	mov	r1, r3
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f001 fd89 	bl	8006d0c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80051fa:	e090      	b.n	800531e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	785a      	ldrb	r2, [r3, #1]
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	88db      	ldrh	r3, [r3, #6]
 800520a:	2b3f      	cmp	r3, #63	; 0x3f
 800520c:	d803      	bhi.n	8005216 <USBD_CDC_Setup+0xa6>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	88db      	ldrh	r3, [r3, #6]
 8005212:	b2da      	uxtb	r2, r3
 8005214:	e000      	b.n	8005218 <USBD_CDC_Setup+0xa8>
 8005216:	2240      	movs	r2, #64	; 0x40
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800521e:	6939      	ldr	r1, [r7, #16]
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005226:	461a      	mov	r2, r3
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f001 fd9b 	bl	8006d64 <USBD_CtlPrepareRx>
      break;
 800522e:	e076      	b.n	800531e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	33b0      	adds	r3, #176	; 0xb0
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	7850      	ldrb	r0, [r2, #1]
 8005246:	2200      	movs	r2, #0
 8005248:	6839      	ldr	r1, [r7, #0]
 800524a:	4798      	blx	r3
      break;
 800524c:	e067      	b.n	800531e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	785b      	ldrb	r3, [r3, #1]
 8005252:	2b0b      	cmp	r3, #11
 8005254:	d851      	bhi.n	80052fa <USBD_CDC_Setup+0x18a>
 8005256:	a201      	add	r2, pc, #4	; (adr r2, 800525c <USBD_CDC_Setup+0xec>)
 8005258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525c:	0800528d 	.word	0x0800528d
 8005260:	08005309 	.word	0x08005309
 8005264:	080052fb 	.word	0x080052fb
 8005268:	080052fb 	.word	0x080052fb
 800526c:	080052fb 	.word	0x080052fb
 8005270:	080052fb 	.word	0x080052fb
 8005274:	080052fb 	.word	0x080052fb
 8005278:	080052fb 	.word	0x080052fb
 800527c:	080052fb 	.word	0x080052fb
 8005280:	080052fb 	.word	0x080052fb
 8005284:	080052b7 	.word	0x080052b7
 8005288:	080052e1 	.word	0x080052e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b03      	cmp	r3, #3
 8005296:	d107      	bne.n	80052a8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005298:	f107 030a 	add.w	r3, r7, #10
 800529c:	2202      	movs	r2, #2
 800529e:	4619      	mov	r1, r3
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f001 fd33 	bl	8006d0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052a6:	e032      	b.n	800530e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80052a8:	6839      	ldr	r1, [r7, #0]
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f001 fcbd 	bl	8006c2a <USBD_CtlError>
            ret = USBD_FAIL;
 80052b0:	2303      	movs	r3, #3
 80052b2:	75fb      	strb	r3, [r7, #23]
          break;
 80052b4:	e02b      	b.n	800530e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b03      	cmp	r3, #3
 80052c0:	d107      	bne.n	80052d2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80052c2:	f107 030d 	add.w	r3, r7, #13
 80052c6:	2201      	movs	r2, #1
 80052c8:	4619      	mov	r1, r3
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f001 fd1e 	bl	8006d0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052d0:	e01d      	b.n	800530e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80052d2:	6839      	ldr	r1, [r7, #0]
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f001 fca8 	bl	8006c2a <USBD_CtlError>
            ret = USBD_FAIL;
 80052da:	2303      	movs	r3, #3
 80052dc:	75fb      	strb	r3, [r7, #23]
          break;
 80052de:	e016      	b.n	800530e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	d00f      	beq.n	800530c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80052ec:	6839      	ldr	r1, [r7, #0]
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f001 fc9b 	bl	8006c2a <USBD_CtlError>
            ret = USBD_FAIL;
 80052f4:	2303      	movs	r3, #3
 80052f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80052f8:	e008      	b.n	800530c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80052fa:	6839      	ldr	r1, [r7, #0]
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f001 fc94 	bl	8006c2a <USBD_CtlError>
          ret = USBD_FAIL;
 8005302:	2303      	movs	r3, #3
 8005304:	75fb      	strb	r3, [r7, #23]
          break;
 8005306:	e002      	b.n	800530e <USBD_CDC_Setup+0x19e>
          break;
 8005308:	bf00      	nop
 800530a:	e008      	b.n	800531e <USBD_CDC_Setup+0x1ae>
          break;
 800530c:	bf00      	nop
      }
      break;
 800530e:	e006      	b.n	800531e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f001 fc89 	bl	8006c2a <USBD_CtlError>
      ret = USBD_FAIL;
 8005318:	2303      	movs	r3, #3
 800531a:	75fb      	strb	r3, [r7, #23]
      break;
 800531c:	bf00      	nop
  }

  return (uint8_t)ret;
 800531e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800533a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	32b0      	adds	r2, #176	; 0xb0
 8005346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800534e:	2303      	movs	r3, #3
 8005350:	e065      	b.n	800541e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	32b0      	adds	r2, #176	; 0xb0
 800535c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005360:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005362:	78fb      	ldrb	r3, [r7, #3]
 8005364:	f003 020f 	and.w	r2, r3, #15
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	4613      	mov	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	440b      	add	r3, r1
 8005374:	3318      	adds	r3, #24
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d02f      	beq.n	80053dc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800537c:	78fb      	ldrb	r3, [r7, #3]
 800537e:	f003 020f 	and.w	r2, r3, #15
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	4613      	mov	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	3318      	adds	r3, #24
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	78fb      	ldrb	r3, [r7, #3]
 8005394:	f003 010f 	and.w	r1, r3, #15
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	460b      	mov	r3, r1
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	440b      	add	r3, r1
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4403      	add	r3, r0
 80053a4:	331c      	adds	r3, #28
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80053ac:	fb01 f303 	mul.w	r3, r1, r3
 80053b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d112      	bne.n	80053dc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80053b6:	78fb      	ldrb	r3, [r7, #3]
 80053b8:	f003 020f 	and.w	r2, r3, #15
 80053bc:	6879      	ldr	r1, [r7, #4]
 80053be:	4613      	mov	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	440b      	add	r3, r1
 80053c8:	3318      	adds	r3, #24
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80053ce:	78f9      	ldrb	r1, [r7, #3]
 80053d0:	2300      	movs	r3, #0
 80053d2:	2200      	movs	r2, #0
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f002 f99a 	bl	800770e <USBD_LL_Transmit>
 80053da:	e01f      	b.n	800541c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2200      	movs	r2, #0
 80053e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	33b0      	adds	r3, #176	; 0xb0
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d010      	beq.n	800541c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	33b0      	adds	r3, #176	; 0xb0
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005418:	78fa      	ldrb	r2, [r7, #3]
 800541a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b084      	sub	sp, #16
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
 800542e:	460b      	mov	r3, r1
 8005430:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	32b0      	adds	r2, #176	; 0xb0
 800543c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005440:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	32b0      	adds	r2, #176	; 0xb0
 800544c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005454:	2303      	movs	r3, #3
 8005456:	e01a      	b.n	800548e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	4619      	mov	r1, r3
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f002 f998 	bl	8007792 <USBD_LL_GetRxDataSize>
 8005462:	4602      	mov	r2, r0
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	33b0      	adds	r3, #176	; 0xb0
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005488:	4611      	mov	r1, r2
 800548a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b084      	sub	sp, #16
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	32b0      	adds	r2, #176	; 0xb0
 80054a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e025      	b.n	8005504 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	33b0      	adds	r3, #176	; 0xb0
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d01a      	beq.n	8005502 <USBD_CDC_EP0_RxReady+0x6c>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80054d2:	2bff      	cmp	r3, #255	; 0xff
 80054d4:	d015      	beq.n	8005502 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	33b0      	adds	r3, #176	; 0xb0
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80054ee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80054f6:	b292      	uxth	r2, r2
 80054f8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	22ff      	movs	r2, #255	; 0xff
 80054fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005514:	2182      	movs	r1, #130	; 0x82
 8005516:	4818      	ldr	r0, [pc, #96]	; (8005578 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005518:	f000 fd4f 	bl	8005fba <USBD_GetEpDesc>
 800551c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800551e:	2101      	movs	r1, #1
 8005520:	4815      	ldr	r0, [pc, #84]	; (8005578 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005522:	f000 fd4a 	bl	8005fba <USBD_GetEpDesc>
 8005526:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005528:	2181      	movs	r1, #129	; 0x81
 800552a:	4813      	ldr	r0, [pc, #76]	; (8005578 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800552c:	f000 fd45 	bl	8005fba <USBD_GetEpDesc>
 8005530:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	2210      	movs	r2, #16
 800553c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d006      	beq.n	8005552 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	2200      	movs	r2, #0
 8005548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800554c:	711a      	strb	r2, [r3, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d006      	beq.n	8005566 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005560:	711a      	strb	r2, [r3, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2243      	movs	r2, #67	; 0x43
 800556a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800556c:	4b02      	ldr	r3, [pc, #8]	; (8005578 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20000050 	.word	0x20000050

0800557c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005584:	2182      	movs	r1, #130	; 0x82
 8005586:	4818      	ldr	r0, [pc, #96]	; (80055e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005588:	f000 fd17 	bl	8005fba <USBD_GetEpDesc>
 800558c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800558e:	2101      	movs	r1, #1
 8005590:	4815      	ldr	r0, [pc, #84]	; (80055e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005592:	f000 fd12 	bl	8005fba <USBD_GetEpDesc>
 8005596:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005598:	2181      	movs	r1, #129	; 0x81
 800559a:	4813      	ldr	r0, [pc, #76]	; (80055e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800559c:	f000 fd0d 	bl	8005fba <USBD_GetEpDesc>
 80055a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	2210      	movs	r2, #16
 80055ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d006      	beq.n	80055c2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	2200      	movs	r2, #0
 80055b8:	711a      	strb	r2, [r3, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f042 0202 	orr.w	r2, r2, #2
 80055c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d006      	beq.n	80055d6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	711a      	strb	r2, [r3, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f042 0202 	orr.w	r2, r2, #2
 80055d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2243      	movs	r2, #67	; 0x43
 80055da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80055dc:	4b02      	ldr	r3, [pc, #8]	; (80055e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3718      	adds	r7, #24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20000050 	.word	0x20000050

080055ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80055f4:	2182      	movs	r1, #130	; 0x82
 80055f6:	4818      	ldr	r0, [pc, #96]	; (8005658 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055f8:	f000 fcdf 	bl	8005fba <USBD_GetEpDesc>
 80055fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80055fe:	2101      	movs	r1, #1
 8005600:	4815      	ldr	r0, [pc, #84]	; (8005658 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005602:	f000 fcda 	bl	8005fba <USBD_GetEpDesc>
 8005606:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005608:	2181      	movs	r1, #129	; 0x81
 800560a:	4813      	ldr	r0, [pc, #76]	; (8005658 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800560c:	f000 fcd5 	bl	8005fba <USBD_GetEpDesc>
 8005610:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2210      	movs	r2, #16
 800561c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d006      	beq.n	8005632 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	2200      	movs	r2, #0
 8005628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800562c:	711a      	strb	r2, [r3, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d006      	beq.n	8005646 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005640:	711a      	strb	r2, [r3, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2243      	movs	r2, #67	; 0x43
 800564a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800564c:	4b02      	ldr	r3, [pc, #8]	; (8005658 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800564e:	4618      	mov	r0, r3
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20000050 	.word	0x20000050

0800565c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	220a      	movs	r2, #10
 8005668:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800566a:	4b03      	ldr	r3, [pc, #12]	; (8005678 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800566c:	4618      	mov	r0, r3
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	2000000c 	.word	0x2000000c

0800567c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800568c:	2303      	movs	r3, #3
 800568e:	e009      	b.n	80056a4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	33b0      	adds	r3, #176	; 0xb0
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	32b0      	adds	r2, #176	; 0xb0
 80056c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ca:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e008      	b.n	80056e8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	32b0      	adds	r2, #176	; 0xb0
 8005708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800570c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005714:	2303      	movs	r3, #3
 8005716:	e004      	b.n	8005722 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
	...

08005730 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	32b0      	adds	r2, #176	; 0xb0
 8005742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005746:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005748:	2301      	movs	r3, #1
 800574a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005752:	2303      	movs	r3, #3
 8005754:	e025      	b.n	80057a2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800575c:	2b00      	cmp	r3, #0
 800575e:	d11f      	bne.n	80057a0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2201      	movs	r2, #1
 8005764:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005768:	4b10      	ldr	r3, [pc, #64]	; (80057ac <USBD_CDC_TransmitPacket+0x7c>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	f003 020f 	and.w	r2, r3, #15
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4403      	add	r3, r0
 8005782:	3318      	adds	r3, #24
 8005784:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005786:	4b09      	ldr	r3, [pc, #36]	; (80057ac <USBD_CDC_TransmitPacket+0x7c>)
 8005788:	7819      	ldrb	r1, [r3, #0]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f001 ffb9 	bl	800770e <USBD_LL_Transmit>

    ret = USBD_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20000093 	.word	0x20000093

080057b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	32b0      	adds	r2, #176	; 0xb0
 80057c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	32b0      	adds	r2, #176	; 0xb0
 80057d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80057da:	2303      	movs	r3, #3
 80057dc:	e018      	b.n	8005810 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	7c1b      	ldrb	r3, [r3, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10a      	bne.n	80057fc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057e6:	4b0c      	ldr	r3, [pc, #48]	; (8005818 <USBD_CDC_ReceivePacket+0x68>)
 80057e8:	7819      	ldrb	r1, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f001 ffab 	bl	8007750 <USBD_LL_PrepareReceive>
 80057fa:	e008      	b.n	800580e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057fc:	4b06      	ldr	r3, [pc, #24]	; (8005818 <USBD_CDC_ReceivePacket+0x68>)
 80057fe:	7819      	ldrb	r1, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005806:	2340      	movs	r3, #64	; 0x40
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f001 ffa1 	bl	8007750 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	20000094 	.word	0x20000094

0800581c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	4613      	mov	r3, r2
 8005828:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005830:	2303      	movs	r3, #3
 8005832:	e01f      	b.n	8005874 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	79fa      	ldrb	r2, [r7, #7]
 8005866:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f001 fe1b 	bl	80074a4 <USBD_LL_Init>
 800586e:	4603      	mov	r3, r0
 8005870:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005872:	7dfb      	ldrb	r3, [r7, #23]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3718      	adds	r7, #24
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005890:	2303      	movs	r3, #3
 8005892:	e025      	b.n	80058e0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	32ae      	adds	r2, #174	; 0xae
 80058a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00f      	beq.n	80058d0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	32ae      	adds	r2, #174	; 0xae
 80058ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c0:	f107 020e 	add.w	r2, r7, #14
 80058c4:	4610      	mov	r0, r2
 80058c6:	4798      	blx	r3
 80058c8:	4602      	mov	r2, r0
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f001 fe23 	bl	800753c <USBD_LL_Start>
 80058f6:	4603      	mov	r3, r0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005908:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800590a:	4618      	mov	r0, r3
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	460b      	mov	r3, r1
 8005920:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800592c:	2b00      	cmp	r3, #0
 800592e:	d009      	beq.n	8005944 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	78fa      	ldrb	r2, [r7, #3]
 800593a:	4611      	mov	r1, r2
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	4798      	blx	r3
 8005940:	4603      	mov	r3, r0
 8005942:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005944:	7bfb      	ldrb	r3, [r7, #15]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b084      	sub	sp, #16
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	460b      	mov	r3, r1
 8005958:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	78fa      	ldrb	r2, [r7, #3]
 8005968:	4611      	mov	r1, r2
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	4798      	blx	r3
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005974:	2303      	movs	r3, #3
 8005976:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005978:	7bfb      	ldrb	r3, [r7, #15]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b084      	sub	sp, #16
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005992:	6839      	ldr	r1, [r7, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	f001 f90e 	bl	8006bb6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80059a8:	461a      	mov	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059b6:	f003 031f 	and.w	r3, r3, #31
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d01a      	beq.n	80059f4 <USBD_LL_SetupStage+0x72>
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d822      	bhi.n	8005a08 <USBD_LL_SetupStage+0x86>
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <USBD_LL_SetupStage+0x4a>
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d00a      	beq.n	80059e0 <USBD_LL_SetupStage+0x5e>
 80059ca:	e01d      	b.n	8005a08 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059d2:	4619      	mov	r1, r3
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fb65 	bl	80060a4 <USBD_StdDevReq>
 80059da:	4603      	mov	r3, r0
 80059dc:	73fb      	strb	r3, [r7, #15]
      break;
 80059de:	e020      	b.n	8005a22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059e6:	4619      	mov	r1, r3
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fbcd 	bl	8006188 <USBD_StdItfReq>
 80059ee:	4603      	mov	r3, r0
 80059f0:	73fb      	strb	r3, [r7, #15]
      break;
 80059f2:	e016      	b.n	8005a22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059fa:	4619      	mov	r1, r3
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fc2f 	bl	8006260 <USBD_StdEPReq>
 8005a02:	4603      	mov	r3, r0
 8005a04:	73fb      	strb	r3, [r7, #15]
      break;
 8005a06:	e00c      	b.n	8005a22 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	4619      	mov	r1, r3
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f001 fdf0 	bl	80075fc <USBD_LL_StallEP>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a20:	bf00      	nop
  }

  return ret;
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	460b      	mov	r3, r1
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005a3e:	7afb      	ldrb	r3, [r7, #11]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d16e      	bne.n	8005b22 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	f040 8098 	bne.w	8005b88 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d913      	bls.n	8005a8c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	1ad2      	subs	r2, r2, r3
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	bf28      	it	cs
 8005a7e:	4613      	movcs	r3, r2
 8005a80:	461a      	mov	r2, r3
 8005a82:	6879      	ldr	r1, [r7, #4]
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f001 f98a 	bl	8006d9e <USBD_CtlContinueRx>
 8005a8a:	e07d      	b.n	8005b88 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a92:	f003 031f 	and.w	r3, r3, #31
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d014      	beq.n	8005ac4 <USBD_LL_DataOutStage+0x98>
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d81d      	bhi.n	8005ada <USBD_LL_DataOutStage+0xae>
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <USBD_LL_DataOutStage+0x7c>
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d003      	beq.n	8005aae <USBD_LL_DataOutStage+0x82>
 8005aa6:	e018      	b.n	8005ada <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	75bb      	strb	r3, [r7, #22]
            break;
 8005aac:	e018      	b.n	8005ae0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 fa64 	bl	8005f86 <USBD_CoreFindIF>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	75bb      	strb	r3, [r7, #22]
            break;
 8005ac2:	e00d      	b.n	8005ae0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	4619      	mov	r1, r3
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 fa66 	bl	8005fa0 <USBD_CoreFindEP>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	75bb      	strb	r3, [r7, #22]
            break;
 8005ad8:	e002      	b.n	8005ae0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	75bb      	strb	r3, [r7, #22]
            break;
 8005ade:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005ae0:	7dbb      	ldrb	r3, [r7, #22]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d119      	bne.n	8005b1a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d113      	bne.n	8005b1a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005af2:	7dba      	ldrb	r2, [r7, #22]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	32ae      	adds	r2, #174	; 0xae
 8005af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00b      	beq.n	8005b1a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005b02:	7dba      	ldrb	r2, [r7, #22]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005b0a:	7dba      	ldrb	r2, [r7, #22]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	32ae      	adds	r2, #174	; 0xae
 8005b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f001 f950 	bl	8006dc0 <USBD_CtlSendStatus>
 8005b20:	e032      	b.n	8005b88 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005b22:	7afb      	ldrb	r3, [r7, #11]
 8005b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 fa37 	bl	8005fa0 <USBD_CoreFindEP>
 8005b32:	4603      	mov	r3, r0
 8005b34:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b36:	7dbb      	ldrb	r3, [r7, #22]
 8005b38:	2bff      	cmp	r3, #255	; 0xff
 8005b3a:	d025      	beq.n	8005b88 <USBD_LL_DataOutStage+0x15c>
 8005b3c:	7dbb      	ldrb	r3, [r7, #22]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d122      	bne.n	8005b88 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b03      	cmp	r3, #3
 8005b4c:	d117      	bne.n	8005b7e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005b4e:	7dba      	ldrb	r2, [r7, #22]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	32ae      	adds	r2, #174	; 0xae
 8005b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00f      	beq.n	8005b7e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005b5e:	7dba      	ldrb	r2, [r7, #22]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005b66:	7dba      	ldrb	r2, [r7, #22]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	32ae      	adds	r2, #174	; 0xae
 8005b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	7afa      	ldrb	r2, [r7, #11]
 8005b74:	4611      	mov	r1, r2
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	4798      	blx	r3
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005b7e:	7dfb      	ldrb	r3, [r7, #23]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d001      	beq.n	8005b88 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005b84:	7dfb      	ldrb	r3, [r7, #23]
 8005b86:	e000      	b.n	8005b8a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b086      	sub	sp, #24
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	607a      	str	r2, [r7, #4]
 8005b9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005ba0:	7afb      	ldrb	r3, [r7, #11]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d16f      	bne.n	8005c86 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3314      	adds	r3, #20
 8005baa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d15a      	bne.n	8005c6c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d914      	bls.n	8005bec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	1ad2      	subs	r2, r2, r3
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f001 f8b2 	bl	8006d42 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bde:	2300      	movs	r3, #0
 8005be0:	2200      	movs	r2, #0
 8005be2:	2100      	movs	r1, #0
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f001 fdb3 	bl	8007750 <USBD_LL_PrepareReceive>
 8005bea:	e03f      	b.n	8005c6c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d11c      	bne.n	8005c32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d316      	bcc.n	8005c32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d20f      	bcs.n	8005c32 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c12:	2200      	movs	r2, #0
 8005c14:	2100      	movs	r1, #0
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f001 f893 	bl	8006d42 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c24:	2300      	movs	r3, #0
 8005c26:	2200      	movs	r2, #0
 8005c28:	2100      	movs	r1, #0
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f001 fd90 	bl	8007750 <USBD_LL_PrepareReceive>
 8005c30:	e01c      	b.n	8005c6c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d10f      	bne.n	8005c5e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d009      	beq.n	8005c5e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c5e:	2180      	movs	r1, #128	; 0x80
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f001 fccb 	bl	80075fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f001 f8bd 	bl	8006de6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d03a      	beq.n	8005cec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f7ff fe42 	bl	8005900 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c84:	e032      	b.n	8005cec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005c86:	7afb      	ldrb	r3, [r7, #11]
 8005c88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	4619      	mov	r1, r3
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 f985 	bl	8005fa0 <USBD_CoreFindEP>
 8005c96:	4603      	mov	r3, r0
 8005c98:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
 8005c9c:	2bff      	cmp	r3, #255	; 0xff
 8005c9e:	d025      	beq.n	8005cec <USBD_LL_DataInStage+0x15a>
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d122      	bne.n	8005cec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d11c      	bne.n	8005cec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005cb2:	7dfa      	ldrb	r2, [r7, #23]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	32ae      	adds	r2, #174	; 0xae
 8005cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d014      	beq.n	8005cec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005cc2:	7dfa      	ldrb	r2, [r7, #23]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005cca:	7dfa      	ldrb	r2, [r7, #23]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	32ae      	adds	r2, #174	; 0xae
 8005cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	7afa      	ldrb	r2, [r7, #11]
 8005cd8:	4611      	mov	r1, r2
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	4798      	blx	r3
 8005cde:	4603      	mov	r3, r0
 8005ce0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005ce2:	7dbb      	ldrb	r3, [r7, #22]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005ce8:	7dbb      	ldrb	r3, [r7, #22]
 8005cea:	e000      	b.n	8005cee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3718      	adds	r7, #24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d014      	beq.n	8005d5c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00e      	beq.n	8005d5c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	6852      	ldr	r2, [r2, #4]
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	4798      	blx	r3
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d5c:	2340      	movs	r3, #64	; 0x40
 8005d5e:	2200      	movs	r2, #0
 8005d60:	2100      	movs	r1, #0
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f001 fc05 	bl	8007572 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2240      	movs	r2, #64	; 0x40
 8005d74:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d78:	2340      	movs	r3, #64	; 0x40
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	2180      	movs	r1, #128	; 0x80
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f001 fbf7 	bl	8007572 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2240      	movs	r2, #64	; 0x40
 8005d8e:	621a      	str	r2, [r3, #32]

  return ret;
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	460b      	mov	r3, r1
 8005da4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	78fa      	ldrb	r2, [r7, #3]
 8005daa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d006      	beq.n	8005ddc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2204      	movs	r2, #4
 8005de0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d106      	bne.n	8005e14 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b082      	sub	sp, #8
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d110      	bne.n	8005e58 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00b      	beq.n	8005e58 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d005      	beq.n	8005e58 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b082      	sub	sp, #8
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	32ae      	adds	r2, #174	; 0xae
 8005e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e01c      	b.n	8005ebe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d115      	bne.n	8005ebc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	32ae      	adds	r2, #174	; 0xae
 8005e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00b      	beq.n	8005ebc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	32ae      	adds	r2, #174	; 0xae
 8005eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	78fa      	ldrb	r2, [r7, #3]
 8005eb6:	4611      	mov	r1, r2
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b082      	sub	sp, #8
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	460b      	mov	r3, r1
 8005ed0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	32ae      	adds	r2, #174	; 0xae
 8005edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e01c      	b.n	8005f22 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d115      	bne.n	8005f20 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	32ae      	adds	r2, #174	; 0xae
 8005efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00b      	beq.n	8005f20 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	32ae      	adds	r2, #174	; 0xae
 8005f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	78fa      	ldrb	r2, [r7, #3]
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00e      	beq.n	8005f7c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	6852      	ldr	r2, [r2, #4]
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	4611      	mov	r1, r2
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	4798      	blx	r3
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f92:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005fac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b086      	sub	sp, #24
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	885b      	ldrh	r3, [r3, #2]
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d920      	bls.n	8006024 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005fea:	e013      	b.n	8006014 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005fec:	f107 030a 	add.w	r3, r7, #10
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6978      	ldr	r0, [r7, #20]
 8005ff4:	f000 f81b 	bl	800602e <USBD_GetNextDesc>
 8005ff8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	785b      	ldrb	r3, [r3, #1]
 8005ffe:	2b05      	cmp	r3, #5
 8006000:	d108      	bne.n	8006014 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	789b      	ldrb	r3, [r3, #2]
 800600a:	78fa      	ldrb	r2, [r7, #3]
 800600c:	429a      	cmp	r2, r3
 800600e:	d008      	beq.n	8006022 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006010:	2300      	movs	r3, #0
 8006012:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	885b      	ldrh	r3, [r3, #2]
 8006018:	b29a      	uxth	r2, r3
 800601a:	897b      	ldrh	r3, [r7, #10]
 800601c:	429a      	cmp	r2, r3
 800601e:	d8e5      	bhi.n	8005fec <USBD_GetEpDesc+0x32>
 8006020:	e000      	b.n	8006024 <USBD_GetEpDesc+0x6a>
          break;
 8006022:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006024:	693b      	ldr	r3, [r7, #16]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3718      	adds	r7, #24
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800602e:	b480      	push	{r7}
 8006030:	b085      	sub	sp, #20
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	881a      	ldrh	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	b29b      	uxth	r3, r3
 8006046:	4413      	add	r3, r2
 8006048:	b29a      	uxth	r2, r3
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4413      	add	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800605a:	68fb      	ldr	r3, [r7, #12]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	3301      	adds	r3, #1
 800607e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006086:	8a3b      	ldrh	r3, [r7, #16]
 8006088:	021b      	lsls	r3, r3, #8
 800608a:	b21a      	sxth	r2, r3
 800608c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006090:	4313      	orrs	r3, r2
 8006092:	b21b      	sxth	r3, r3
 8006094:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006096:	89fb      	ldrh	r3, [r7, #14]
}
 8006098:	4618      	mov	r0, r3
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060ba:	2b40      	cmp	r3, #64	; 0x40
 80060bc:	d005      	beq.n	80060ca <USBD_StdDevReq+0x26>
 80060be:	2b40      	cmp	r3, #64	; 0x40
 80060c0:	d857      	bhi.n	8006172 <USBD_StdDevReq+0xce>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00f      	beq.n	80060e6 <USBD_StdDevReq+0x42>
 80060c6:	2b20      	cmp	r3, #32
 80060c8:	d153      	bne.n	8006172 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	32ae      	adds	r2, #174	; 0xae
 80060d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	6839      	ldr	r1, [r7, #0]
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	4798      	blx	r3
 80060e0:	4603      	mov	r3, r0
 80060e2:	73fb      	strb	r3, [r7, #15]
      break;
 80060e4:	e04a      	b.n	800617c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	785b      	ldrb	r3, [r3, #1]
 80060ea:	2b09      	cmp	r3, #9
 80060ec:	d83b      	bhi.n	8006166 <USBD_StdDevReq+0xc2>
 80060ee:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <USBD_StdDevReq+0x50>)
 80060f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f4:	08006149 	.word	0x08006149
 80060f8:	0800615d 	.word	0x0800615d
 80060fc:	08006167 	.word	0x08006167
 8006100:	08006153 	.word	0x08006153
 8006104:	08006167 	.word	0x08006167
 8006108:	08006127 	.word	0x08006127
 800610c:	0800611d 	.word	0x0800611d
 8006110:	08006167 	.word	0x08006167
 8006114:	0800613f 	.word	0x0800613f
 8006118:	08006131 	.word	0x08006131
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800611c:	6839      	ldr	r1, [r7, #0]
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fa3c 	bl	800659c <USBD_GetDescriptor>
          break;
 8006124:	e024      	b.n	8006170 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fba1 	bl	8006870 <USBD_SetAddress>
          break;
 800612e:	e01f      	b.n	8006170 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006130:	6839      	ldr	r1, [r7, #0]
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fbe0 	bl	80068f8 <USBD_SetConfig>
 8006138:	4603      	mov	r3, r0
 800613a:	73fb      	strb	r3, [r7, #15]
          break;
 800613c:	e018      	b.n	8006170 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800613e:	6839      	ldr	r1, [r7, #0]
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fc83 	bl	8006a4c <USBD_GetConfig>
          break;
 8006146:	e013      	b.n	8006170 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fcb4 	bl	8006ab8 <USBD_GetStatus>
          break;
 8006150:	e00e      	b.n	8006170 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006152:	6839      	ldr	r1, [r7, #0]
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fce3 	bl	8006b20 <USBD_SetFeature>
          break;
 800615a:	e009      	b.n	8006170 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800615c:	6839      	ldr	r1, [r7, #0]
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fd07 	bl	8006b72 <USBD_ClrFeature>
          break;
 8006164:	e004      	b.n	8006170 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006166:	6839      	ldr	r1, [r7, #0]
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fd5e 	bl	8006c2a <USBD_CtlError>
          break;
 800616e:	bf00      	nop
      }
      break;
 8006170:	e004      	b.n	800617c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fd58 	bl	8006c2a <USBD_CtlError>
      break;
 800617a:	bf00      	nop
  }

  return ret;
 800617c:	7bfb      	ldrb	r3, [r7, #15]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop

08006188 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800619e:	2b40      	cmp	r3, #64	; 0x40
 80061a0:	d005      	beq.n	80061ae <USBD_StdItfReq+0x26>
 80061a2:	2b40      	cmp	r3, #64	; 0x40
 80061a4:	d852      	bhi.n	800624c <USBD_StdItfReq+0xc4>
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <USBD_StdItfReq+0x26>
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	d14e      	bne.n	800624c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	3b01      	subs	r3, #1
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d840      	bhi.n	800623e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	889b      	ldrh	r3, [r3, #4]
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d836      	bhi.n	8006234 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	889b      	ldrh	r3, [r3, #4]
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	4619      	mov	r1, r3
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7ff fed9 	bl	8005f86 <USBD_CoreFindIF>
 80061d4:	4603      	mov	r3, r0
 80061d6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061d8:	7bbb      	ldrb	r3, [r7, #14]
 80061da:	2bff      	cmp	r3, #255	; 0xff
 80061dc:	d01d      	beq.n	800621a <USBD_StdItfReq+0x92>
 80061de:	7bbb      	ldrb	r3, [r7, #14]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d11a      	bne.n	800621a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80061e4:	7bba      	ldrb	r2, [r7, #14]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	32ae      	adds	r2, #174	; 0xae
 80061ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00f      	beq.n	8006214 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80061f4:	7bba      	ldrb	r2, [r7, #14]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80061fc:	7bba      	ldrb	r2, [r7, #14]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	32ae      	adds	r2, #174	; 0xae
 8006202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	4798      	blx	r3
 800620e:	4603      	mov	r3, r0
 8006210:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006212:	e004      	b.n	800621e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006214:	2303      	movs	r3, #3
 8006216:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006218:	e001      	b.n	800621e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800621a:	2303      	movs	r3, #3
 800621c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	88db      	ldrh	r3, [r3, #6]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d110      	bne.n	8006248 <USBD_StdItfReq+0xc0>
 8006226:	7bfb      	ldrb	r3, [r7, #15]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10d      	bne.n	8006248 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fdc7 	bl	8006dc0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006232:	e009      	b.n	8006248 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fcf7 	bl	8006c2a <USBD_CtlError>
          break;
 800623c:	e004      	b.n	8006248 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800623e:	6839      	ldr	r1, [r7, #0]
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fcf2 	bl	8006c2a <USBD_CtlError>
          break;
 8006246:	e000      	b.n	800624a <USBD_StdItfReq+0xc2>
          break;
 8006248:	bf00      	nop
      }
      break;
 800624a:	e004      	b.n	8006256 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fceb 	bl	8006c2a <USBD_CtlError>
      break;
 8006254:	bf00      	nop
  }

  return ret;
 8006256:	7bfb      	ldrb	r3, [r7, #15]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	889b      	ldrh	r3, [r3, #4]
 8006272:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800627c:	2b40      	cmp	r3, #64	; 0x40
 800627e:	d007      	beq.n	8006290 <USBD_StdEPReq+0x30>
 8006280:	2b40      	cmp	r3, #64	; 0x40
 8006282:	f200 817f 	bhi.w	8006584 <USBD_StdEPReq+0x324>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d02a      	beq.n	80062e0 <USBD_StdEPReq+0x80>
 800628a:	2b20      	cmp	r3, #32
 800628c:	f040 817a 	bne.w	8006584 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006290:	7bbb      	ldrb	r3, [r7, #14]
 8006292:	4619      	mov	r1, r3
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7ff fe83 	bl	8005fa0 <USBD_CoreFindEP>
 800629a:	4603      	mov	r3, r0
 800629c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800629e:	7b7b      	ldrb	r3, [r7, #13]
 80062a0:	2bff      	cmp	r3, #255	; 0xff
 80062a2:	f000 8174 	beq.w	800658e <USBD_StdEPReq+0x32e>
 80062a6:	7b7b      	ldrb	r3, [r7, #13]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f040 8170 	bne.w	800658e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80062ae:	7b7a      	ldrb	r2, [r7, #13]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80062b6:	7b7a      	ldrb	r2, [r7, #13]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	32ae      	adds	r2, #174	; 0xae
 80062bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 8163 	beq.w	800658e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80062c8:	7b7a      	ldrb	r2, [r7, #13]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	32ae      	adds	r2, #174	; 0xae
 80062ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	4798      	blx	r3
 80062da:	4603      	mov	r3, r0
 80062dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062de:	e156      	b.n	800658e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	785b      	ldrb	r3, [r3, #1]
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	d008      	beq.n	80062fa <USBD_StdEPReq+0x9a>
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	f300 8145 	bgt.w	8006578 <USBD_StdEPReq+0x318>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 809b 	beq.w	800642a <USBD_StdEPReq+0x1ca>
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d03c      	beq.n	8006372 <USBD_StdEPReq+0x112>
 80062f8:	e13e      	b.n	8006578 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d002      	beq.n	800630c <USBD_StdEPReq+0xac>
 8006306:	2b03      	cmp	r3, #3
 8006308:	d016      	beq.n	8006338 <USBD_StdEPReq+0xd8>
 800630a:	e02c      	b.n	8006366 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800630c:	7bbb      	ldrb	r3, [r7, #14]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00d      	beq.n	800632e <USBD_StdEPReq+0xce>
 8006312:	7bbb      	ldrb	r3, [r7, #14]
 8006314:	2b80      	cmp	r3, #128	; 0x80
 8006316:	d00a      	beq.n	800632e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006318:	7bbb      	ldrb	r3, [r7, #14]
 800631a:	4619      	mov	r1, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f001 f96d 	bl	80075fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006322:	2180      	movs	r1, #128	; 0x80
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f001 f969 	bl	80075fc <USBD_LL_StallEP>
 800632a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800632c:	e020      	b.n	8006370 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fc7a 	bl	8006c2a <USBD_CtlError>
              break;
 8006336:	e01b      	b.n	8006370 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	885b      	ldrh	r3, [r3, #2]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10e      	bne.n	800635e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006340:	7bbb      	ldrb	r3, [r7, #14]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00b      	beq.n	800635e <USBD_StdEPReq+0xfe>
 8006346:	7bbb      	ldrb	r3, [r7, #14]
 8006348:	2b80      	cmp	r3, #128	; 0x80
 800634a:	d008      	beq.n	800635e <USBD_StdEPReq+0xfe>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	88db      	ldrh	r3, [r3, #6]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006354:	7bbb      	ldrb	r3, [r7, #14]
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f001 f94f 	bl	80075fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fd2e 	bl	8006dc0 <USBD_CtlSendStatus>

              break;
 8006364:	e004      	b.n	8006370 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006366:	6839      	ldr	r1, [r7, #0]
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fc5e 	bl	8006c2a <USBD_CtlError>
              break;
 800636e:	bf00      	nop
          }
          break;
 8006370:	e107      	b.n	8006582 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d002      	beq.n	8006384 <USBD_StdEPReq+0x124>
 800637e:	2b03      	cmp	r3, #3
 8006380:	d016      	beq.n	80063b0 <USBD_StdEPReq+0x150>
 8006382:	e04b      	b.n	800641c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006384:	7bbb      	ldrb	r3, [r7, #14]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00d      	beq.n	80063a6 <USBD_StdEPReq+0x146>
 800638a:	7bbb      	ldrb	r3, [r7, #14]
 800638c:	2b80      	cmp	r3, #128	; 0x80
 800638e:	d00a      	beq.n	80063a6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006390:	7bbb      	ldrb	r3, [r7, #14]
 8006392:	4619      	mov	r1, r3
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f001 f931 	bl	80075fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800639a:	2180      	movs	r1, #128	; 0x80
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f001 f92d 	bl	80075fc <USBD_LL_StallEP>
 80063a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063a4:	e040      	b.n	8006428 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80063a6:	6839      	ldr	r1, [r7, #0]
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fc3e 	bl	8006c2a <USBD_CtlError>
              break;
 80063ae:	e03b      	b.n	8006428 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	885b      	ldrh	r3, [r3, #2]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d136      	bne.n	8006426 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80063b8:	7bbb      	ldrb	r3, [r7, #14]
 80063ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d004      	beq.n	80063cc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80063c2:	7bbb      	ldrb	r3, [r7, #14]
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f001 f937 	bl	800763a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fcf7 	bl	8006dc0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80063d2:	7bbb      	ldrb	r3, [r7, #14]
 80063d4:	4619      	mov	r1, r3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7ff fde2 	bl	8005fa0 <USBD_CoreFindEP>
 80063dc:	4603      	mov	r3, r0
 80063de:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063e0:	7b7b      	ldrb	r3, [r7, #13]
 80063e2:	2bff      	cmp	r3, #255	; 0xff
 80063e4:	d01f      	beq.n	8006426 <USBD_StdEPReq+0x1c6>
 80063e6:	7b7b      	ldrb	r3, [r7, #13]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d11c      	bne.n	8006426 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80063ec:	7b7a      	ldrb	r2, [r7, #13]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80063f4:	7b7a      	ldrb	r2, [r7, #13]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	32ae      	adds	r2, #174	; 0xae
 80063fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d010      	beq.n	8006426 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006404:	7b7a      	ldrb	r2, [r7, #13]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	32ae      	adds	r2, #174	; 0xae
 800640a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	4798      	blx	r3
 8006416:	4603      	mov	r3, r0
 8006418:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800641a:	e004      	b.n	8006426 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fc03 	bl	8006c2a <USBD_CtlError>
              break;
 8006424:	e000      	b.n	8006428 <USBD_StdEPReq+0x1c8>
              break;
 8006426:	bf00      	nop
          }
          break;
 8006428:	e0ab      	b.n	8006582 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d002      	beq.n	800643c <USBD_StdEPReq+0x1dc>
 8006436:	2b03      	cmp	r3, #3
 8006438:	d032      	beq.n	80064a0 <USBD_StdEPReq+0x240>
 800643a:	e097      	b.n	800656c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800643c:	7bbb      	ldrb	r3, [r7, #14]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d007      	beq.n	8006452 <USBD_StdEPReq+0x1f2>
 8006442:	7bbb      	ldrb	r3, [r7, #14]
 8006444:	2b80      	cmp	r3, #128	; 0x80
 8006446:	d004      	beq.n	8006452 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fbed 	bl	8006c2a <USBD_CtlError>
                break;
 8006450:	e091      	b.n	8006576 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006452:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006456:	2b00      	cmp	r3, #0
 8006458:	da0b      	bge.n	8006472 <USBD_StdEPReq+0x212>
 800645a:	7bbb      	ldrb	r3, [r7, #14]
 800645c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	3310      	adds	r3, #16
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	4413      	add	r3, r2
 800646e:	3304      	adds	r3, #4
 8006470:	e00b      	b.n	800648a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006472:	7bbb      	ldrb	r3, [r7, #14]
 8006474:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006478:	4613      	mov	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	4413      	add	r3, r2
 8006488:	3304      	adds	r3, #4
 800648a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2200      	movs	r2, #0
 8006490:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2202      	movs	r2, #2
 8006496:	4619      	mov	r1, r3
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fc37 	bl	8006d0c <USBD_CtlSendData>
              break;
 800649e:	e06a      	b.n	8006576 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80064a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	da11      	bge.n	80064cc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064a8:	7bbb      	ldrb	r3, [r7, #14]
 80064aa:	f003 020f 	and.w	r2, r3, #15
 80064ae:	6879      	ldr	r1, [r7, #4]
 80064b0:	4613      	mov	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	440b      	add	r3, r1
 80064ba:	3324      	adds	r3, #36	; 0x24
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d117      	bne.n	80064f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fbb0 	bl	8006c2a <USBD_CtlError>
                  break;
 80064ca:	e054      	b.n	8006576 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064cc:	7bbb      	ldrb	r3, [r7, #14]
 80064ce:	f003 020f 	and.w	r2, r3, #15
 80064d2:	6879      	ldr	r1, [r7, #4]
 80064d4:	4613      	mov	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	440b      	add	r3, r1
 80064de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d104      	bne.n	80064f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fb9d 	bl	8006c2a <USBD_CtlError>
                  break;
 80064f0:	e041      	b.n	8006576 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	da0b      	bge.n	8006512 <USBD_StdEPReq+0x2b2>
 80064fa:	7bbb      	ldrb	r3, [r7, #14]
 80064fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006500:	4613      	mov	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	3310      	adds	r3, #16
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	4413      	add	r3, r2
 800650e:	3304      	adds	r3, #4
 8006510:	e00b      	b.n	800652a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006512:	7bbb      	ldrb	r3, [r7, #14]
 8006514:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006518:	4613      	mov	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	4413      	add	r3, r2
 8006528:	3304      	adds	r3, #4
 800652a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800652c:	7bbb      	ldrb	r3, [r7, #14]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d002      	beq.n	8006538 <USBD_StdEPReq+0x2d8>
 8006532:	7bbb      	ldrb	r3, [r7, #14]
 8006534:	2b80      	cmp	r3, #128	; 0x80
 8006536:	d103      	bne.n	8006540 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2200      	movs	r2, #0
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	e00e      	b.n	800655e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006540:	7bbb      	ldrb	r3, [r7, #14]
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f001 f897 	bl	8007678 <USBD_LL_IsStallEP>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2201      	movs	r2, #1
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	e002      	b.n	800655e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2200      	movs	r2, #0
 800655c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	2202      	movs	r2, #2
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fbd1 	bl	8006d0c <USBD_CtlSendData>
              break;
 800656a:	e004      	b.n	8006576 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800656c:	6839      	ldr	r1, [r7, #0]
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fb5b 	bl	8006c2a <USBD_CtlError>
              break;
 8006574:	bf00      	nop
          }
          break;
 8006576:	e004      	b.n	8006582 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006578:	6839      	ldr	r1, [r7, #0]
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fb55 	bl	8006c2a <USBD_CtlError>
          break;
 8006580:	bf00      	nop
      }
      break;
 8006582:	e005      	b.n	8006590 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fb4f 	bl	8006c2a <USBD_CtlError>
      break;
 800658c:	e000      	b.n	8006590 <USBD_StdEPReq+0x330>
      break;
 800658e:	bf00      	nop
  }

  return ret;
 8006590:	7bfb      	ldrb	r3, [r7, #15]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	885b      	ldrh	r3, [r3, #2]
 80065b6:	0a1b      	lsrs	r3, r3, #8
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	3b01      	subs	r3, #1
 80065bc:	2b06      	cmp	r3, #6
 80065be:	f200 8128 	bhi.w	8006812 <USBD_GetDescriptor+0x276>
 80065c2:	a201      	add	r2, pc, #4	; (adr r2, 80065c8 <USBD_GetDescriptor+0x2c>)
 80065c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c8:	080065e5 	.word	0x080065e5
 80065cc:	080065fd 	.word	0x080065fd
 80065d0:	0800663d 	.word	0x0800663d
 80065d4:	08006813 	.word	0x08006813
 80065d8:	08006813 	.word	0x08006813
 80065dc:	080067b3 	.word	0x080067b3
 80065e0:	080067df 	.word	0x080067df
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	7c12      	ldrb	r2, [r2, #16]
 80065f0:	f107 0108 	add.w	r1, r7, #8
 80065f4:	4610      	mov	r0, r2
 80065f6:	4798      	blx	r3
 80065f8:	60f8      	str	r0, [r7, #12]
      break;
 80065fa:	e112      	b.n	8006822 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	7c1b      	ldrb	r3, [r3, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10d      	bne.n	8006620 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800660a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660c:	f107 0208 	add.w	r2, r7, #8
 8006610:	4610      	mov	r0, r2
 8006612:	4798      	blx	r3
 8006614:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	3301      	adds	r3, #1
 800661a:	2202      	movs	r2, #2
 800661c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800661e:	e100      	b.n	8006822 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	f107 0208 	add.w	r2, r7, #8
 800662c:	4610      	mov	r0, r2
 800662e:	4798      	blx	r3
 8006630:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3301      	adds	r3, #1
 8006636:	2202      	movs	r2, #2
 8006638:	701a      	strb	r2, [r3, #0]
      break;
 800663a:	e0f2      	b.n	8006822 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	885b      	ldrh	r3, [r3, #2]
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b05      	cmp	r3, #5
 8006644:	f200 80ac 	bhi.w	80067a0 <USBD_GetDescriptor+0x204>
 8006648:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <USBD_GetDescriptor+0xb4>)
 800664a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664e:	bf00      	nop
 8006650:	08006669 	.word	0x08006669
 8006654:	0800669d 	.word	0x0800669d
 8006658:	080066d1 	.word	0x080066d1
 800665c:	08006705 	.word	0x08006705
 8006660:	08006739 	.word	0x08006739
 8006664:	0800676d 	.word	0x0800676d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00b      	beq.n	800668c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	7c12      	ldrb	r2, [r2, #16]
 8006680:	f107 0108 	add.w	r1, r7, #8
 8006684:	4610      	mov	r0, r2
 8006686:	4798      	blx	r3
 8006688:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800668a:	e091      	b.n	80067b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800668c:	6839      	ldr	r1, [r7, #0]
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 facb 	bl	8006c2a <USBD_CtlError>
            err++;
 8006694:	7afb      	ldrb	r3, [r7, #11]
 8006696:	3301      	adds	r3, #1
 8006698:	72fb      	strb	r3, [r7, #11]
          break;
 800669a:	e089      	b.n	80067b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00b      	beq.n	80066c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	7c12      	ldrb	r2, [r2, #16]
 80066b4:	f107 0108 	add.w	r1, r7, #8
 80066b8:	4610      	mov	r0, r2
 80066ba:	4798      	blx	r3
 80066bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066be:	e077      	b.n	80067b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fab1 	bl	8006c2a <USBD_CtlError>
            err++;
 80066c8:	7afb      	ldrb	r3, [r7, #11]
 80066ca:	3301      	adds	r3, #1
 80066cc:	72fb      	strb	r3, [r7, #11]
          break;
 80066ce:	e06f      	b.n	80067b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00b      	beq.n	80066f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	7c12      	ldrb	r2, [r2, #16]
 80066e8:	f107 0108 	add.w	r1, r7, #8
 80066ec:	4610      	mov	r0, r2
 80066ee:	4798      	blx	r3
 80066f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066f2:	e05d      	b.n	80067b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fa97 	bl	8006c2a <USBD_CtlError>
            err++;
 80066fc:	7afb      	ldrb	r3, [r7, #11]
 80066fe:	3301      	adds	r3, #1
 8006700:	72fb      	strb	r3, [r7, #11]
          break;
 8006702:	e055      	b.n	80067b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00b      	beq.n	8006728 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	7c12      	ldrb	r2, [r2, #16]
 800671c:	f107 0108 	add.w	r1, r7, #8
 8006720:	4610      	mov	r0, r2
 8006722:	4798      	blx	r3
 8006724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006726:	e043      	b.n	80067b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fa7d 	bl	8006c2a <USBD_CtlError>
            err++;
 8006730:	7afb      	ldrb	r3, [r7, #11]
 8006732:	3301      	adds	r3, #1
 8006734:	72fb      	strb	r3, [r7, #11]
          break;
 8006736:	e03b      	b.n	80067b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00b      	beq.n	800675c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	7c12      	ldrb	r2, [r2, #16]
 8006750:	f107 0108 	add.w	r1, r7, #8
 8006754:	4610      	mov	r0, r2
 8006756:	4798      	blx	r3
 8006758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800675a:	e029      	b.n	80067b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fa63 	bl	8006c2a <USBD_CtlError>
            err++;
 8006764:	7afb      	ldrb	r3, [r7, #11]
 8006766:	3301      	adds	r3, #1
 8006768:	72fb      	strb	r3, [r7, #11]
          break;
 800676a:	e021      	b.n	80067b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00b      	beq.n	8006790 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	7c12      	ldrb	r2, [r2, #16]
 8006784:	f107 0108 	add.w	r1, r7, #8
 8006788:	4610      	mov	r0, r2
 800678a:	4798      	blx	r3
 800678c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800678e:	e00f      	b.n	80067b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006790:	6839      	ldr	r1, [r7, #0]
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fa49 	bl	8006c2a <USBD_CtlError>
            err++;
 8006798:	7afb      	ldrb	r3, [r7, #11]
 800679a:	3301      	adds	r3, #1
 800679c:	72fb      	strb	r3, [r7, #11]
          break;
 800679e:	e007      	b.n	80067b0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fa41 	bl	8006c2a <USBD_CtlError>
          err++;
 80067a8:	7afb      	ldrb	r3, [r7, #11]
 80067aa:	3301      	adds	r3, #1
 80067ac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80067ae:	bf00      	nop
      }
      break;
 80067b0:	e037      	b.n	8006822 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	7c1b      	ldrb	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d109      	bne.n	80067ce <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c2:	f107 0208 	add.w	r2, r7, #8
 80067c6:	4610      	mov	r0, r2
 80067c8:	4798      	blx	r3
 80067ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067cc:	e029      	b.n	8006822 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fa2a 	bl	8006c2a <USBD_CtlError>
        err++;
 80067d6:	7afb      	ldrb	r3, [r7, #11]
 80067d8:	3301      	adds	r3, #1
 80067da:	72fb      	strb	r3, [r7, #11]
      break;
 80067dc:	e021      	b.n	8006822 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	7c1b      	ldrb	r3, [r3, #16]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10d      	bne.n	8006802 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ee:	f107 0208 	add.w	r2, r7, #8
 80067f2:	4610      	mov	r0, r2
 80067f4:	4798      	blx	r3
 80067f6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	2207      	movs	r2, #7
 80067fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006800:	e00f      	b.n	8006822 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006802:	6839      	ldr	r1, [r7, #0]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fa10 	bl	8006c2a <USBD_CtlError>
        err++;
 800680a:	7afb      	ldrb	r3, [r7, #11]
 800680c:	3301      	adds	r3, #1
 800680e:	72fb      	strb	r3, [r7, #11]
      break;
 8006810:	e007      	b.n	8006822 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006812:	6839      	ldr	r1, [r7, #0]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fa08 	bl	8006c2a <USBD_CtlError>
      err++;
 800681a:	7afb      	ldrb	r3, [r7, #11]
 800681c:	3301      	adds	r3, #1
 800681e:	72fb      	strb	r3, [r7, #11]
      break;
 8006820:	bf00      	nop
  }

  if (err != 0U)
 8006822:	7afb      	ldrb	r3, [r7, #11]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d11e      	bne.n	8006866 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	88db      	ldrh	r3, [r3, #6]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d016      	beq.n	800685e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006830:	893b      	ldrh	r3, [r7, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00e      	beq.n	8006854 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	88da      	ldrh	r2, [r3, #6]
 800683a:	893b      	ldrh	r3, [r7, #8]
 800683c:	4293      	cmp	r3, r2
 800683e:	bf28      	it	cs
 8006840:	4613      	movcs	r3, r2
 8006842:	b29b      	uxth	r3, r3
 8006844:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006846:	893b      	ldrh	r3, [r7, #8]
 8006848:	461a      	mov	r2, r3
 800684a:	68f9      	ldr	r1, [r7, #12]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fa5d 	bl	8006d0c <USBD_CtlSendData>
 8006852:	e009      	b.n	8006868 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f9e7 	bl	8006c2a <USBD_CtlError>
 800685c:	e004      	b.n	8006868 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 faae 	bl	8006dc0 <USBD_CtlSendStatus>
 8006864:	e000      	b.n	8006868 <USBD_GetDescriptor+0x2cc>
    return;
 8006866:	bf00      	nop
  }
}
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop

08006870 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	889b      	ldrh	r3, [r3, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d131      	bne.n	80068e6 <USBD_SetAddress+0x76>
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	88db      	ldrh	r3, [r3, #6]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d12d      	bne.n	80068e6 <USBD_SetAddress+0x76>
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	885b      	ldrh	r3, [r3, #2]
 800688e:	2b7f      	cmp	r3, #127	; 0x7f
 8006890:	d829      	bhi.n	80068e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	885b      	ldrh	r3, [r3, #2]
 8006896:	b2db      	uxtb	r3, r3
 8006898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800689c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d104      	bne.n	80068b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f9bc 	bl	8006c2a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b2:	e01d      	b.n	80068f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	7bfa      	ldrb	r2, [r7, #15]
 80068b8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 ff05 	bl	80076d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fa7a 	bl	8006dc0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d004      	beq.n	80068dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2202      	movs	r2, #2
 80068d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068da:	e009      	b.n	80068f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e4:	e004      	b.n	80068f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f99e 	bl	8006c2a <USBD_CtlError>
  }
}
 80068ee:	bf00      	nop
 80068f0:	bf00      	nop
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006902:	2300      	movs	r3, #0
 8006904:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	885b      	ldrh	r3, [r3, #2]
 800690a:	b2da      	uxtb	r2, r3
 800690c:	4b4e      	ldr	r3, [pc, #312]	; (8006a48 <USBD_SetConfig+0x150>)
 800690e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006910:	4b4d      	ldr	r3, [pc, #308]	; (8006a48 <USBD_SetConfig+0x150>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d905      	bls.n	8006924 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f985 	bl	8006c2a <USBD_CtlError>
    return USBD_FAIL;
 8006920:	2303      	movs	r3, #3
 8006922:	e08c      	b.n	8006a3e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d002      	beq.n	8006936 <USBD_SetConfig+0x3e>
 8006930:	2b03      	cmp	r3, #3
 8006932:	d029      	beq.n	8006988 <USBD_SetConfig+0x90>
 8006934:	e075      	b.n	8006a22 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006936:	4b44      	ldr	r3, [pc, #272]	; (8006a48 <USBD_SetConfig+0x150>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d020      	beq.n	8006980 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800693e:	4b42      	ldr	r3, [pc, #264]	; (8006a48 <USBD_SetConfig+0x150>)
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006948:	4b3f      	ldr	r3, [pc, #252]	; (8006a48 <USBD_SetConfig+0x150>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7fe ffe1 	bl	8005916 <USBD_SetClassConfig>
 8006954:	4603      	mov	r3, r0
 8006956:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d008      	beq.n	8006970 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800695e:	6839      	ldr	r1, [r7, #0]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f962 	bl	8006c2a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2202      	movs	r2, #2
 800696a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800696e:	e065      	b.n	8006a3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fa25 	bl	8006dc0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2203      	movs	r2, #3
 800697a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800697e:	e05d      	b.n	8006a3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fa1d 	bl	8006dc0 <USBD_CtlSendStatus>
      break;
 8006986:	e059      	b.n	8006a3c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006988:	4b2f      	ldr	r3, [pc, #188]	; (8006a48 <USBD_SetConfig+0x150>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d112      	bne.n	80069b6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006998:	4b2b      	ldr	r3, [pc, #172]	; (8006a48 <USBD_SetConfig+0x150>)
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	461a      	mov	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069a2:	4b29      	ldr	r3, [pc, #164]	; (8006a48 <USBD_SetConfig+0x150>)
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7fe ffd0 	bl	800594e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fa06 	bl	8006dc0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069b4:	e042      	b.n	8006a3c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80069b6:	4b24      	ldr	r3, [pc, #144]	; (8006a48 <USBD_SetConfig+0x150>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	461a      	mov	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d02a      	beq.n	8006a1a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	4619      	mov	r1, r3
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7fe ffbe 	bl	800594e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80069d2:	4b1d      	ldr	r3, [pc, #116]	; (8006a48 <USBD_SetConfig+0x150>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069dc:	4b1a      	ldr	r3, [pc, #104]	; (8006a48 <USBD_SetConfig+0x150>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7fe ff97 	bl	8005916 <USBD_SetClassConfig>
 80069e8:	4603      	mov	r3, r0
 80069ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00f      	beq.n	8006a12 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f918 	bl	8006c2a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7fe ffa3 	bl	800594e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a10:	e014      	b.n	8006a3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f9d4 	bl	8006dc0 <USBD_CtlSendStatus>
      break;
 8006a18:	e010      	b.n	8006a3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f9d0 	bl	8006dc0 <USBD_CtlSendStatus>
      break;
 8006a20:	e00c      	b.n	8006a3c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f900 	bl	8006c2a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a2a:	4b07      	ldr	r3, [pc, #28]	; (8006a48 <USBD_SetConfig+0x150>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7fe ff8c 	bl	800594e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a36:	2303      	movs	r3, #3
 8006a38:	73fb      	strb	r3, [r7, #15]
      break;
 8006a3a:	bf00      	nop
  }

  return ret;
 8006a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	200001dc 	.word	0x200001dc

08006a4c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	88db      	ldrh	r3, [r3, #6]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d004      	beq.n	8006a68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f8e2 	bl	8006c2a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a66:	e023      	b.n	8006ab0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	dc02      	bgt.n	8006a7a <USBD_GetConfig+0x2e>
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	dc03      	bgt.n	8006a80 <USBD_GetConfig+0x34>
 8006a78:	e015      	b.n	8006aa6 <USBD_GetConfig+0x5a>
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	d00b      	beq.n	8006a96 <USBD_GetConfig+0x4a>
 8006a7e:	e012      	b.n	8006aa6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	3308      	adds	r3, #8
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f93c 	bl	8006d0c <USBD_CtlSendData>
        break;
 8006a94:	e00c      	b.n	8006ab0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f934 	bl	8006d0c <USBD_CtlSendData>
        break;
 8006aa4:	e004      	b.n	8006ab0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006aa6:	6839      	ldr	r1, [r7, #0]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f8be 	bl	8006c2a <USBD_CtlError>
        break;
 8006aae:	bf00      	nop
}
 8006ab0:	bf00      	nop
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	3b01      	subs	r3, #1
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d81e      	bhi.n	8006b0e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	88db      	ldrh	r3, [r3, #6]
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d004      	beq.n	8006ae2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f8a5 	bl	8006c2a <USBD_CtlError>
        break;
 8006ae0:	e01a      	b.n	8006b18 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d005      	beq.n	8006afe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f043 0202 	orr.w	r2, r3, #2
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	330c      	adds	r3, #12
 8006b02:	2202      	movs	r2, #2
 8006b04:	4619      	mov	r1, r3
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f900 	bl	8006d0c <USBD_CtlSendData>
      break;
 8006b0c:	e004      	b.n	8006b18 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f88a 	bl	8006c2a <USBD_CtlError>
      break;
 8006b16:	bf00      	nop
  }
}
 8006b18:	bf00      	nop
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	885b      	ldrh	r3, [r3, #2]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d107      	bne.n	8006b42 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f940 	bl	8006dc0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006b40:	e013      	b.n	8006b6a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	885b      	ldrh	r3, [r3, #2]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d10b      	bne.n	8006b62 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	889b      	ldrh	r3, [r3, #4]
 8006b4e:	0a1b      	lsrs	r3, r3, #8
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f930 	bl	8006dc0 <USBD_CtlSendStatus>
}
 8006b60:	e003      	b.n	8006b6a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f860 	bl	8006c2a <USBD_CtlError>
}
 8006b6a:	bf00      	nop
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b082      	sub	sp, #8
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	3b01      	subs	r3, #1
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d80b      	bhi.n	8006ba2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	885b      	ldrh	r3, [r3, #2]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d10c      	bne.n	8006bac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f910 	bl	8006dc0 <USBD_CtlSendStatus>
      }
      break;
 8006ba0:	e004      	b.n	8006bac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f840 	bl	8006c2a <USBD_CtlError>
      break;
 8006baa:	e000      	b.n	8006bae <USBD_ClrFeature+0x3c>
      break;
 8006bac:	bf00      	nop
  }
}
 8006bae:	bf00      	nop
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	781a      	ldrb	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	781a      	ldrb	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f7ff fa41 	bl	8006068 <SWAPBYTE>
 8006be6:	4603      	mov	r3, r0
 8006be8:	461a      	mov	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f7ff fa34 	bl	8006068 <SWAPBYTE>
 8006c00:	4603      	mov	r3, r0
 8006c02:	461a      	mov	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3301      	adds	r3, #1
 8006c12:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f7ff fa27 	bl	8006068 <SWAPBYTE>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	80da      	strh	r2, [r3, #6]
}
 8006c22:	bf00      	nop
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b082      	sub	sp, #8
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c34:	2180      	movs	r1, #128	; 0x80
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fce0 	bl	80075fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fcdc 	bl	80075fc <USBD_LL_StallEP>
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d036      	beq.n	8006cd0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c66:	6938      	ldr	r0, [r7, #16]
 8006c68:	f000 f836 	bl	8006cd8 <USBD_GetLen>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	3301      	adds	r3, #1
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c7a:	7dfb      	ldrb	r3, [r7, #23]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	4413      	add	r3, r2
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	7812      	ldrb	r2, [r2, #0]
 8006c84:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c86:	7dfb      	ldrb	r3, [r7, #23]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c8c:	7dfb      	ldrb	r3, [r7, #23]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	4413      	add	r3, r2
 8006c92:	2203      	movs	r2, #3
 8006c94:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c9c:	e013      	b.n	8006cc6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	7812      	ldrb	r2, [r2, #0]
 8006ca8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	3301      	adds	r3, #1
 8006cae:	613b      	str	r3, [r7, #16]
    idx++;
 8006cb0:	7dfb      	ldrb	r3, [r7, #23]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	4413      	add	r3, r2
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	701a      	strb	r2, [r3, #0]
    idx++;
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1e7      	bne.n	8006c9e <USBD_GetString+0x52>
 8006cce:	e000      	b.n	8006cd2 <USBD_GetString+0x86>
    return;
 8006cd0:	bf00      	nop
  }
}
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ce8:	e005      	b.n	8006cf6 <USBD_GetLen+0x1e>
  {
    len++;
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
 8006cec:	3301      	adds	r3, #1
 8006cee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1f5      	bne.n	8006cea <USBD_GetLen+0x12>
  }

  return len;
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	2100      	movs	r1, #0
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 fceb 	bl	800770e <USBD_LL_Transmit>

  return USBD_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b084      	sub	sp, #16
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	60f8      	str	r0, [r7, #12]
 8006d4a:	60b9      	str	r1, [r7, #8]
 8006d4c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	2100      	movs	r1, #0
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f000 fcda 	bl	800770e <USBD_LL_Transmit>

  return USBD_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2203      	movs	r2, #3
 8006d74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 fcde 	bl	8007750 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	60f8      	str	r0, [r7, #12]
 8006da6:	60b9      	str	r1, [r7, #8]
 8006da8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	2100      	movs	r1, #0
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 fccd 	bl	8007750 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2204      	movs	r2, #4
 8006dcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fc99 	bl	800770e <USBD_LL_Transmit>

  return USBD_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2205      	movs	r2, #5
 8006df2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006df6:	2300      	movs	r3, #0
 8006df8:	2200      	movs	r2, #0
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fca7 	bl	8007750 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e10:	2200      	movs	r2, #0
 8006e12:	4912      	ldr	r1, [pc, #72]	; (8006e5c <MX_USB_DEVICE_Init+0x50>)
 8006e14:	4812      	ldr	r0, [pc, #72]	; (8006e60 <MX_USB_DEVICE_Init+0x54>)
 8006e16:	f7fe fd01 	bl	800581c <USBD_Init>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e20:	f7f9 fe7e 	bl	8000b20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e24:	490f      	ldr	r1, [pc, #60]	; (8006e64 <MX_USB_DEVICE_Init+0x58>)
 8006e26:	480e      	ldr	r0, [pc, #56]	; (8006e60 <MX_USB_DEVICE_Init+0x54>)
 8006e28:	f7fe fd28 	bl	800587c <USBD_RegisterClass>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e32:	f7f9 fe75 	bl	8000b20 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e36:	490c      	ldr	r1, [pc, #48]	; (8006e68 <MX_USB_DEVICE_Init+0x5c>)
 8006e38:	4809      	ldr	r0, [pc, #36]	; (8006e60 <MX_USB_DEVICE_Init+0x54>)
 8006e3a:	f7fe fc1f 	bl	800567c <USBD_CDC_RegisterInterface>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e44:	f7f9 fe6c 	bl	8000b20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e48:	4805      	ldr	r0, [pc, #20]	; (8006e60 <MX_USB_DEVICE_Init+0x54>)
 8006e4a:	f7fe fd4d 	bl	80058e8 <USBD_Start>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e54:	f7f9 fe64 	bl	8000b20 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e58:	bf00      	nop
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	200000ac 	.word	0x200000ac
 8006e60:	200001e0 	.word	0x200001e0
 8006e64:	20000018 	.word	0x20000018
 8006e68:	20000098 	.word	0x20000098

08006e6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e70:	2200      	movs	r2, #0
 8006e72:	4905      	ldr	r1, [pc, #20]	; (8006e88 <CDC_Init_FS+0x1c>)
 8006e74:	4805      	ldr	r0, [pc, #20]	; (8006e8c <CDC_Init_FS+0x20>)
 8006e76:	f7fe fc1b 	bl	80056b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e7a:	4905      	ldr	r1, [pc, #20]	; (8006e90 <CDC_Init_FS+0x24>)
 8006e7c:	4803      	ldr	r0, [pc, #12]	; (8006e8c <CDC_Init_FS+0x20>)
 8006e7e:	f7fe fc39 	bl	80056f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	20000cbc 	.word	0x20000cbc
 8006e8c:	200001e0 	.word	0x200001e0
 8006e90:	200004bc 	.word	0x200004bc

08006e94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e94:	b480      	push	{r7}
 8006e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	4603      	mov	r3, r0
 8006eac:	6039      	str	r1, [r7, #0]
 8006eae:	71fb      	strb	r3, [r7, #7]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006eb4:	79fb      	ldrb	r3, [r7, #7]
 8006eb6:	2b23      	cmp	r3, #35	; 0x23
 8006eb8:	d84a      	bhi.n	8006f50 <CDC_Control_FS+0xac>
 8006eba:	a201      	add	r2, pc, #4	; (adr r2, 8006ec0 <CDC_Control_FS+0x1c>)
 8006ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec0:	08006f51 	.word	0x08006f51
 8006ec4:	08006f51 	.word	0x08006f51
 8006ec8:	08006f51 	.word	0x08006f51
 8006ecc:	08006f51 	.word	0x08006f51
 8006ed0:	08006f51 	.word	0x08006f51
 8006ed4:	08006f51 	.word	0x08006f51
 8006ed8:	08006f51 	.word	0x08006f51
 8006edc:	08006f51 	.word	0x08006f51
 8006ee0:	08006f51 	.word	0x08006f51
 8006ee4:	08006f51 	.word	0x08006f51
 8006ee8:	08006f51 	.word	0x08006f51
 8006eec:	08006f51 	.word	0x08006f51
 8006ef0:	08006f51 	.word	0x08006f51
 8006ef4:	08006f51 	.word	0x08006f51
 8006ef8:	08006f51 	.word	0x08006f51
 8006efc:	08006f51 	.word	0x08006f51
 8006f00:	08006f51 	.word	0x08006f51
 8006f04:	08006f51 	.word	0x08006f51
 8006f08:	08006f51 	.word	0x08006f51
 8006f0c:	08006f51 	.word	0x08006f51
 8006f10:	08006f51 	.word	0x08006f51
 8006f14:	08006f51 	.word	0x08006f51
 8006f18:	08006f51 	.word	0x08006f51
 8006f1c:	08006f51 	.word	0x08006f51
 8006f20:	08006f51 	.word	0x08006f51
 8006f24:	08006f51 	.word	0x08006f51
 8006f28:	08006f51 	.word	0x08006f51
 8006f2c:	08006f51 	.word	0x08006f51
 8006f30:	08006f51 	.word	0x08006f51
 8006f34:	08006f51 	.word	0x08006f51
 8006f38:	08006f51 	.word	0x08006f51
 8006f3c:	08006f51 	.word	0x08006f51
 8006f40:	08006f51 	.word	0x08006f51
 8006f44:	08006f51 	.word	0x08006f51
 8006f48:	08006f51 	.word	0x08006f51
 8006f4c:	08006f51 	.word	0x08006f51
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f50:	bf00      	nop
  }

  return (USBD_OK);
 8006f52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f6a:	6879      	ldr	r1, [r7, #4]
 8006f6c:	4805      	ldr	r0, [pc, #20]	; (8006f84 <CDC_Receive_FS+0x24>)
 8006f6e:	f7fe fbc1 	bl	80056f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f72:	4804      	ldr	r0, [pc, #16]	; (8006f84 <CDC_Receive_FS+0x24>)
 8006f74:	f7fe fc1c 	bl	80057b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006f78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	200001e0 	.word	0x200001e0

08006f88 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006f94:	2300      	movs	r3, #0
 8006f96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006f98:	4b0d      	ldr	r3, [pc, #52]	; (8006fd0 <CDC_Transmit_FS+0x48>)
 8006f9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f9e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e00b      	b.n	8006fc6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006fae:	887b      	ldrh	r3, [r7, #2]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	6879      	ldr	r1, [r7, #4]
 8006fb4:	4806      	ldr	r0, [pc, #24]	; (8006fd0 <CDC_Transmit_FS+0x48>)
 8006fb6:	f7fe fb7b 	bl	80056b0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006fba:	4805      	ldr	r0, [pc, #20]	; (8006fd0 <CDC_Transmit_FS+0x48>)
 8006fbc:	f7fe fbb8 	bl	8005730 <USBD_CDC_TransmitPacket>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	200001e0 	.word	0x200001e0

08006fd4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006fe6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	371c      	adds	r7, #28
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
	...

08006ff8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	4603      	mov	r3, r0
 8007000:	6039      	str	r1, [r7, #0]
 8007002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	2212      	movs	r2, #18
 8007008:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800700a:	4b03      	ldr	r3, [pc, #12]	; (8007018 <USBD_FS_DeviceDescriptor+0x20>)
}
 800700c:	4618      	mov	r0, r3
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	200000c8 	.word	0x200000c8

0800701c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	4603      	mov	r3, r0
 8007024:	6039      	str	r1, [r7, #0]
 8007026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	2204      	movs	r2, #4
 800702c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800702e:	4b03      	ldr	r3, [pc, #12]	; (800703c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007030:	4618      	mov	r0, r3
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	200000dc 	.word	0x200000dc

08007040 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	4603      	mov	r3, r0
 8007048:	6039      	str	r1, [r7, #0]
 800704a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800704c:	79fb      	ldrb	r3, [r7, #7]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d105      	bne.n	800705e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	4907      	ldr	r1, [pc, #28]	; (8007074 <USBD_FS_ProductStrDescriptor+0x34>)
 8007056:	4808      	ldr	r0, [pc, #32]	; (8007078 <USBD_FS_ProductStrDescriptor+0x38>)
 8007058:	f7ff fdf8 	bl	8006c4c <USBD_GetString>
 800705c:	e004      	b.n	8007068 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	4904      	ldr	r1, [pc, #16]	; (8007074 <USBD_FS_ProductStrDescriptor+0x34>)
 8007062:	4805      	ldr	r0, [pc, #20]	; (8007078 <USBD_FS_ProductStrDescriptor+0x38>)
 8007064:	f7ff fdf2 	bl	8006c4c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007068:	4b02      	ldr	r3, [pc, #8]	; (8007074 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800706a:	4618      	mov	r0, r3
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	200014bc 	.word	0x200014bc
 8007078:	08008218 	.word	0x08008218

0800707c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	4603      	mov	r3, r0
 8007084:	6039      	str	r1, [r7, #0]
 8007086:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	4904      	ldr	r1, [pc, #16]	; (800709c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800708c:	4804      	ldr	r0, [pc, #16]	; (80070a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800708e:	f7ff fddd 	bl	8006c4c <USBD_GetString>
  return USBD_StrDesc;
 8007092:	4b02      	ldr	r3, [pc, #8]	; (800709c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007094:	4618      	mov	r0, r3
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	200014bc 	.word	0x200014bc
 80070a0:	0800822c 	.word	0x0800822c

080070a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	4603      	mov	r3, r0
 80070ac:	6039      	str	r1, [r7, #0]
 80070ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	221a      	movs	r2, #26
 80070b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80070b6:	f000 f843 	bl	8007140 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80070ba:	4b02      	ldr	r3, [pc, #8]	; (80070c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	200000e0 	.word	0x200000e0

080070c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	4603      	mov	r3, r0
 80070d0:	6039      	str	r1, [r7, #0]
 80070d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80070d4:	79fb      	ldrb	r3, [r7, #7]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d105      	bne.n	80070e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	4907      	ldr	r1, [pc, #28]	; (80070fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80070de:	4808      	ldr	r0, [pc, #32]	; (8007100 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070e0:	f7ff fdb4 	bl	8006c4c <USBD_GetString>
 80070e4:	e004      	b.n	80070f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	4904      	ldr	r1, [pc, #16]	; (80070fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80070ea:	4805      	ldr	r0, [pc, #20]	; (8007100 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070ec:	f7ff fdae 	bl	8006c4c <USBD_GetString>
  }
  return USBD_StrDesc;
 80070f0:	4b02      	ldr	r3, [pc, #8]	; (80070fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	200014bc 	.word	0x200014bc
 8007100:	08008240 	.word	0x08008240

08007104 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	6039      	str	r1, [r7, #0]
 800710e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007110:	79fb      	ldrb	r3, [r7, #7]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d105      	bne.n	8007122 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	4907      	ldr	r1, [pc, #28]	; (8007138 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800711a:	4808      	ldr	r0, [pc, #32]	; (800713c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800711c:	f7ff fd96 	bl	8006c4c <USBD_GetString>
 8007120:	e004      	b.n	800712c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	4904      	ldr	r1, [pc, #16]	; (8007138 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007126:	4805      	ldr	r0, [pc, #20]	; (800713c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007128:	f7ff fd90 	bl	8006c4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800712c:	4b02      	ldr	r3, [pc, #8]	; (8007138 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	200014bc 	.word	0x200014bc
 800713c:	0800824c 	.word	0x0800824c

08007140 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007146:	4b0f      	ldr	r3, [pc, #60]	; (8007184 <Get_SerialNum+0x44>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800714c:	4b0e      	ldr	r3, [pc, #56]	; (8007188 <Get_SerialNum+0x48>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007152:	4b0e      	ldr	r3, [pc, #56]	; (800718c <Get_SerialNum+0x4c>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4413      	add	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d009      	beq.n	800717a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007166:	2208      	movs	r2, #8
 8007168:	4909      	ldr	r1, [pc, #36]	; (8007190 <Get_SerialNum+0x50>)
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 f814 	bl	8007198 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007170:	2204      	movs	r2, #4
 8007172:	4908      	ldr	r1, [pc, #32]	; (8007194 <Get_SerialNum+0x54>)
 8007174:	68b8      	ldr	r0, [r7, #8]
 8007176:	f000 f80f 	bl	8007198 <IntToUnicode>
  }
}
 800717a:	bf00      	nop
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	1fff7a10 	.word	0x1fff7a10
 8007188:	1fff7a14 	.word	0x1fff7a14
 800718c:	1fff7a18 	.word	0x1fff7a18
 8007190:	200000e2 	.word	0x200000e2
 8007194:	200000f2 	.word	0x200000f2

08007198 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	4613      	mov	r3, r2
 80071a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80071aa:	2300      	movs	r3, #0
 80071ac:	75fb      	strb	r3, [r7, #23]
 80071ae:	e027      	b.n	8007200 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	0f1b      	lsrs	r3, r3, #28
 80071b4:	2b09      	cmp	r3, #9
 80071b6:	d80b      	bhi.n	80071d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	0f1b      	lsrs	r3, r3, #28
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	7dfb      	ldrb	r3, [r7, #23]
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	4619      	mov	r1, r3
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	440b      	add	r3, r1
 80071c8:	3230      	adds	r2, #48	; 0x30
 80071ca:	b2d2      	uxtb	r2, r2
 80071cc:	701a      	strb	r2, [r3, #0]
 80071ce:	e00a      	b.n	80071e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	0f1b      	lsrs	r3, r3, #28
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	7dfb      	ldrb	r3, [r7, #23]
 80071d8:	005b      	lsls	r3, r3, #1
 80071da:	4619      	mov	r1, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	440b      	add	r3, r1
 80071e0:	3237      	adds	r2, #55	; 0x37
 80071e2:	b2d2      	uxtb	r2, r2
 80071e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	011b      	lsls	r3, r3, #4
 80071ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	3301      	adds	r3, #1
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	4413      	add	r3, r2
 80071f6:	2200      	movs	r2, #0
 80071f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
 80071fc:	3301      	adds	r3, #1
 80071fe:	75fb      	strb	r3, [r7, #23]
 8007200:	7dfa      	ldrb	r2, [r7, #23]
 8007202:	79fb      	ldrb	r3, [r7, #7]
 8007204:	429a      	cmp	r2, r3
 8007206:	d3d3      	bcc.n	80071b0 <IntToUnicode+0x18>
  }
}
 8007208:	bf00      	nop
 800720a:	bf00      	nop
 800720c:	371c      	adds	r7, #28
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
	...

08007218 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08a      	sub	sp, #40	; 0x28
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007220:	f107 0314 	add.w	r3, r7, #20
 8007224:	2200      	movs	r2, #0
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	605a      	str	r2, [r3, #4]
 800722a:	609a      	str	r2, [r3, #8]
 800722c:	60da      	str	r2, [r3, #12]
 800722e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007238:	d13a      	bne.n	80072b0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800723a:	2300      	movs	r3, #0
 800723c:	613b      	str	r3, [r7, #16]
 800723e:	4b1e      	ldr	r3, [pc, #120]	; (80072b8 <HAL_PCD_MspInit+0xa0>)
 8007240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007242:	4a1d      	ldr	r2, [pc, #116]	; (80072b8 <HAL_PCD_MspInit+0xa0>)
 8007244:	f043 0301 	orr.w	r3, r3, #1
 8007248:	6313      	str	r3, [r2, #48]	; 0x30
 800724a:	4b1b      	ldr	r3, [pc, #108]	; (80072b8 <HAL_PCD_MspInit+0xa0>)
 800724c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	613b      	str	r3, [r7, #16]
 8007254:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007256:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800725a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800725c:	2302      	movs	r3, #2
 800725e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007260:	2300      	movs	r3, #0
 8007262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007264:	2303      	movs	r3, #3
 8007266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007268:	230a      	movs	r3, #10
 800726a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800726c:	f107 0314 	add.w	r3, r7, #20
 8007270:	4619      	mov	r1, r3
 8007272:	4812      	ldr	r0, [pc, #72]	; (80072bc <HAL_PCD_MspInit+0xa4>)
 8007274:	f7f9 fef0 	bl	8001058 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007278:	4b0f      	ldr	r3, [pc, #60]	; (80072b8 <HAL_PCD_MspInit+0xa0>)
 800727a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727c:	4a0e      	ldr	r2, [pc, #56]	; (80072b8 <HAL_PCD_MspInit+0xa0>)
 800727e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007282:	6353      	str	r3, [r2, #52]	; 0x34
 8007284:	2300      	movs	r3, #0
 8007286:	60fb      	str	r3, [r7, #12]
 8007288:	4b0b      	ldr	r3, [pc, #44]	; (80072b8 <HAL_PCD_MspInit+0xa0>)
 800728a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800728c:	4a0a      	ldr	r2, [pc, #40]	; (80072b8 <HAL_PCD_MspInit+0xa0>)
 800728e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007292:	6453      	str	r3, [r2, #68]	; 0x44
 8007294:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <HAL_PCD_MspInit+0xa0>)
 8007296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800729c:	60fb      	str	r3, [r7, #12]
 800729e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80072a0:	2200      	movs	r2, #0
 80072a2:	2100      	movs	r1, #0
 80072a4:	2043      	movs	r0, #67	; 0x43
 80072a6:	f7f9 fea0 	bl	8000fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80072aa:	2043      	movs	r0, #67	; 0x43
 80072ac:	f7f9 feb9 	bl	8001022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80072b0:	bf00      	nop
 80072b2:	3728      	adds	r7, #40	; 0x28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	40023800 	.word	0x40023800
 80072bc:	40020000 	.word	0x40020000

080072c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80072d4:	4619      	mov	r1, r3
 80072d6:	4610      	mov	r0, r2
 80072d8:	f7fe fb53 	bl	8005982 <USBD_LL_SetupStage>
}
 80072dc:	bf00      	nop
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80072f6:	78fa      	ldrb	r2, [r7, #3]
 80072f8:	6879      	ldr	r1, [r7, #4]
 80072fa:	4613      	mov	r3, r2
 80072fc:	00db      	lsls	r3, r3, #3
 80072fe:	4413      	add	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	440b      	add	r3, r1
 8007304:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	78fb      	ldrb	r3, [r7, #3]
 800730c:	4619      	mov	r1, r3
 800730e:	f7fe fb8d 	bl	8005a2c <USBD_LL_DataOutStage>
}
 8007312:	bf00      	nop
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b082      	sub	sp, #8
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	460b      	mov	r3, r1
 8007324:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800732c:	78fa      	ldrb	r2, [r7, #3]
 800732e:	6879      	ldr	r1, [r7, #4]
 8007330:	4613      	mov	r3, r2
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	4413      	add	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	440b      	add	r3, r1
 800733a:	3320      	adds	r3, #32
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	78fb      	ldrb	r3, [r7, #3]
 8007340:	4619      	mov	r1, r3
 8007342:	f7fe fc26 	bl	8005b92 <USBD_LL_DataInStage>
}
 8007346:	bf00      	nop
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b082      	sub	sp, #8
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800735c:	4618      	mov	r0, r3
 800735e:	f7fe fd60 	bl	8005e22 <USBD_LL_SOF>
}
 8007362:	bf00      	nop
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007372:	2301      	movs	r3, #1
 8007374:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	79db      	ldrb	r3, [r3, #7]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d102      	bne.n	8007384 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800737e:	2300      	movs	r3, #0
 8007380:	73fb      	strb	r3, [r7, #15]
 8007382:	e008      	b.n	8007396 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	79db      	ldrb	r3, [r3, #7]
 8007388:	2b02      	cmp	r3, #2
 800738a:	d102      	bne.n	8007392 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800738c:	2301      	movs	r3, #1
 800738e:	73fb      	strb	r3, [r7, #15]
 8007390:	e001      	b.n	8007396 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007392:	f7f9 fbc5 	bl	8000b20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800739c:	7bfa      	ldrb	r2, [r7, #15]
 800739e:	4611      	mov	r1, r2
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fe fcfa 	bl	8005d9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7fe fca2 	bl	8005cf6 <USBD_LL_Reset>
}
 80073b2:	bf00      	nop
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
	...

080073bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fe fcf5 	bl	8005dba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	6812      	ldr	r2, [r2, #0]
 80073de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073e2:	f043 0301 	orr.w	r3, r3, #1
 80073e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	7adb      	ldrb	r3, [r3, #11]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d005      	beq.n	80073fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80073f0:	4b04      	ldr	r3, [pc, #16]	; (8007404 <HAL_PCD_SuspendCallback+0x48>)
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	4a03      	ldr	r2, [pc, #12]	; (8007404 <HAL_PCD_SuspendCallback+0x48>)
 80073f6:	f043 0306 	orr.w	r3, r3, #6
 80073fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80073fc:	bf00      	nop
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	e000ed00 	.word	0xe000ed00

08007408 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007416:	4618      	mov	r0, r3
 8007418:	f7fe fceb 	bl	8005df2 <USBD_LL_Resume>
}
 800741c:	bf00      	nop
 800741e:	3708      	adds	r7, #8
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	460b      	mov	r3, r1
 800742e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007436:	78fa      	ldrb	r2, [r7, #3]
 8007438:	4611      	mov	r1, r2
 800743a:	4618      	mov	r0, r3
 800743c:	f7fe fd43 	bl	8005ec6 <USBD_LL_IsoOUTIncomplete>
}
 8007440:	bf00      	nop
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	460b      	mov	r3, r1
 8007452:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800745a:	78fa      	ldrb	r2, [r7, #3]
 800745c:	4611      	mov	r1, r2
 800745e:	4618      	mov	r0, r3
 8007460:	f7fe fcff 	bl	8005e62 <USBD_LL_IsoINIncomplete>
}
 8007464:	bf00      	nop
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800747a:	4618      	mov	r0, r3
 800747c:	f7fe fd55 	bl	8005f2a <USBD_LL_DevConnected>
}
 8007480:	bf00      	nop
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007496:	4618      	mov	r0, r3
 8007498:	f7fe fd52 	bl	8005f40 <USBD_LL_DevDisconnected>
}
 800749c:	bf00      	nop
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d13c      	bne.n	800752e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80074b4:	4a20      	ldr	r2, [pc, #128]	; (8007538 <USBD_LL_Init+0x94>)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a1e      	ldr	r2, [pc, #120]	; (8007538 <USBD_LL_Init+0x94>)
 80074c0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80074c4:	4b1c      	ldr	r3, [pc, #112]	; (8007538 <USBD_LL_Init+0x94>)
 80074c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80074ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80074cc:	4b1a      	ldr	r3, [pc, #104]	; (8007538 <USBD_LL_Init+0x94>)
 80074ce:	2204      	movs	r2, #4
 80074d0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80074d2:	4b19      	ldr	r3, [pc, #100]	; (8007538 <USBD_LL_Init+0x94>)
 80074d4:	2202      	movs	r2, #2
 80074d6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074d8:	4b17      	ldr	r3, [pc, #92]	; (8007538 <USBD_LL_Init+0x94>)
 80074da:	2200      	movs	r2, #0
 80074dc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80074de:	4b16      	ldr	r3, [pc, #88]	; (8007538 <USBD_LL_Init+0x94>)
 80074e0:	2202      	movs	r2, #2
 80074e2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074e4:	4b14      	ldr	r3, [pc, #80]	; (8007538 <USBD_LL_Init+0x94>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80074ea:	4b13      	ldr	r3, [pc, #76]	; (8007538 <USBD_LL_Init+0x94>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80074f0:	4b11      	ldr	r3, [pc, #68]	; (8007538 <USBD_LL_Init+0x94>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80074f6:	4b10      	ldr	r3, [pc, #64]	; (8007538 <USBD_LL_Init+0x94>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80074fc:	4b0e      	ldr	r3, [pc, #56]	; (8007538 <USBD_LL_Init+0x94>)
 80074fe:	2200      	movs	r2, #0
 8007500:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007502:	480d      	ldr	r0, [pc, #52]	; (8007538 <USBD_LL_Init+0x94>)
 8007504:	f7f9 ff75 	bl	80013f2 <HAL_PCD_Init>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800750e:	f7f9 fb07 	bl	8000b20 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007512:	2180      	movs	r1, #128	; 0x80
 8007514:	4808      	ldr	r0, [pc, #32]	; (8007538 <USBD_LL_Init+0x94>)
 8007516:	f7fb f9a0 	bl	800285a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800751a:	2240      	movs	r2, #64	; 0x40
 800751c:	2100      	movs	r1, #0
 800751e:	4806      	ldr	r0, [pc, #24]	; (8007538 <USBD_LL_Init+0x94>)
 8007520:	f7fb f954 	bl	80027cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007524:	2280      	movs	r2, #128	; 0x80
 8007526:	2101      	movs	r1, #1
 8007528:	4803      	ldr	r0, [pc, #12]	; (8007538 <USBD_LL_Init+0x94>)
 800752a:	f7fb f94f 	bl	80027cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	200016bc 	.word	0x200016bc

0800753c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007552:	4618      	mov	r0, r3
 8007554:	f7fa f85c 	bl	8001610 <HAL_PCD_Start>
 8007558:	4603      	mov	r3, r0
 800755a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800755c:	7bfb      	ldrb	r3, [r7, #15]
 800755e:	4618      	mov	r0, r3
 8007560:	f000 f942 	bl	80077e8 <USBD_Get_USB_Status>
 8007564:	4603      	mov	r3, r0
 8007566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007568:	7bbb      	ldrb	r3, [r7, #14]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b084      	sub	sp, #16
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
 800757a:	4608      	mov	r0, r1
 800757c:	4611      	mov	r1, r2
 800757e:	461a      	mov	r2, r3
 8007580:	4603      	mov	r3, r0
 8007582:	70fb      	strb	r3, [r7, #3]
 8007584:	460b      	mov	r3, r1
 8007586:	70bb      	strb	r3, [r7, #2]
 8007588:	4613      	mov	r3, r2
 800758a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800758c:	2300      	movs	r3, #0
 800758e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800759a:	78bb      	ldrb	r3, [r7, #2]
 800759c:	883a      	ldrh	r2, [r7, #0]
 800759e:	78f9      	ldrb	r1, [r7, #3]
 80075a0:	f7fa fd30 	bl	8002004 <HAL_PCD_EP_Open>
 80075a4:	4603      	mov	r3, r0
 80075a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 f91c 	bl	80077e8 <USBD_Get_USB_Status>
 80075b0:	4603      	mov	r3, r0
 80075b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	460b      	mov	r3, r1
 80075c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075d8:	78fa      	ldrb	r2, [r7, #3]
 80075da:	4611      	mov	r1, r2
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fa fd79 	bl	80020d4 <HAL_PCD_EP_Close>
 80075e2:	4603      	mov	r3, r0
 80075e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 f8fd 	bl	80077e8 <USBD_Get_USB_Status>
 80075ee:	4603      	mov	r3, r0
 80075f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	460b      	mov	r3, r1
 8007606:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007608:	2300      	movs	r3, #0
 800760a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800760c:	2300      	movs	r3, #0
 800760e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007616:	78fa      	ldrb	r2, [r7, #3]
 8007618:	4611      	mov	r1, r2
 800761a:	4618      	mov	r0, r3
 800761c:	f7fa fe31 	bl	8002282 <HAL_PCD_EP_SetStall>
 8007620:	4603      	mov	r3, r0
 8007622:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007624:	7bfb      	ldrb	r3, [r7, #15]
 8007626:	4618      	mov	r0, r3
 8007628:	f000 f8de 	bl	80077e8 <USBD_Get_USB_Status>
 800762c:	4603      	mov	r3, r0
 800762e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007630:	7bbb      	ldrb	r3, [r7, #14]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b084      	sub	sp, #16
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	460b      	mov	r3, r1
 8007644:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007654:	78fa      	ldrb	r2, [r7, #3]
 8007656:	4611      	mov	r1, r2
 8007658:	4618      	mov	r0, r3
 800765a:	f7fa fe75 	bl	8002348 <HAL_PCD_EP_ClrStall>
 800765e:	4603      	mov	r3, r0
 8007660:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007662:	7bfb      	ldrb	r3, [r7, #15]
 8007664:	4618      	mov	r0, r3
 8007666:	f000 f8bf 	bl	80077e8 <USBD_Get_USB_Status>
 800766a:	4603      	mov	r3, r0
 800766c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800766e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800768a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800768c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007690:	2b00      	cmp	r3, #0
 8007692:	da0b      	bge.n	80076ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007694:	78fb      	ldrb	r3, [r7, #3]
 8007696:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800769a:	68f9      	ldr	r1, [r7, #12]
 800769c:	4613      	mov	r3, r2
 800769e:	00db      	lsls	r3, r3, #3
 80076a0:	4413      	add	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	440b      	add	r3, r1
 80076a6:	3316      	adds	r3, #22
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	e00b      	b.n	80076c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80076ac:	78fb      	ldrb	r3, [r7, #3]
 80076ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076b2:	68f9      	ldr	r1, [r7, #12]
 80076b4:	4613      	mov	r3, r2
 80076b6:	00db      	lsls	r3, r3, #3
 80076b8:	4413      	add	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	440b      	add	r3, r1
 80076be:	f203 2356 	addw	r3, r3, #598	; 0x256
 80076c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076ea:	78fa      	ldrb	r2, [r7, #3]
 80076ec:	4611      	mov	r1, r2
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fa fc64 	bl	8001fbc <HAL_PCD_SetAddress>
 80076f4:	4603      	mov	r3, r0
 80076f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 f874 	bl	80077e8 <USBD_Get_USB_Status>
 8007700:	4603      	mov	r3, r0
 8007702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007704:	7bbb      	ldrb	r3, [r7, #14]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b086      	sub	sp, #24
 8007712:	af00      	add	r7, sp, #0
 8007714:	60f8      	str	r0, [r7, #12]
 8007716:	607a      	str	r2, [r7, #4]
 8007718:	603b      	str	r3, [r7, #0]
 800771a:	460b      	mov	r3, r1
 800771c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800772c:	7af9      	ldrb	r1, [r7, #11]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	f7fa fd6c 	bl	800220e <HAL_PCD_EP_Transmit>
 8007736:	4603      	mov	r3, r0
 8007738:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800773a:	7dfb      	ldrb	r3, [r7, #23]
 800773c:	4618      	mov	r0, r3
 800773e:	f000 f853 	bl	80077e8 <USBD_Get_USB_Status>
 8007742:	4603      	mov	r3, r0
 8007744:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007746:	7dbb      	ldrb	r3, [r7, #22]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3718      	adds	r7, #24
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	607a      	str	r2, [r7, #4]
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	460b      	mov	r3, r1
 800775e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800776e:	7af9      	ldrb	r1, [r7, #11]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	f7fa fcf8 	bl	8002168 <HAL_PCD_EP_Receive>
 8007778:	4603      	mov	r3, r0
 800777a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800777c:	7dfb      	ldrb	r3, [r7, #23]
 800777e:	4618      	mov	r0, r3
 8007780:	f000 f832 	bl	80077e8 <USBD_Get_USB_Status>
 8007784:	4603      	mov	r3, r0
 8007786:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007788:	7dbb      	ldrb	r3, [r7, #22]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3718      	adds	r7, #24
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b082      	sub	sp, #8
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	460b      	mov	r3, r1
 800779c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077a4:	78fa      	ldrb	r2, [r7, #3]
 80077a6:	4611      	mov	r1, r2
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fa fd18 	bl	80021de <HAL_PCD_EP_GetRxCount>
 80077ae:	4603      	mov	r3, r0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80077c0:	4b03      	ldr	r3, [pc, #12]	; (80077d0 <USBD_static_malloc+0x18>)
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	20001ba0 	.word	0x20001ba0

080077d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]

}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	4603      	mov	r3, r0
 80077f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80077f6:	79fb      	ldrb	r3, [r7, #7]
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	d817      	bhi.n	800782c <USBD_Get_USB_Status+0x44>
 80077fc:	a201      	add	r2, pc, #4	; (adr r2, 8007804 <USBD_Get_USB_Status+0x1c>)
 80077fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007802:	bf00      	nop
 8007804:	08007815 	.word	0x08007815
 8007808:	0800781b 	.word	0x0800781b
 800780c:	08007821 	.word	0x08007821
 8007810:	08007827 	.word	0x08007827
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	73fb      	strb	r3, [r7, #15]
    break;
 8007818:	e00b      	b.n	8007832 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800781a:	2303      	movs	r3, #3
 800781c:	73fb      	strb	r3, [r7, #15]
    break;
 800781e:	e008      	b.n	8007832 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007820:	2301      	movs	r3, #1
 8007822:	73fb      	strb	r3, [r7, #15]
    break;
 8007824:	e005      	b.n	8007832 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007826:	2303      	movs	r3, #3
 8007828:	73fb      	strb	r3, [r7, #15]
    break;
 800782a:	e002      	b.n	8007832 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800782c:	2303      	movs	r3, #3
 800782e:	73fb      	strb	r3, [r7, #15]
    break;
 8007830:	bf00      	nop
  }
  return usb_status;
 8007832:	7bfb      	ldrb	r3, [r7, #15]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <sniprintf>:
 8007840:	b40c      	push	{r2, r3}
 8007842:	b530      	push	{r4, r5, lr}
 8007844:	4b17      	ldr	r3, [pc, #92]	; (80078a4 <sniprintf+0x64>)
 8007846:	1e0c      	subs	r4, r1, #0
 8007848:	681d      	ldr	r5, [r3, #0]
 800784a:	b09d      	sub	sp, #116	; 0x74
 800784c:	da08      	bge.n	8007860 <sniprintf+0x20>
 800784e:	238b      	movs	r3, #139	; 0x8b
 8007850:	602b      	str	r3, [r5, #0]
 8007852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007856:	b01d      	add	sp, #116	; 0x74
 8007858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800785c:	b002      	add	sp, #8
 800785e:	4770      	bx	lr
 8007860:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007864:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007868:	bf14      	ite	ne
 800786a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800786e:	4623      	moveq	r3, r4
 8007870:	9304      	str	r3, [sp, #16]
 8007872:	9307      	str	r3, [sp, #28]
 8007874:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007878:	9002      	str	r0, [sp, #8]
 800787a:	9006      	str	r0, [sp, #24]
 800787c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007880:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007882:	ab21      	add	r3, sp, #132	; 0x84
 8007884:	a902      	add	r1, sp, #8
 8007886:	4628      	mov	r0, r5
 8007888:	9301      	str	r3, [sp, #4]
 800788a:	f000 f993 	bl	8007bb4 <_svfiprintf_r>
 800788e:	1c43      	adds	r3, r0, #1
 8007890:	bfbc      	itt	lt
 8007892:	238b      	movlt	r3, #139	; 0x8b
 8007894:	602b      	strlt	r3, [r5, #0]
 8007896:	2c00      	cmp	r4, #0
 8007898:	d0dd      	beq.n	8007856 <sniprintf+0x16>
 800789a:	9b02      	ldr	r3, [sp, #8]
 800789c:	2200      	movs	r2, #0
 800789e:	701a      	strb	r2, [r3, #0]
 80078a0:	e7d9      	b.n	8007856 <sniprintf+0x16>
 80078a2:	bf00      	nop
 80078a4:	20000148 	.word	0x20000148

080078a8 <memset>:
 80078a8:	4402      	add	r2, r0
 80078aa:	4603      	mov	r3, r0
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d100      	bne.n	80078b2 <memset+0xa>
 80078b0:	4770      	bx	lr
 80078b2:	f803 1b01 	strb.w	r1, [r3], #1
 80078b6:	e7f9      	b.n	80078ac <memset+0x4>

080078b8 <__errno>:
 80078b8:	4b01      	ldr	r3, [pc, #4]	; (80078c0 <__errno+0x8>)
 80078ba:	6818      	ldr	r0, [r3, #0]
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	20000148 	.word	0x20000148

080078c4 <__libc_init_array>:
 80078c4:	b570      	push	{r4, r5, r6, lr}
 80078c6:	4d0d      	ldr	r5, [pc, #52]	; (80078fc <__libc_init_array+0x38>)
 80078c8:	4c0d      	ldr	r4, [pc, #52]	; (8007900 <__libc_init_array+0x3c>)
 80078ca:	1b64      	subs	r4, r4, r5
 80078cc:	10a4      	asrs	r4, r4, #2
 80078ce:	2600      	movs	r6, #0
 80078d0:	42a6      	cmp	r6, r4
 80078d2:	d109      	bne.n	80078e8 <__libc_init_array+0x24>
 80078d4:	4d0b      	ldr	r5, [pc, #44]	; (8007904 <__libc_init_array+0x40>)
 80078d6:	4c0c      	ldr	r4, [pc, #48]	; (8007908 <__libc_init_array+0x44>)
 80078d8:	f000 fc6a 	bl	80081b0 <_init>
 80078dc:	1b64      	subs	r4, r4, r5
 80078de:	10a4      	asrs	r4, r4, #2
 80078e0:	2600      	movs	r6, #0
 80078e2:	42a6      	cmp	r6, r4
 80078e4:	d105      	bne.n	80078f2 <__libc_init_array+0x2e>
 80078e6:	bd70      	pop	{r4, r5, r6, pc}
 80078e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ec:	4798      	blx	r3
 80078ee:	3601      	adds	r6, #1
 80078f0:	e7ee      	b.n	80078d0 <__libc_init_array+0xc>
 80078f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80078f6:	4798      	blx	r3
 80078f8:	3601      	adds	r6, #1
 80078fa:	e7f2      	b.n	80078e2 <__libc_init_array+0x1e>
 80078fc:	080082a8 	.word	0x080082a8
 8007900:	080082a8 	.word	0x080082a8
 8007904:	080082a8 	.word	0x080082a8
 8007908:	080082ac 	.word	0x080082ac

0800790c <__retarget_lock_acquire_recursive>:
 800790c:	4770      	bx	lr

0800790e <__retarget_lock_release_recursive>:
 800790e:	4770      	bx	lr

08007910 <_free_r>:
 8007910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007912:	2900      	cmp	r1, #0
 8007914:	d044      	beq.n	80079a0 <_free_r+0x90>
 8007916:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800791a:	9001      	str	r0, [sp, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	f1a1 0404 	sub.w	r4, r1, #4
 8007922:	bfb8      	it	lt
 8007924:	18e4      	addlt	r4, r4, r3
 8007926:	f000 f8df 	bl	8007ae8 <__malloc_lock>
 800792a:	4a1e      	ldr	r2, [pc, #120]	; (80079a4 <_free_r+0x94>)
 800792c:	9801      	ldr	r0, [sp, #4]
 800792e:	6813      	ldr	r3, [r2, #0]
 8007930:	b933      	cbnz	r3, 8007940 <_free_r+0x30>
 8007932:	6063      	str	r3, [r4, #4]
 8007934:	6014      	str	r4, [r2, #0]
 8007936:	b003      	add	sp, #12
 8007938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800793c:	f000 b8da 	b.w	8007af4 <__malloc_unlock>
 8007940:	42a3      	cmp	r3, r4
 8007942:	d908      	bls.n	8007956 <_free_r+0x46>
 8007944:	6825      	ldr	r5, [r4, #0]
 8007946:	1961      	adds	r1, r4, r5
 8007948:	428b      	cmp	r3, r1
 800794a:	bf01      	itttt	eq
 800794c:	6819      	ldreq	r1, [r3, #0]
 800794e:	685b      	ldreq	r3, [r3, #4]
 8007950:	1949      	addeq	r1, r1, r5
 8007952:	6021      	streq	r1, [r4, #0]
 8007954:	e7ed      	b.n	8007932 <_free_r+0x22>
 8007956:	461a      	mov	r2, r3
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	b10b      	cbz	r3, 8007960 <_free_r+0x50>
 800795c:	42a3      	cmp	r3, r4
 800795e:	d9fa      	bls.n	8007956 <_free_r+0x46>
 8007960:	6811      	ldr	r1, [r2, #0]
 8007962:	1855      	adds	r5, r2, r1
 8007964:	42a5      	cmp	r5, r4
 8007966:	d10b      	bne.n	8007980 <_free_r+0x70>
 8007968:	6824      	ldr	r4, [r4, #0]
 800796a:	4421      	add	r1, r4
 800796c:	1854      	adds	r4, r2, r1
 800796e:	42a3      	cmp	r3, r4
 8007970:	6011      	str	r1, [r2, #0]
 8007972:	d1e0      	bne.n	8007936 <_free_r+0x26>
 8007974:	681c      	ldr	r4, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	6053      	str	r3, [r2, #4]
 800797a:	440c      	add	r4, r1
 800797c:	6014      	str	r4, [r2, #0]
 800797e:	e7da      	b.n	8007936 <_free_r+0x26>
 8007980:	d902      	bls.n	8007988 <_free_r+0x78>
 8007982:	230c      	movs	r3, #12
 8007984:	6003      	str	r3, [r0, #0]
 8007986:	e7d6      	b.n	8007936 <_free_r+0x26>
 8007988:	6825      	ldr	r5, [r4, #0]
 800798a:	1961      	adds	r1, r4, r5
 800798c:	428b      	cmp	r3, r1
 800798e:	bf04      	itt	eq
 8007990:	6819      	ldreq	r1, [r3, #0]
 8007992:	685b      	ldreq	r3, [r3, #4]
 8007994:	6063      	str	r3, [r4, #4]
 8007996:	bf04      	itt	eq
 8007998:	1949      	addeq	r1, r1, r5
 800799a:	6021      	streq	r1, [r4, #0]
 800799c:	6054      	str	r4, [r2, #4]
 800799e:	e7ca      	b.n	8007936 <_free_r+0x26>
 80079a0:	b003      	add	sp, #12
 80079a2:	bd30      	pop	{r4, r5, pc}
 80079a4:	20001f00 	.word	0x20001f00

080079a8 <sbrk_aligned>:
 80079a8:	b570      	push	{r4, r5, r6, lr}
 80079aa:	4e0e      	ldr	r6, [pc, #56]	; (80079e4 <sbrk_aligned+0x3c>)
 80079ac:	460c      	mov	r4, r1
 80079ae:	6831      	ldr	r1, [r6, #0]
 80079b0:	4605      	mov	r5, r0
 80079b2:	b911      	cbnz	r1, 80079ba <sbrk_aligned+0x12>
 80079b4:	f000 fba6 	bl	8008104 <_sbrk_r>
 80079b8:	6030      	str	r0, [r6, #0]
 80079ba:	4621      	mov	r1, r4
 80079bc:	4628      	mov	r0, r5
 80079be:	f000 fba1 	bl	8008104 <_sbrk_r>
 80079c2:	1c43      	adds	r3, r0, #1
 80079c4:	d00a      	beq.n	80079dc <sbrk_aligned+0x34>
 80079c6:	1cc4      	adds	r4, r0, #3
 80079c8:	f024 0403 	bic.w	r4, r4, #3
 80079cc:	42a0      	cmp	r0, r4
 80079ce:	d007      	beq.n	80079e0 <sbrk_aligned+0x38>
 80079d0:	1a21      	subs	r1, r4, r0
 80079d2:	4628      	mov	r0, r5
 80079d4:	f000 fb96 	bl	8008104 <_sbrk_r>
 80079d8:	3001      	adds	r0, #1
 80079da:	d101      	bne.n	80079e0 <sbrk_aligned+0x38>
 80079dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80079e0:	4620      	mov	r0, r4
 80079e2:	bd70      	pop	{r4, r5, r6, pc}
 80079e4:	20001f04 	.word	0x20001f04

080079e8 <_malloc_r>:
 80079e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079ec:	1ccd      	adds	r5, r1, #3
 80079ee:	f025 0503 	bic.w	r5, r5, #3
 80079f2:	3508      	adds	r5, #8
 80079f4:	2d0c      	cmp	r5, #12
 80079f6:	bf38      	it	cc
 80079f8:	250c      	movcc	r5, #12
 80079fa:	2d00      	cmp	r5, #0
 80079fc:	4607      	mov	r7, r0
 80079fe:	db01      	blt.n	8007a04 <_malloc_r+0x1c>
 8007a00:	42a9      	cmp	r1, r5
 8007a02:	d905      	bls.n	8007a10 <_malloc_r+0x28>
 8007a04:	230c      	movs	r3, #12
 8007a06:	603b      	str	r3, [r7, #0]
 8007a08:	2600      	movs	r6, #0
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007ae4 <_malloc_r+0xfc>
 8007a14:	f000 f868 	bl	8007ae8 <__malloc_lock>
 8007a18:	f8d8 3000 	ldr.w	r3, [r8]
 8007a1c:	461c      	mov	r4, r3
 8007a1e:	bb5c      	cbnz	r4, 8007a78 <_malloc_r+0x90>
 8007a20:	4629      	mov	r1, r5
 8007a22:	4638      	mov	r0, r7
 8007a24:	f7ff ffc0 	bl	80079a8 <sbrk_aligned>
 8007a28:	1c43      	adds	r3, r0, #1
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	d155      	bne.n	8007ada <_malloc_r+0xf2>
 8007a2e:	f8d8 4000 	ldr.w	r4, [r8]
 8007a32:	4626      	mov	r6, r4
 8007a34:	2e00      	cmp	r6, #0
 8007a36:	d145      	bne.n	8007ac4 <_malloc_r+0xdc>
 8007a38:	2c00      	cmp	r4, #0
 8007a3a:	d048      	beq.n	8007ace <_malloc_r+0xe6>
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	4631      	mov	r1, r6
 8007a40:	4638      	mov	r0, r7
 8007a42:	eb04 0903 	add.w	r9, r4, r3
 8007a46:	f000 fb5d 	bl	8008104 <_sbrk_r>
 8007a4a:	4581      	cmp	r9, r0
 8007a4c:	d13f      	bne.n	8007ace <_malloc_r+0xe6>
 8007a4e:	6821      	ldr	r1, [r4, #0]
 8007a50:	1a6d      	subs	r5, r5, r1
 8007a52:	4629      	mov	r1, r5
 8007a54:	4638      	mov	r0, r7
 8007a56:	f7ff ffa7 	bl	80079a8 <sbrk_aligned>
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	d037      	beq.n	8007ace <_malloc_r+0xe6>
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	442b      	add	r3, r5
 8007a62:	6023      	str	r3, [r4, #0]
 8007a64:	f8d8 3000 	ldr.w	r3, [r8]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d038      	beq.n	8007ade <_malloc_r+0xf6>
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	42a2      	cmp	r2, r4
 8007a70:	d12b      	bne.n	8007aca <_malloc_r+0xe2>
 8007a72:	2200      	movs	r2, #0
 8007a74:	605a      	str	r2, [r3, #4]
 8007a76:	e00f      	b.n	8007a98 <_malloc_r+0xb0>
 8007a78:	6822      	ldr	r2, [r4, #0]
 8007a7a:	1b52      	subs	r2, r2, r5
 8007a7c:	d41f      	bmi.n	8007abe <_malloc_r+0xd6>
 8007a7e:	2a0b      	cmp	r2, #11
 8007a80:	d917      	bls.n	8007ab2 <_malloc_r+0xca>
 8007a82:	1961      	adds	r1, r4, r5
 8007a84:	42a3      	cmp	r3, r4
 8007a86:	6025      	str	r5, [r4, #0]
 8007a88:	bf18      	it	ne
 8007a8a:	6059      	strne	r1, [r3, #4]
 8007a8c:	6863      	ldr	r3, [r4, #4]
 8007a8e:	bf08      	it	eq
 8007a90:	f8c8 1000 	streq.w	r1, [r8]
 8007a94:	5162      	str	r2, [r4, r5]
 8007a96:	604b      	str	r3, [r1, #4]
 8007a98:	4638      	mov	r0, r7
 8007a9a:	f104 060b 	add.w	r6, r4, #11
 8007a9e:	f000 f829 	bl	8007af4 <__malloc_unlock>
 8007aa2:	f026 0607 	bic.w	r6, r6, #7
 8007aa6:	1d23      	adds	r3, r4, #4
 8007aa8:	1af2      	subs	r2, r6, r3
 8007aaa:	d0ae      	beq.n	8007a0a <_malloc_r+0x22>
 8007aac:	1b9b      	subs	r3, r3, r6
 8007aae:	50a3      	str	r3, [r4, r2]
 8007ab0:	e7ab      	b.n	8007a0a <_malloc_r+0x22>
 8007ab2:	42a3      	cmp	r3, r4
 8007ab4:	6862      	ldr	r2, [r4, #4]
 8007ab6:	d1dd      	bne.n	8007a74 <_malloc_r+0x8c>
 8007ab8:	f8c8 2000 	str.w	r2, [r8]
 8007abc:	e7ec      	b.n	8007a98 <_malloc_r+0xb0>
 8007abe:	4623      	mov	r3, r4
 8007ac0:	6864      	ldr	r4, [r4, #4]
 8007ac2:	e7ac      	b.n	8007a1e <_malloc_r+0x36>
 8007ac4:	4634      	mov	r4, r6
 8007ac6:	6876      	ldr	r6, [r6, #4]
 8007ac8:	e7b4      	b.n	8007a34 <_malloc_r+0x4c>
 8007aca:	4613      	mov	r3, r2
 8007acc:	e7cc      	b.n	8007a68 <_malloc_r+0x80>
 8007ace:	230c      	movs	r3, #12
 8007ad0:	603b      	str	r3, [r7, #0]
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	f000 f80e 	bl	8007af4 <__malloc_unlock>
 8007ad8:	e797      	b.n	8007a0a <_malloc_r+0x22>
 8007ada:	6025      	str	r5, [r4, #0]
 8007adc:	e7dc      	b.n	8007a98 <_malloc_r+0xb0>
 8007ade:	605b      	str	r3, [r3, #4]
 8007ae0:	deff      	udf	#255	; 0xff
 8007ae2:	bf00      	nop
 8007ae4:	20001f00 	.word	0x20001f00

08007ae8 <__malloc_lock>:
 8007ae8:	4801      	ldr	r0, [pc, #4]	; (8007af0 <__malloc_lock+0x8>)
 8007aea:	f7ff bf0f 	b.w	800790c <__retarget_lock_acquire_recursive>
 8007aee:	bf00      	nop
 8007af0:	20001efc 	.word	0x20001efc

08007af4 <__malloc_unlock>:
 8007af4:	4801      	ldr	r0, [pc, #4]	; (8007afc <__malloc_unlock+0x8>)
 8007af6:	f7ff bf0a 	b.w	800790e <__retarget_lock_release_recursive>
 8007afa:	bf00      	nop
 8007afc:	20001efc 	.word	0x20001efc

08007b00 <__ssputs_r>:
 8007b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b04:	688e      	ldr	r6, [r1, #8]
 8007b06:	461f      	mov	r7, r3
 8007b08:	42be      	cmp	r6, r7
 8007b0a:	680b      	ldr	r3, [r1, #0]
 8007b0c:	4682      	mov	sl, r0
 8007b0e:	460c      	mov	r4, r1
 8007b10:	4690      	mov	r8, r2
 8007b12:	d82c      	bhi.n	8007b6e <__ssputs_r+0x6e>
 8007b14:	898a      	ldrh	r2, [r1, #12]
 8007b16:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b1a:	d026      	beq.n	8007b6a <__ssputs_r+0x6a>
 8007b1c:	6965      	ldr	r5, [r4, #20]
 8007b1e:	6909      	ldr	r1, [r1, #16]
 8007b20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b24:	eba3 0901 	sub.w	r9, r3, r1
 8007b28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b2c:	1c7b      	adds	r3, r7, #1
 8007b2e:	444b      	add	r3, r9
 8007b30:	106d      	asrs	r5, r5, #1
 8007b32:	429d      	cmp	r5, r3
 8007b34:	bf38      	it	cc
 8007b36:	461d      	movcc	r5, r3
 8007b38:	0553      	lsls	r3, r2, #21
 8007b3a:	d527      	bpl.n	8007b8c <__ssputs_r+0x8c>
 8007b3c:	4629      	mov	r1, r5
 8007b3e:	f7ff ff53 	bl	80079e8 <_malloc_r>
 8007b42:	4606      	mov	r6, r0
 8007b44:	b360      	cbz	r0, 8007ba0 <__ssputs_r+0xa0>
 8007b46:	6921      	ldr	r1, [r4, #16]
 8007b48:	464a      	mov	r2, r9
 8007b4a:	f000 faeb 	bl	8008124 <memcpy>
 8007b4e:	89a3      	ldrh	r3, [r4, #12]
 8007b50:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b58:	81a3      	strh	r3, [r4, #12]
 8007b5a:	6126      	str	r6, [r4, #16]
 8007b5c:	6165      	str	r5, [r4, #20]
 8007b5e:	444e      	add	r6, r9
 8007b60:	eba5 0509 	sub.w	r5, r5, r9
 8007b64:	6026      	str	r6, [r4, #0]
 8007b66:	60a5      	str	r5, [r4, #8]
 8007b68:	463e      	mov	r6, r7
 8007b6a:	42be      	cmp	r6, r7
 8007b6c:	d900      	bls.n	8007b70 <__ssputs_r+0x70>
 8007b6e:	463e      	mov	r6, r7
 8007b70:	6820      	ldr	r0, [r4, #0]
 8007b72:	4632      	mov	r2, r6
 8007b74:	4641      	mov	r1, r8
 8007b76:	f000 faab 	bl	80080d0 <memmove>
 8007b7a:	68a3      	ldr	r3, [r4, #8]
 8007b7c:	1b9b      	subs	r3, r3, r6
 8007b7e:	60a3      	str	r3, [r4, #8]
 8007b80:	6823      	ldr	r3, [r4, #0]
 8007b82:	4433      	add	r3, r6
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	2000      	movs	r0, #0
 8007b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b8c:	462a      	mov	r2, r5
 8007b8e:	f000 fad7 	bl	8008140 <_realloc_r>
 8007b92:	4606      	mov	r6, r0
 8007b94:	2800      	cmp	r0, #0
 8007b96:	d1e0      	bne.n	8007b5a <__ssputs_r+0x5a>
 8007b98:	6921      	ldr	r1, [r4, #16]
 8007b9a:	4650      	mov	r0, sl
 8007b9c:	f7ff feb8 	bl	8007910 <_free_r>
 8007ba0:	230c      	movs	r3, #12
 8007ba2:	f8ca 3000 	str.w	r3, [sl]
 8007ba6:	89a3      	ldrh	r3, [r4, #12]
 8007ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bac:	81a3      	strh	r3, [r4, #12]
 8007bae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bb2:	e7e9      	b.n	8007b88 <__ssputs_r+0x88>

08007bb4 <_svfiprintf_r>:
 8007bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb8:	4698      	mov	r8, r3
 8007bba:	898b      	ldrh	r3, [r1, #12]
 8007bbc:	061b      	lsls	r3, r3, #24
 8007bbe:	b09d      	sub	sp, #116	; 0x74
 8007bc0:	4607      	mov	r7, r0
 8007bc2:	460d      	mov	r5, r1
 8007bc4:	4614      	mov	r4, r2
 8007bc6:	d50e      	bpl.n	8007be6 <_svfiprintf_r+0x32>
 8007bc8:	690b      	ldr	r3, [r1, #16]
 8007bca:	b963      	cbnz	r3, 8007be6 <_svfiprintf_r+0x32>
 8007bcc:	2140      	movs	r1, #64	; 0x40
 8007bce:	f7ff ff0b 	bl	80079e8 <_malloc_r>
 8007bd2:	6028      	str	r0, [r5, #0]
 8007bd4:	6128      	str	r0, [r5, #16]
 8007bd6:	b920      	cbnz	r0, 8007be2 <_svfiprintf_r+0x2e>
 8007bd8:	230c      	movs	r3, #12
 8007bda:	603b      	str	r3, [r7, #0]
 8007bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007be0:	e0d0      	b.n	8007d84 <_svfiprintf_r+0x1d0>
 8007be2:	2340      	movs	r3, #64	; 0x40
 8007be4:	616b      	str	r3, [r5, #20]
 8007be6:	2300      	movs	r3, #0
 8007be8:	9309      	str	r3, [sp, #36]	; 0x24
 8007bea:	2320      	movs	r3, #32
 8007bec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bf4:	2330      	movs	r3, #48	; 0x30
 8007bf6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007d9c <_svfiprintf_r+0x1e8>
 8007bfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bfe:	f04f 0901 	mov.w	r9, #1
 8007c02:	4623      	mov	r3, r4
 8007c04:	469a      	mov	sl, r3
 8007c06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c0a:	b10a      	cbz	r2, 8007c10 <_svfiprintf_r+0x5c>
 8007c0c:	2a25      	cmp	r2, #37	; 0x25
 8007c0e:	d1f9      	bne.n	8007c04 <_svfiprintf_r+0x50>
 8007c10:	ebba 0b04 	subs.w	fp, sl, r4
 8007c14:	d00b      	beq.n	8007c2e <_svfiprintf_r+0x7a>
 8007c16:	465b      	mov	r3, fp
 8007c18:	4622      	mov	r2, r4
 8007c1a:	4629      	mov	r1, r5
 8007c1c:	4638      	mov	r0, r7
 8007c1e:	f7ff ff6f 	bl	8007b00 <__ssputs_r>
 8007c22:	3001      	adds	r0, #1
 8007c24:	f000 80a9 	beq.w	8007d7a <_svfiprintf_r+0x1c6>
 8007c28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c2a:	445a      	add	r2, fp
 8007c2c:	9209      	str	r2, [sp, #36]	; 0x24
 8007c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 80a1 	beq.w	8007d7a <_svfiprintf_r+0x1c6>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c42:	f10a 0a01 	add.w	sl, sl, #1
 8007c46:	9304      	str	r3, [sp, #16]
 8007c48:	9307      	str	r3, [sp, #28]
 8007c4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c4e:	931a      	str	r3, [sp, #104]	; 0x68
 8007c50:	4654      	mov	r4, sl
 8007c52:	2205      	movs	r2, #5
 8007c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c58:	4850      	ldr	r0, [pc, #320]	; (8007d9c <_svfiprintf_r+0x1e8>)
 8007c5a:	f7f8 fac1 	bl	80001e0 <memchr>
 8007c5e:	9a04      	ldr	r2, [sp, #16]
 8007c60:	b9d8      	cbnz	r0, 8007c9a <_svfiprintf_r+0xe6>
 8007c62:	06d0      	lsls	r0, r2, #27
 8007c64:	bf44      	itt	mi
 8007c66:	2320      	movmi	r3, #32
 8007c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c6c:	0711      	lsls	r1, r2, #28
 8007c6e:	bf44      	itt	mi
 8007c70:	232b      	movmi	r3, #43	; 0x2b
 8007c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c76:	f89a 3000 	ldrb.w	r3, [sl]
 8007c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c7c:	d015      	beq.n	8007caa <_svfiprintf_r+0xf6>
 8007c7e:	9a07      	ldr	r2, [sp, #28]
 8007c80:	4654      	mov	r4, sl
 8007c82:	2000      	movs	r0, #0
 8007c84:	f04f 0c0a 	mov.w	ip, #10
 8007c88:	4621      	mov	r1, r4
 8007c8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c8e:	3b30      	subs	r3, #48	; 0x30
 8007c90:	2b09      	cmp	r3, #9
 8007c92:	d94d      	bls.n	8007d30 <_svfiprintf_r+0x17c>
 8007c94:	b1b0      	cbz	r0, 8007cc4 <_svfiprintf_r+0x110>
 8007c96:	9207      	str	r2, [sp, #28]
 8007c98:	e014      	b.n	8007cc4 <_svfiprintf_r+0x110>
 8007c9a:	eba0 0308 	sub.w	r3, r0, r8
 8007c9e:	fa09 f303 	lsl.w	r3, r9, r3
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	9304      	str	r3, [sp, #16]
 8007ca6:	46a2      	mov	sl, r4
 8007ca8:	e7d2      	b.n	8007c50 <_svfiprintf_r+0x9c>
 8007caa:	9b03      	ldr	r3, [sp, #12]
 8007cac:	1d19      	adds	r1, r3, #4
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	9103      	str	r1, [sp, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	bfbb      	ittet	lt
 8007cb6:	425b      	neglt	r3, r3
 8007cb8:	f042 0202 	orrlt.w	r2, r2, #2
 8007cbc:	9307      	strge	r3, [sp, #28]
 8007cbe:	9307      	strlt	r3, [sp, #28]
 8007cc0:	bfb8      	it	lt
 8007cc2:	9204      	strlt	r2, [sp, #16]
 8007cc4:	7823      	ldrb	r3, [r4, #0]
 8007cc6:	2b2e      	cmp	r3, #46	; 0x2e
 8007cc8:	d10c      	bne.n	8007ce4 <_svfiprintf_r+0x130>
 8007cca:	7863      	ldrb	r3, [r4, #1]
 8007ccc:	2b2a      	cmp	r3, #42	; 0x2a
 8007cce:	d134      	bne.n	8007d3a <_svfiprintf_r+0x186>
 8007cd0:	9b03      	ldr	r3, [sp, #12]
 8007cd2:	1d1a      	adds	r2, r3, #4
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	9203      	str	r2, [sp, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	bfb8      	it	lt
 8007cdc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007ce0:	3402      	adds	r4, #2
 8007ce2:	9305      	str	r3, [sp, #20]
 8007ce4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007dac <_svfiprintf_r+0x1f8>
 8007ce8:	7821      	ldrb	r1, [r4, #0]
 8007cea:	2203      	movs	r2, #3
 8007cec:	4650      	mov	r0, sl
 8007cee:	f7f8 fa77 	bl	80001e0 <memchr>
 8007cf2:	b138      	cbz	r0, 8007d04 <_svfiprintf_r+0x150>
 8007cf4:	9b04      	ldr	r3, [sp, #16]
 8007cf6:	eba0 000a 	sub.w	r0, r0, sl
 8007cfa:	2240      	movs	r2, #64	; 0x40
 8007cfc:	4082      	lsls	r2, r0
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	3401      	adds	r4, #1
 8007d02:	9304      	str	r3, [sp, #16]
 8007d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d08:	4825      	ldr	r0, [pc, #148]	; (8007da0 <_svfiprintf_r+0x1ec>)
 8007d0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d0e:	2206      	movs	r2, #6
 8007d10:	f7f8 fa66 	bl	80001e0 <memchr>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d038      	beq.n	8007d8a <_svfiprintf_r+0x1d6>
 8007d18:	4b22      	ldr	r3, [pc, #136]	; (8007da4 <_svfiprintf_r+0x1f0>)
 8007d1a:	bb1b      	cbnz	r3, 8007d64 <_svfiprintf_r+0x1b0>
 8007d1c:	9b03      	ldr	r3, [sp, #12]
 8007d1e:	3307      	adds	r3, #7
 8007d20:	f023 0307 	bic.w	r3, r3, #7
 8007d24:	3308      	adds	r3, #8
 8007d26:	9303      	str	r3, [sp, #12]
 8007d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d2a:	4433      	add	r3, r6
 8007d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d2e:	e768      	b.n	8007c02 <_svfiprintf_r+0x4e>
 8007d30:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d34:	460c      	mov	r4, r1
 8007d36:	2001      	movs	r0, #1
 8007d38:	e7a6      	b.n	8007c88 <_svfiprintf_r+0xd4>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	3401      	adds	r4, #1
 8007d3e:	9305      	str	r3, [sp, #20]
 8007d40:	4619      	mov	r1, r3
 8007d42:	f04f 0c0a 	mov.w	ip, #10
 8007d46:	4620      	mov	r0, r4
 8007d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d4c:	3a30      	subs	r2, #48	; 0x30
 8007d4e:	2a09      	cmp	r2, #9
 8007d50:	d903      	bls.n	8007d5a <_svfiprintf_r+0x1a6>
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d0c6      	beq.n	8007ce4 <_svfiprintf_r+0x130>
 8007d56:	9105      	str	r1, [sp, #20]
 8007d58:	e7c4      	b.n	8007ce4 <_svfiprintf_r+0x130>
 8007d5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d5e:	4604      	mov	r4, r0
 8007d60:	2301      	movs	r3, #1
 8007d62:	e7f0      	b.n	8007d46 <_svfiprintf_r+0x192>
 8007d64:	ab03      	add	r3, sp, #12
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	462a      	mov	r2, r5
 8007d6a:	4b0f      	ldr	r3, [pc, #60]	; (8007da8 <_svfiprintf_r+0x1f4>)
 8007d6c:	a904      	add	r1, sp, #16
 8007d6e:	4638      	mov	r0, r7
 8007d70:	f3af 8000 	nop.w
 8007d74:	1c42      	adds	r2, r0, #1
 8007d76:	4606      	mov	r6, r0
 8007d78:	d1d6      	bne.n	8007d28 <_svfiprintf_r+0x174>
 8007d7a:	89ab      	ldrh	r3, [r5, #12]
 8007d7c:	065b      	lsls	r3, r3, #25
 8007d7e:	f53f af2d 	bmi.w	8007bdc <_svfiprintf_r+0x28>
 8007d82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d84:	b01d      	add	sp, #116	; 0x74
 8007d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d8a:	ab03      	add	r3, sp, #12
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	462a      	mov	r2, r5
 8007d90:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <_svfiprintf_r+0x1f4>)
 8007d92:	a904      	add	r1, sp, #16
 8007d94:	4638      	mov	r0, r7
 8007d96:	f000 f879 	bl	8007e8c <_printf_i>
 8007d9a:	e7eb      	b.n	8007d74 <_svfiprintf_r+0x1c0>
 8007d9c:	0800826c 	.word	0x0800826c
 8007da0:	08008276 	.word	0x08008276
 8007da4:	00000000 	.word	0x00000000
 8007da8:	08007b01 	.word	0x08007b01
 8007dac:	08008272 	.word	0x08008272

08007db0 <_printf_common>:
 8007db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007db4:	4616      	mov	r6, r2
 8007db6:	4699      	mov	r9, r3
 8007db8:	688a      	ldr	r2, [r1, #8]
 8007dba:	690b      	ldr	r3, [r1, #16]
 8007dbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	bfb8      	it	lt
 8007dc4:	4613      	movlt	r3, r2
 8007dc6:	6033      	str	r3, [r6, #0]
 8007dc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007dcc:	4607      	mov	r7, r0
 8007dce:	460c      	mov	r4, r1
 8007dd0:	b10a      	cbz	r2, 8007dd6 <_printf_common+0x26>
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	6033      	str	r3, [r6, #0]
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	0699      	lsls	r1, r3, #26
 8007dda:	bf42      	ittt	mi
 8007ddc:	6833      	ldrmi	r3, [r6, #0]
 8007dde:	3302      	addmi	r3, #2
 8007de0:	6033      	strmi	r3, [r6, #0]
 8007de2:	6825      	ldr	r5, [r4, #0]
 8007de4:	f015 0506 	ands.w	r5, r5, #6
 8007de8:	d106      	bne.n	8007df8 <_printf_common+0x48>
 8007dea:	f104 0a19 	add.w	sl, r4, #25
 8007dee:	68e3      	ldr	r3, [r4, #12]
 8007df0:	6832      	ldr	r2, [r6, #0]
 8007df2:	1a9b      	subs	r3, r3, r2
 8007df4:	42ab      	cmp	r3, r5
 8007df6:	dc26      	bgt.n	8007e46 <_printf_common+0x96>
 8007df8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007dfc:	1e13      	subs	r3, r2, #0
 8007dfe:	6822      	ldr	r2, [r4, #0]
 8007e00:	bf18      	it	ne
 8007e02:	2301      	movne	r3, #1
 8007e04:	0692      	lsls	r2, r2, #26
 8007e06:	d42b      	bmi.n	8007e60 <_printf_common+0xb0>
 8007e08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e0c:	4649      	mov	r1, r9
 8007e0e:	4638      	mov	r0, r7
 8007e10:	47c0      	blx	r8
 8007e12:	3001      	adds	r0, #1
 8007e14:	d01e      	beq.n	8007e54 <_printf_common+0xa4>
 8007e16:	6823      	ldr	r3, [r4, #0]
 8007e18:	6922      	ldr	r2, [r4, #16]
 8007e1a:	f003 0306 	and.w	r3, r3, #6
 8007e1e:	2b04      	cmp	r3, #4
 8007e20:	bf02      	ittt	eq
 8007e22:	68e5      	ldreq	r5, [r4, #12]
 8007e24:	6833      	ldreq	r3, [r6, #0]
 8007e26:	1aed      	subeq	r5, r5, r3
 8007e28:	68a3      	ldr	r3, [r4, #8]
 8007e2a:	bf0c      	ite	eq
 8007e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e30:	2500      	movne	r5, #0
 8007e32:	4293      	cmp	r3, r2
 8007e34:	bfc4      	itt	gt
 8007e36:	1a9b      	subgt	r3, r3, r2
 8007e38:	18ed      	addgt	r5, r5, r3
 8007e3a:	2600      	movs	r6, #0
 8007e3c:	341a      	adds	r4, #26
 8007e3e:	42b5      	cmp	r5, r6
 8007e40:	d11a      	bne.n	8007e78 <_printf_common+0xc8>
 8007e42:	2000      	movs	r0, #0
 8007e44:	e008      	b.n	8007e58 <_printf_common+0xa8>
 8007e46:	2301      	movs	r3, #1
 8007e48:	4652      	mov	r2, sl
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	4638      	mov	r0, r7
 8007e4e:	47c0      	blx	r8
 8007e50:	3001      	adds	r0, #1
 8007e52:	d103      	bne.n	8007e5c <_printf_common+0xac>
 8007e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5c:	3501      	adds	r5, #1
 8007e5e:	e7c6      	b.n	8007dee <_printf_common+0x3e>
 8007e60:	18e1      	adds	r1, r4, r3
 8007e62:	1c5a      	adds	r2, r3, #1
 8007e64:	2030      	movs	r0, #48	; 0x30
 8007e66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e6a:	4422      	add	r2, r4
 8007e6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e74:	3302      	adds	r3, #2
 8007e76:	e7c7      	b.n	8007e08 <_printf_common+0x58>
 8007e78:	2301      	movs	r3, #1
 8007e7a:	4622      	mov	r2, r4
 8007e7c:	4649      	mov	r1, r9
 8007e7e:	4638      	mov	r0, r7
 8007e80:	47c0      	blx	r8
 8007e82:	3001      	adds	r0, #1
 8007e84:	d0e6      	beq.n	8007e54 <_printf_common+0xa4>
 8007e86:	3601      	adds	r6, #1
 8007e88:	e7d9      	b.n	8007e3e <_printf_common+0x8e>
	...

08007e8c <_printf_i>:
 8007e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e90:	7e0f      	ldrb	r7, [r1, #24]
 8007e92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e94:	2f78      	cmp	r7, #120	; 0x78
 8007e96:	4691      	mov	r9, r2
 8007e98:	4680      	mov	r8, r0
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	469a      	mov	sl, r3
 8007e9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ea2:	d807      	bhi.n	8007eb4 <_printf_i+0x28>
 8007ea4:	2f62      	cmp	r7, #98	; 0x62
 8007ea6:	d80a      	bhi.n	8007ebe <_printf_i+0x32>
 8007ea8:	2f00      	cmp	r7, #0
 8007eaa:	f000 80d4 	beq.w	8008056 <_printf_i+0x1ca>
 8007eae:	2f58      	cmp	r7, #88	; 0x58
 8007eb0:	f000 80c0 	beq.w	8008034 <_printf_i+0x1a8>
 8007eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007eb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ebc:	e03a      	b.n	8007f34 <_printf_i+0xa8>
 8007ebe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ec2:	2b15      	cmp	r3, #21
 8007ec4:	d8f6      	bhi.n	8007eb4 <_printf_i+0x28>
 8007ec6:	a101      	add	r1, pc, #4	; (adr r1, 8007ecc <_printf_i+0x40>)
 8007ec8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ecc:	08007f25 	.word	0x08007f25
 8007ed0:	08007f39 	.word	0x08007f39
 8007ed4:	08007eb5 	.word	0x08007eb5
 8007ed8:	08007eb5 	.word	0x08007eb5
 8007edc:	08007eb5 	.word	0x08007eb5
 8007ee0:	08007eb5 	.word	0x08007eb5
 8007ee4:	08007f39 	.word	0x08007f39
 8007ee8:	08007eb5 	.word	0x08007eb5
 8007eec:	08007eb5 	.word	0x08007eb5
 8007ef0:	08007eb5 	.word	0x08007eb5
 8007ef4:	08007eb5 	.word	0x08007eb5
 8007ef8:	0800803d 	.word	0x0800803d
 8007efc:	08007f65 	.word	0x08007f65
 8007f00:	08007ff7 	.word	0x08007ff7
 8007f04:	08007eb5 	.word	0x08007eb5
 8007f08:	08007eb5 	.word	0x08007eb5
 8007f0c:	0800805f 	.word	0x0800805f
 8007f10:	08007eb5 	.word	0x08007eb5
 8007f14:	08007f65 	.word	0x08007f65
 8007f18:	08007eb5 	.word	0x08007eb5
 8007f1c:	08007eb5 	.word	0x08007eb5
 8007f20:	08007fff 	.word	0x08007fff
 8007f24:	682b      	ldr	r3, [r5, #0]
 8007f26:	1d1a      	adds	r2, r3, #4
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	602a      	str	r2, [r5, #0]
 8007f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f34:	2301      	movs	r3, #1
 8007f36:	e09f      	b.n	8008078 <_printf_i+0x1ec>
 8007f38:	6820      	ldr	r0, [r4, #0]
 8007f3a:	682b      	ldr	r3, [r5, #0]
 8007f3c:	0607      	lsls	r7, r0, #24
 8007f3e:	f103 0104 	add.w	r1, r3, #4
 8007f42:	6029      	str	r1, [r5, #0]
 8007f44:	d501      	bpl.n	8007f4a <_printf_i+0xbe>
 8007f46:	681e      	ldr	r6, [r3, #0]
 8007f48:	e003      	b.n	8007f52 <_printf_i+0xc6>
 8007f4a:	0646      	lsls	r6, r0, #25
 8007f4c:	d5fb      	bpl.n	8007f46 <_printf_i+0xba>
 8007f4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007f52:	2e00      	cmp	r6, #0
 8007f54:	da03      	bge.n	8007f5e <_printf_i+0xd2>
 8007f56:	232d      	movs	r3, #45	; 0x2d
 8007f58:	4276      	negs	r6, r6
 8007f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f5e:	485a      	ldr	r0, [pc, #360]	; (80080c8 <_printf_i+0x23c>)
 8007f60:	230a      	movs	r3, #10
 8007f62:	e012      	b.n	8007f8a <_printf_i+0xfe>
 8007f64:	682b      	ldr	r3, [r5, #0]
 8007f66:	6820      	ldr	r0, [r4, #0]
 8007f68:	1d19      	adds	r1, r3, #4
 8007f6a:	6029      	str	r1, [r5, #0]
 8007f6c:	0605      	lsls	r5, r0, #24
 8007f6e:	d501      	bpl.n	8007f74 <_printf_i+0xe8>
 8007f70:	681e      	ldr	r6, [r3, #0]
 8007f72:	e002      	b.n	8007f7a <_printf_i+0xee>
 8007f74:	0641      	lsls	r1, r0, #25
 8007f76:	d5fb      	bpl.n	8007f70 <_printf_i+0xe4>
 8007f78:	881e      	ldrh	r6, [r3, #0]
 8007f7a:	4853      	ldr	r0, [pc, #332]	; (80080c8 <_printf_i+0x23c>)
 8007f7c:	2f6f      	cmp	r7, #111	; 0x6f
 8007f7e:	bf0c      	ite	eq
 8007f80:	2308      	moveq	r3, #8
 8007f82:	230a      	movne	r3, #10
 8007f84:	2100      	movs	r1, #0
 8007f86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f8a:	6865      	ldr	r5, [r4, #4]
 8007f8c:	60a5      	str	r5, [r4, #8]
 8007f8e:	2d00      	cmp	r5, #0
 8007f90:	bfa2      	ittt	ge
 8007f92:	6821      	ldrge	r1, [r4, #0]
 8007f94:	f021 0104 	bicge.w	r1, r1, #4
 8007f98:	6021      	strge	r1, [r4, #0]
 8007f9a:	b90e      	cbnz	r6, 8007fa0 <_printf_i+0x114>
 8007f9c:	2d00      	cmp	r5, #0
 8007f9e:	d04b      	beq.n	8008038 <_printf_i+0x1ac>
 8007fa0:	4615      	mov	r5, r2
 8007fa2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007fa6:	fb03 6711 	mls	r7, r3, r1, r6
 8007faa:	5dc7      	ldrb	r7, [r0, r7]
 8007fac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007fb0:	4637      	mov	r7, r6
 8007fb2:	42bb      	cmp	r3, r7
 8007fb4:	460e      	mov	r6, r1
 8007fb6:	d9f4      	bls.n	8007fa2 <_printf_i+0x116>
 8007fb8:	2b08      	cmp	r3, #8
 8007fba:	d10b      	bne.n	8007fd4 <_printf_i+0x148>
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	07de      	lsls	r6, r3, #31
 8007fc0:	d508      	bpl.n	8007fd4 <_printf_i+0x148>
 8007fc2:	6923      	ldr	r3, [r4, #16]
 8007fc4:	6861      	ldr	r1, [r4, #4]
 8007fc6:	4299      	cmp	r1, r3
 8007fc8:	bfde      	ittt	le
 8007fca:	2330      	movle	r3, #48	; 0x30
 8007fcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fd0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007fd4:	1b52      	subs	r2, r2, r5
 8007fd6:	6122      	str	r2, [r4, #16]
 8007fd8:	f8cd a000 	str.w	sl, [sp]
 8007fdc:	464b      	mov	r3, r9
 8007fde:	aa03      	add	r2, sp, #12
 8007fe0:	4621      	mov	r1, r4
 8007fe2:	4640      	mov	r0, r8
 8007fe4:	f7ff fee4 	bl	8007db0 <_printf_common>
 8007fe8:	3001      	adds	r0, #1
 8007fea:	d14a      	bne.n	8008082 <_printf_i+0x1f6>
 8007fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ff0:	b004      	add	sp, #16
 8007ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	f043 0320 	orr.w	r3, r3, #32
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	4833      	ldr	r0, [pc, #204]	; (80080cc <_printf_i+0x240>)
 8008000:	2778      	movs	r7, #120	; 0x78
 8008002:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	6829      	ldr	r1, [r5, #0]
 800800a:	061f      	lsls	r7, r3, #24
 800800c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008010:	d402      	bmi.n	8008018 <_printf_i+0x18c>
 8008012:	065f      	lsls	r7, r3, #25
 8008014:	bf48      	it	mi
 8008016:	b2b6      	uxthmi	r6, r6
 8008018:	07df      	lsls	r7, r3, #31
 800801a:	bf48      	it	mi
 800801c:	f043 0320 	orrmi.w	r3, r3, #32
 8008020:	6029      	str	r1, [r5, #0]
 8008022:	bf48      	it	mi
 8008024:	6023      	strmi	r3, [r4, #0]
 8008026:	b91e      	cbnz	r6, 8008030 <_printf_i+0x1a4>
 8008028:	6823      	ldr	r3, [r4, #0]
 800802a:	f023 0320 	bic.w	r3, r3, #32
 800802e:	6023      	str	r3, [r4, #0]
 8008030:	2310      	movs	r3, #16
 8008032:	e7a7      	b.n	8007f84 <_printf_i+0xf8>
 8008034:	4824      	ldr	r0, [pc, #144]	; (80080c8 <_printf_i+0x23c>)
 8008036:	e7e4      	b.n	8008002 <_printf_i+0x176>
 8008038:	4615      	mov	r5, r2
 800803a:	e7bd      	b.n	8007fb8 <_printf_i+0x12c>
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	6826      	ldr	r6, [r4, #0]
 8008040:	6961      	ldr	r1, [r4, #20]
 8008042:	1d18      	adds	r0, r3, #4
 8008044:	6028      	str	r0, [r5, #0]
 8008046:	0635      	lsls	r5, r6, #24
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	d501      	bpl.n	8008050 <_printf_i+0x1c4>
 800804c:	6019      	str	r1, [r3, #0]
 800804e:	e002      	b.n	8008056 <_printf_i+0x1ca>
 8008050:	0670      	lsls	r0, r6, #25
 8008052:	d5fb      	bpl.n	800804c <_printf_i+0x1c0>
 8008054:	8019      	strh	r1, [r3, #0]
 8008056:	2300      	movs	r3, #0
 8008058:	6123      	str	r3, [r4, #16]
 800805a:	4615      	mov	r5, r2
 800805c:	e7bc      	b.n	8007fd8 <_printf_i+0x14c>
 800805e:	682b      	ldr	r3, [r5, #0]
 8008060:	1d1a      	adds	r2, r3, #4
 8008062:	602a      	str	r2, [r5, #0]
 8008064:	681d      	ldr	r5, [r3, #0]
 8008066:	6862      	ldr	r2, [r4, #4]
 8008068:	2100      	movs	r1, #0
 800806a:	4628      	mov	r0, r5
 800806c:	f7f8 f8b8 	bl	80001e0 <memchr>
 8008070:	b108      	cbz	r0, 8008076 <_printf_i+0x1ea>
 8008072:	1b40      	subs	r0, r0, r5
 8008074:	6060      	str	r0, [r4, #4]
 8008076:	6863      	ldr	r3, [r4, #4]
 8008078:	6123      	str	r3, [r4, #16]
 800807a:	2300      	movs	r3, #0
 800807c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008080:	e7aa      	b.n	8007fd8 <_printf_i+0x14c>
 8008082:	6923      	ldr	r3, [r4, #16]
 8008084:	462a      	mov	r2, r5
 8008086:	4649      	mov	r1, r9
 8008088:	4640      	mov	r0, r8
 800808a:	47d0      	blx	sl
 800808c:	3001      	adds	r0, #1
 800808e:	d0ad      	beq.n	8007fec <_printf_i+0x160>
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	079b      	lsls	r3, r3, #30
 8008094:	d413      	bmi.n	80080be <_printf_i+0x232>
 8008096:	68e0      	ldr	r0, [r4, #12]
 8008098:	9b03      	ldr	r3, [sp, #12]
 800809a:	4298      	cmp	r0, r3
 800809c:	bfb8      	it	lt
 800809e:	4618      	movlt	r0, r3
 80080a0:	e7a6      	b.n	8007ff0 <_printf_i+0x164>
 80080a2:	2301      	movs	r3, #1
 80080a4:	4632      	mov	r2, r6
 80080a6:	4649      	mov	r1, r9
 80080a8:	4640      	mov	r0, r8
 80080aa:	47d0      	blx	sl
 80080ac:	3001      	adds	r0, #1
 80080ae:	d09d      	beq.n	8007fec <_printf_i+0x160>
 80080b0:	3501      	adds	r5, #1
 80080b2:	68e3      	ldr	r3, [r4, #12]
 80080b4:	9903      	ldr	r1, [sp, #12]
 80080b6:	1a5b      	subs	r3, r3, r1
 80080b8:	42ab      	cmp	r3, r5
 80080ba:	dcf2      	bgt.n	80080a2 <_printf_i+0x216>
 80080bc:	e7eb      	b.n	8008096 <_printf_i+0x20a>
 80080be:	2500      	movs	r5, #0
 80080c0:	f104 0619 	add.w	r6, r4, #25
 80080c4:	e7f5      	b.n	80080b2 <_printf_i+0x226>
 80080c6:	bf00      	nop
 80080c8:	0800827d 	.word	0x0800827d
 80080cc:	0800828e 	.word	0x0800828e

080080d0 <memmove>:
 80080d0:	4288      	cmp	r0, r1
 80080d2:	b510      	push	{r4, lr}
 80080d4:	eb01 0402 	add.w	r4, r1, r2
 80080d8:	d902      	bls.n	80080e0 <memmove+0x10>
 80080da:	4284      	cmp	r4, r0
 80080dc:	4623      	mov	r3, r4
 80080de:	d807      	bhi.n	80080f0 <memmove+0x20>
 80080e0:	1e43      	subs	r3, r0, #1
 80080e2:	42a1      	cmp	r1, r4
 80080e4:	d008      	beq.n	80080f8 <memmove+0x28>
 80080e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080ee:	e7f8      	b.n	80080e2 <memmove+0x12>
 80080f0:	4402      	add	r2, r0
 80080f2:	4601      	mov	r1, r0
 80080f4:	428a      	cmp	r2, r1
 80080f6:	d100      	bne.n	80080fa <memmove+0x2a>
 80080f8:	bd10      	pop	{r4, pc}
 80080fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008102:	e7f7      	b.n	80080f4 <memmove+0x24>

08008104 <_sbrk_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4d06      	ldr	r5, [pc, #24]	; (8008120 <_sbrk_r+0x1c>)
 8008108:	2300      	movs	r3, #0
 800810a:	4604      	mov	r4, r0
 800810c:	4608      	mov	r0, r1
 800810e:	602b      	str	r3, [r5, #0]
 8008110:	f7f8 fd88 	bl	8000c24 <_sbrk>
 8008114:	1c43      	adds	r3, r0, #1
 8008116:	d102      	bne.n	800811e <_sbrk_r+0x1a>
 8008118:	682b      	ldr	r3, [r5, #0]
 800811a:	b103      	cbz	r3, 800811e <_sbrk_r+0x1a>
 800811c:	6023      	str	r3, [r4, #0]
 800811e:	bd38      	pop	{r3, r4, r5, pc}
 8008120:	20001ef8 	.word	0x20001ef8

08008124 <memcpy>:
 8008124:	440a      	add	r2, r1
 8008126:	4291      	cmp	r1, r2
 8008128:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800812c:	d100      	bne.n	8008130 <memcpy+0xc>
 800812e:	4770      	bx	lr
 8008130:	b510      	push	{r4, lr}
 8008132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800813a:	4291      	cmp	r1, r2
 800813c:	d1f9      	bne.n	8008132 <memcpy+0xe>
 800813e:	bd10      	pop	{r4, pc}

08008140 <_realloc_r>:
 8008140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008144:	4680      	mov	r8, r0
 8008146:	4614      	mov	r4, r2
 8008148:	460e      	mov	r6, r1
 800814a:	b921      	cbnz	r1, 8008156 <_realloc_r+0x16>
 800814c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008150:	4611      	mov	r1, r2
 8008152:	f7ff bc49 	b.w	80079e8 <_malloc_r>
 8008156:	b92a      	cbnz	r2, 8008164 <_realloc_r+0x24>
 8008158:	f7ff fbda 	bl	8007910 <_free_r>
 800815c:	4625      	mov	r5, r4
 800815e:	4628      	mov	r0, r5
 8008160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008164:	f000 f81b 	bl	800819e <_malloc_usable_size_r>
 8008168:	4284      	cmp	r4, r0
 800816a:	4607      	mov	r7, r0
 800816c:	d802      	bhi.n	8008174 <_realloc_r+0x34>
 800816e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008172:	d812      	bhi.n	800819a <_realloc_r+0x5a>
 8008174:	4621      	mov	r1, r4
 8008176:	4640      	mov	r0, r8
 8008178:	f7ff fc36 	bl	80079e8 <_malloc_r>
 800817c:	4605      	mov	r5, r0
 800817e:	2800      	cmp	r0, #0
 8008180:	d0ed      	beq.n	800815e <_realloc_r+0x1e>
 8008182:	42bc      	cmp	r4, r7
 8008184:	4622      	mov	r2, r4
 8008186:	4631      	mov	r1, r6
 8008188:	bf28      	it	cs
 800818a:	463a      	movcs	r2, r7
 800818c:	f7ff ffca 	bl	8008124 <memcpy>
 8008190:	4631      	mov	r1, r6
 8008192:	4640      	mov	r0, r8
 8008194:	f7ff fbbc 	bl	8007910 <_free_r>
 8008198:	e7e1      	b.n	800815e <_realloc_r+0x1e>
 800819a:	4635      	mov	r5, r6
 800819c:	e7df      	b.n	800815e <_realloc_r+0x1e>

0800819e <_malloc_usable_size_r>:
 800819e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081a2:	1f18      	subs	r0, r3, #4
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	bfbc      	itt	lt
 80081a8:	580b      	ldrlt	r3, [r1, r0]
 80081aa:	18c0      	addlt	r0, r0, r3
 80081ac:	4770      	bx	lr
	...

080081b0 <_init>:
 80081b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b2:	bf00      	nop
 80081b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081b6:	bc08      	pop	{r3}
 80081b8:	469e      	mov	lr, r3
 80081ba:	4770      	bx	lr

080081bc <_fini>:
 80081bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081be:	bf00      	nop
 80081c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081c2:	bc08      	pop	{r3}
 80081c4:	469e      	mov	lr, r3
 80081c6:	4770      	bx	lr
